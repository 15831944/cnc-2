#include "SvgPathGenerator.h"

////////////////////////////////////////////////////////////////////////////
const wxString& SvgPathFragment::printf(double val) {
////////////////////////////////////////////////////////////////////////////
	static wxString s;
	s = wxString::Format("%.3lf", SvgUnitCalculator::convertMM2ReferenceUnit(SvgUnitCalculator::getFactorMM2Unit(inputUnit) * val));
	return s;
}
////////////////////////////////////////////////////////////////////////////
const wxString& SvgPathFragment::absMove(double toX, double toY) {
////////////////////////////////////////////////////////////////////////////
	static wxString s;
	s =  " M ";
	s << printf(toX) << ",";
	s << printf(toY);
	return s;
}
////////////////////////////////////////////////////////////////////////////
const wxString& SvgPathFragment::relMove(double dx, double dy) {
////////////////////////////////////////////////////////////////////////////
	static wxString s;
	s =  " m ";
	s << printf(dx) << ",";
	s << printf(dy);
	return s;
}
////////////////////////////////////////////////////////////////////////////
const wxString& SvgPathFragment::absLine(double toX, double toY) {
////////////////////////////////////////////////////////////////////////////
	static wxString s;
	s =  " L ";
	s << printf(toX) << ",";
	s << printf(toY);
	return s;
}
////////////////////////////////////////////////////////////////////////////
const wxString& SvgPathFragment::relLine(double dx, double dy) {
////////////////////////////////////////////////////////////////////////////
	static wxString s;
	s =  " l ";
	s << printf(dx) << ",";
	s << printf(dy);
	return s;
}
////////////////////////////////////////////////////////////////////////////
const wxString& SvgPathFragment::ellipticalArg(double r) {
////////////////////////////////////////////////////////////////////////////
	return ellipticalArg(r, r);
}
////////////////////////////////////////////////////////////////////////////
const wxString& SvgPathFragment::ellipticalArg(double rx, double ry) {
////////////////////////////////////////////////////////////////////////////
	static wxString s;
	
	s =  " a ";
	s << printf(rx)   	<< ",";
	s << printf(ry)   	<< " 0 0 1 ";
	s << printf(rx * 2) << ",0";
	
	s << " a ";
	s << printf(rx)   	<< ",";
	s << printf(ry)   	<< " 0 0 1 -";
	s << printf(rx * 2)	<< ",0";

	return s;
}





////////////////////////////////////////////////////////////////////////////
void SvgPathString::initPath() {
////////////////////////////////////////////////////////////////////////////
	pathStr = "<path d=\"";
}
////////////////////////////////////////////////////////////////////////////
void SvgPathString::finishPath() {
	pathStr << wxString::Format("\" stroke=\"#%02X%02X%02X\" fill=\"none\" stroke-width=\"1.0\"/>", pathColour.Red(),  pathColour.Green(), pathColour.Blue());
}
////////////////////////////////////////////////////////////////////////////
void SvgPathString::add(const wxString& pf) {
	pathStr << pf << ' ';
}
////////////////////////////////////////////////////////////////////////////
const wxString& SvgPathString::get() {
////////////////////////////////////////////////////////////////////////////
	finishPath();
	static wxString s;
	s = pathStr;
	
	initPath();
	return s;
}
////////////////////////////////////////////////////////////////////////////
bool SvgPathString::addPocketWhole(double td, double r) {
////////////////////////////////////////////////////////////////////////////
	return addPocketWhole(td, r, r);
}
////////////////////////////////////////////////////////////////////////////
bool SvgPathString::addPocketWhole(double td, double rx, double ry) {
////////////////////////////////////////////////////////////////////////////
	if ( td < 1.0 ) 			{ addError(wxString::Format("Invalid tool diameter: %lf", td)); 			return false; }
	if ( rx < td / 2)			{ addError(wxString::Format("Invalid radius rx: %lf", rx)); 				return false; }
	if ( ry < td / 2)			{ addError(wxString::Format("Invalid radius ry: %lf", ry)); 				return false; }
	
	// correctd raduius 
	double rxc = rx - (td / 2);
	double ryc = ry - (td / 2);
	
	// First absolute move, center is always 0,0
	add(fGen().absMove(-rxc, 0.0));
	add(fGen().ellipticalArg(rxc, ryc));
	
	for ( int i=1; i<80; i++ ) {
		double nrx = rxc - td * i;
		double nry = ryc - td * i;
		
		if ( nrx < 0.0 ) nrx = 0.0;
		if ( nry < 0.0 ) nry = 0.0;
		
		if ( cnc::dblCompare(nrx, 0.0) && cnc::dblCompare(nry, 0.0) )
			break;
		
	
		add(fGen().relLine(td, 0.0));
		add(fGen().ellipticalArg(rxc - td * i, ryc - td * i));
	}
	
	
	return true;
}







////////////////////////////////////////////////////////////////////////////
void SvgPathGroup::translate(double xy) {
////////////////////////////////////////////////////////////////////////////
	translate(xy, xy);
}
////////////////////////////////////////////////////////////////////////////
void SvgPathGroup::translate(double x, double y) {
////////////////////////////////////////////////////////////////////////////
	double translateX = SvgUnitCalculator::convertMM2ReferenceUnit(SvgUnitCalculator::getFactorMM2Unit(inputUnit) * x);
	double translateY = SvgUnitCalculator::convertMM2ReferenceUnit(SvgUnitCalculator::getFactorMM2Unit(inputUnit) * y);
	
	transform << wxString::Format("translate(%.3lf,%.3lf) ", translateX, translateY);
}
////////////////////////////////////////////////////////////////////////////
void SvgPathGroup::scale(double xy) {
////////////////////////////////////////////////////////////////////////////
	scale(xy, xy);
}
////////////////////////////////////////////////////////////////////////////
void SvgPathGroup::scale(double x, double y) {
////////////////////////////////////////////////////////////////////////////
	transform << wxString::Format("scale(%.3lf,%.3lf) ", x, y);
}
////////////////////////////////////////////////////////////////////////////
void SvgPathGroup::rotate(double a, double x, double y) {
////////////////////////////////////////////////////////////////////////////
	transform << wxString::Format("rotate(%.3lf,%.3lf,%.3lf) ", a, x, y);
}
////////////////////////////////////////////////////////////////////////////
void SvgPathGroup::skewX(double x) {
////////////////////////////////////////////////////////////////////////////
	transform << wxString::Format("skewX(%.3lf) ", x);
}
////////////////////////////////////////////////////////////////////////////
void SvgPathGroup::skewY(double y) {
////////////////////////////////////////////////////////////////////////////
	transform << wxString::Format("skewY(%.3lf) ", y);
}
////////////////////////////////////////////////////////////////////////////
void SvgPathGroup::initGroup() {
////////////////////////////////////////////////////////////////////////////
	pathGroup.clear();
	transform.clear();
}
////////////////////////////////////////////////////////////////////////////
void SvgPathGroup::finishGroup() {
////////////////////////////////////////////////////////////////////////////
	wxString prepend("<g>");
	
	if ( transform.IsEmpty() == false ) {
		prepend  = "<g transform=\"";
		prepend <<transform;
		prepend << "\">";
	}
	
	pathGroup.Prepend(prepend);
	pathGroup << "\n</g>";
}
////////////////////////////////////////////////////////////////////////////
void SvgPathGroup::add(const wxString& ps) {
////////////////////////////////////////////////////////////////////////////
	pathGroup << "\n " << ps;
}
////////////////////////////////////////////////////////////////////////////
const wxString& SvgPathGroup::get() {
////////////////////////////////////////////////////////////////////////////
	finishGroup();
	static wxString s;
	s = pathGroup;
	
	initGroup();
	return s;
}