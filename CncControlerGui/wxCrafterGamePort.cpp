//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterGamePort.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterGamePort.h"


// Declare the bitmap loading function
extern void wxC81CCInitBitmapResources();

static bool bBitmapLoaded = false;


CncGamepadControllerStateBase::CncGamepadControllerStateBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC81CCInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer5802 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer5802->SetFlexibleDirection( wxBOTH );
    flexGridSizer5802->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5802->AddGrowableCol(0);
    flexGridSizer5802->AddGrowableRow(0);
    this->SetSizer(flexGridSizer5802);
    
    wxFlexGridSizer* flexGridSizer5821 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer5821->SetFlexibleDirection( wxBOTH );
    flexGridSizer5821->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5821->AddGrowableCol(0);
    flexGridSizer5821->AddGrowableRow(0);
    
    flexGridSizer5802->Add(flexGridSizer5821, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_listbook7478 = new wxListbook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLB_DEFAULT|wxBK_DEFAULT);
    m_listbook7478->SetName(wxT("m_listbook7478"));
    wxImageList* m_listbook7478_il = new wxImageList(16, 16);
    m_listbook7478->AssignImageList(m_listbook7478_il);
    
    flexGridSizer5821->Add(m_listbook7478, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panel7480 = new wxPanel(m_listbook7478, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook7478, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel7480ImgIndex;
    m_panel7480ImgIndex = m_listbook7478_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("color-swatch")));
    m_listbook7478->AddPage(m_panel7480, _("Gamepad\nState"), false, m_panel7480ImgIndex);
    
    wxFlexGridSizer* flexGridSizer6042 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6042->SetFlexibleDirection( wxBOTH );
    flexGridSizer6042->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6042->AddGrowableCol(0);
    flexGridSizer6042->AddGrowableRow(0);
    m_panel7480->SetSizer(flexGridSizer6042);
    
    m_gamepadTrace = new wxTextCtrl(m_panel7480, wxID_ANY, wxT("Gamepad state not available"), wxDefaultPosition, wxDLG_UNIT(m_panel7480, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE);
    m_gamepadTrace->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_CAPTIONTEXT));
    m_gamepadTrace->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_gamepadTraceFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_gamepadTrace->SetFont(m_gamepadTraceFont);
    
    flexGridSizer6042->Add(m_gamepadTrace, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panel7482 = new wxPanel(m_listbook7478, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook7478, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel7482ImgIndex;
    m_panel7482ImgIndex = m_listbook7478_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("system-run-3")));
    m_listbook7478->AddPage(m_panel7482, _("Service\nTrace"), false, m_panel7482ImgIndex);
    
    wxFlexGridSizer* flexGridSizer60421 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer60421->SetFlexibleDirection( wxBOTH );
    flexGridSizer60421->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer60421->AddGrowableCol(0);
    flexGridSizer60421->AddGrowableRow(0);
    m_panel7482->SetSizer(flexGridSizer60421);
    
    m_gamepadServiceTrace = new wxTextCtrl(m_panel7482, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE);
    m_gamepadServiceTrace->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_CAPTIONTEXT));
    m_gamepadServiceTrace->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_gamepadServiceTraceFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_gamepadServiceTrace->SetFont(m_gamepadServiceTraceFont);
    
    flexGridSizer60421->Add(m_gamepadServiceTrace, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer6026 = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizer6026->SetFlexibleDirection( wxBOTH );
    flexGridSizer6026->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6026->AddGrowableCol(4);
    flexGridSizer6026->AddGrowableRow(0);
    
    flexGridSizer60421->Add(flexGridSizer6026, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btQueryGamepadService = new wxButton(m_panel7482, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btQueryGamepadService->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-question-2 (2)")), wxLEFT);
    m_btQueryGamepadService->SetBitmapMargins(2,2);
    #endif
    m_btQueryGamepadService->SetToolTip(_("Query the underlying Service"));
    
    flexGridSizer6026->Add(m_btQueryGamepadService, 0, wxALL, WXC_FROM_DIP(1));
    m_btQueryGamepadService->SetMinSize(wxSize(26,26));
    
    m_staticLine6051 = new wxStaticLine(m_panel7482, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer6026->Add(m_staticLine6051, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_btStartGamepadService = new wxButton(m_panel7482, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btStartGamepadService->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("system-run-3")), wxLEFT);
    m_btStartGamepadService->SetBitmapMargins(2,2);
    #endif
    m_btStartGamepadService->SetToolTip(_("Start the underlying Service"));
    
    flexGridSizer6026->Add(m_btStartGamepadService, 0, wxALL, WXC_FROM_DIP(1));
    m_btStartGamepadService->SetMinSize(wxSize(26,26));
    
    m_btStopGamepadService = new wxButton(m_panel7482, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btStopGamepadService->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-x-close")), wxLEFT);
    m_btStopGamepadService->SetBitmapMargins(2,2);
    #endif
    m_btStopGamepadService->SetToolTip(_("Stop the underlying Service"));
    
    flexGridSizer6026->Add(m_btStopGamepadService, 0, wxALL, WXC_FROM_DIP(1));
    m_btStopGamepadService->SetMinSize(wxSize(26,26));
    
    wxFlexGridSizer* flexGridSizer6059 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6059->SetFlexibleDirection( wxBOTH );
    flexGridSizer6059->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6059->AddGrowableCol(0);
    flexGridSizer6059->AddGrowableRow(0);
    
    flexGridSizer6026->Add(flexGridSizer6059, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_btClearGamepadServiceTrace = new wxButton(m_panel7482, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel7482, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClearGamepadServiceTrace->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("clean")), wxLEFT);
    m_btClearGamepadServiceTrace->SetBitmapMargins(2,2);
    #endif
    m_btClearGamepadServiceTrace->SetToolTip(_("Clear the trace"));
    
    flexGridSizer6059->Add(m_btClearGamepadServiceTrace, 0, wxALL, WXC_FROM_DIP(1));
    m_btClearGamepadServiceTrace->SetMinSize(wxSize(26,26));
    
    SetName(wxT("CncGamepadControllerStateBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_btQueryGamepadService->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::queryGamepadService), NULL, this);
    m_btStartGamepadService->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::startGamepadService), NULL, this);
    m_btStopGamepadService->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::stopGamepadService), NULL, this);
    m_btClearGamepadServiceTrace->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::clearGamepadServiceTrace), NULL, this);
    
}

CncGamepadControllerStateBase::~CncGamepadControllerStateBase()
{
    m_btQueryGamepadService->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::queryGamepadService), NULL, this);
    m_btStartGamepadService->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::startGamepadService), NULL, this);
    m_btStopGamepadService->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::stopGamepadService), NULL, this);
    m_btClearGamepadServiceTrace->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::clearGamepadServiceTrace), NULL, this);
    
}

CncGameportControllerBase::CncGameportControllerBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC81CCInitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("gamepad-active"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer7485 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer7485->SetFlexibleDirection( wxBOTH );
    flexGridSizer7485->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7485->AddGrowableCol(0);
    flexGridSizer7485->AddGrowableRow(0);
    this->SetSizer(flexGridSizer7485);
    
    m_gamepadState = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_gamepadState->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer7485->Add(m_gamepadState, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticLine7492 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer7485->Add(m_staticLine7492, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer7488 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer7488->SetFlexibleDirection( wxBOTH );
    flexGridSizer7488->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer7485->Add(flexGridSizer7488, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_btClose = new wxButton(this, wxID_ANY, _("Close"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClose->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-close")), wxLEFT);
    m_btClose->SetBitmapMargins(2,2);
    #endif
    wxFont m_btCloseFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btClose->SetFont(m_btCloseFont);
    
    flexGridSizer7488->Add(m_btClose, 0, wxALL, WXC_FROM_DIP(5));
    
    SetName(wxT("CncGameportControllerBase"));
    SetMinClientSize(wxSize(500,300));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    m_btClose->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGameportControllerBase::onClose), NULL, this);
    
}

CncGameportControllerBase::~CncGameportControllerBase()
{
    m_btClose->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGameportControllerBase::onClose), NULL, this);
    
}
