//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#ifndef _CNCGUICONTROLLER_CNCCONTROLERGUI_WXCRAFTER_BASE_CLASSES_H
#define _CNCGUICONTROLLER_CNCCONTROLERGUI_WXCRAFTER_BASE_CLASSES_H

#include <wx/settings.h>
#include <wx/xrc/xmlres.h>
#include <wx/xrc/xh_bmp.h>
#include <wx/frame.h>
#include <wx/iconbndl.h>
#include <wx/artprov.h>
#include <wx/sizer.h>
#include <wx/aui/framemanager.h>
#include <wx/aui/dockart.h>
#include <wx/pen.h>
#include <wx/aui/auibar.h>
#include <map>
#include <wx/menu.h>
#include <wx/bmpbuttn.h>
#include <wx/toolbar.h>
#include <wx/stattext.h>
#include <wx/bmpcbox.h>
#include <wx/slider.h>
#include <wx/button.h>
#include <wx/panel.h>
#include <wx/choice.h>
#include <wx/arrstr.h>
#include <wx/simplebook.h>
#include <wx/imaglist.h>
#include <wx/statline.h>
#include <wx/tglbtn.h>
#include <wx/notebook.h>
#include <wx/statbmp.h>
#include <wx/combobox.h>
#include <wx/stc/stc.h>
#include <wx/textctrl.h>
#include <wx/dataview.h>
#include <wx/propgrid/manager.h>
#include <wx/spinbutt.h>
#include <wx/checkbox.h>
#include <wx/radiobox.h>
#include <wx/listbook.h>
#include <wx/spinctrl.h>
#include <wx/scrolwin.h>
#include <wx/listbox.h>
#include "CncZView.h"
#include <wx/listctrl.h>
#include <wx/webview.h>
#include "CncSpeedView.h"
#include <wx/splitter.h>
#include <wx/timer.h>
#include <wx/treectrl.h>
#include <wx/toolbook.h>
#include <wx/propgrid/property.h>
#include <wx/propgrid/advprops.h>
#include <wx/collpane.h>
#include <wx/dialog.h>
#include <wx/bitmap.h>
#include <wx/icon.h>
#if wxVERSION_NUMBER >= 2900
#include <wx/persist.h>
#include <wx/persist/toplevel.h>
#include <wx/persist/bookctrl.h>
#include <wx/persist/treebook.h>
#endif

#ifdef WXC_FROM_DIP
#undef WXC_FROM_DIP
#endif
#if wxVERSION_NUMBER >= 3100
#define WXC_FROM_DIP(x) wxWindow::FromDIP(x, NULL)
#else
#define WXC_FROM_DIP(x) x
#endif


class MainFrameBClass : public wxFrame
{
protected:
    wxAuiManager* m_auimgrMain;
    wxAuiToolBar* m_auibarMain;
    std::map<int, wxMenu*> m_dropdownMenus;
    wxBitmapButton* m_bmpButton4490;
    wxStaticText* m_staticText1842;
    wxBitmapButton* m_searchConnections;
    wxBitmapComboBox* m_portSelector;
    wxBitmapButton* m_connect;
    wxBitmapButton* m_btSelectReferences;
    wxBitmapButton* m_btSelectManuallyMove;
    wxBitmapButton* m_btSelectSetup;
    wxBitmapButton* m_btSelectTemplate;
    wxBitmapButton* m_btSelectInboundTest;
    wxBitmapButton* m_btSelectInboundPreview;
    wxBitmapButton* m_btSelectCncPreview;
    wxBitmapButton* m_btSelectTemplatePreview;
    wxStaticText* m_staticText1748;
    wxMenu* m_configStepDelayMenu;
    wxMenuItem* m_miCfgStepDelayMin;
    wxMenuItem* m_miCfgStepDelayMax;
    wxMenuItem* m_miCfgSimulateArduino;
    wxMenuItem* m_miCfgCustom;
    wxSlider* m_stepDelay;
    wxStaticText* m_stepDelayValue;
    wxBitmapButton* m_rcReset;
    wxBitmapButton* m_rcDebugConfig;
    wxBitmapButton* m_rcDebug;
    wxBitmapButton* m_rcNextBreakpoint;
    wxBitmapButton* m_rcNextStep;
    wxBitmapButton* m_rcFinish;
    wxBitmapButton* m_rcRun;
    wxBitmapButton* m_rcPause;
    wxBitmapButton* m_rcStop;
    wxButton* m_btnEmergenyStop;
    wxPanel* m_scrollWinMain;
    wxChoice* m_mainViewSelector;
    wxSimplebook* m_mainViewBook;
    wxPanel* m_mainBookSourcePanel;
    wxButton* m_openSourceExtern;
    wxButton* m_openSvgExtern;
    wxStaticLine* m_staticLine44728;
    wxButton* m_saveTemplate;
    wxButton* m_reloadTemplate;
    wxButton* m_renameTemplate;
    wxButton* m_removeTemplate;
    wxStaticLine* m_staticLine4472;
    wxBitmapToggleButton* m_btSvgToggleWordWrap;
    wxStaticLine* m_staticLine4474;
    wxButton* m_btPathGenerator;
    wxNotebook* m_templateNotebook;
    wxPanel* m_panelTplEdit;
    wxBitmapToggleButton* m_tbCaseSensitive;
    wxBitmapToggleButton* m_tbWholeWord;
    wxBitmapToggleButton* m_tbRegEx;
    wxBitmapToggleButton* m_tbHighLight;
    wxStaticBitmap* m_svgEditSearchState;
    wxComboBox* m_svgEditSearch;
    wxButton* m_svgEditFind;
    wxButton* m_svgEditFindPrev;
    wxStyledTextCtrl* m_stcFileContent;
    wxStaticText* m_filePosition;
    wxTextCtrl* m_svgEditStatus;
    wxStaticText* m_editMode;
    wxPanel* m_panelTplUserAgent;
    wxStaticText* m_staticText1498;
    wxDataViewListCtrl* m_dvListCtrlSvgUAInboundPathList;
    wxStaticText* m_staticText14983;
    wxDataViewListCtrl* m_dvListCtrlSvgUAUseDirective;
    wxStaticText* m_staticText1500;
    wxDataViewListCtrl* m_dvListCtrlSvgUADetailInfo;
    wxTextCtrl* m_selectedUAInfo;
    wxPanel* m_mainBookSetup;
    wxStaticText* m_staticText5137;
    wxButton* m_loadConfiguration;
    wxButton* m_saveConfiguration;
    wxNotebook* m_notebook4561;
    wxPanel* m_setupConfigPage;
    wxPropertyGridManager* m_pgMgrSetup;
    wxPanel* m_setupToolMagazine;
    wxPanel* m_toolMagazinePlaceholder;
    wxPanel* m_setupSpeedWizard;
    wxStaticText* m_staticText4575;
    wxPanel* m_mainBookReference;
    wxStaticText* m_staticText779;
    wxStaticLine* m_staticLine783;
    wxNotebook* m_manualMotionControl;
    wxPanel* m_panel5187;
    wxStaticText* m_cbStepSensitivityText;
    wxComboBox* m_cbStepSensitivity;
    wxButton* m_cmXneg;
    wxButton* m_cmXpos;
    wxButton* m_cmYneg;
    wxButton* m_cmYpos;
    wxButton* m_cmZneg;
    wxButton* m_cmZpos;
    wxPanel* m_panel5185;
    wxStaticText* m_staticText821;
    wxSpinButton* m_spinButtonX;
    wxStaticText* m_staticText63169;
    wxSpinButton* m_spinButtonY;
    wxTextCtrl* m_moveXYAxisCtl;
    wxStaticText* m_staticText823;
    wxStaticText* m_staticText6316;
    wxStaticText* m_staticText825;
    wxStaticText* m_staticText827;
    wxStaticText* m_staticText631;
    wxStaticText* m_staticText832;
    wxStaticText* m_staticText834;
    wxSpinButton* m_spinButtonZ;
    wxTextCtrl* m_moveZAxisCtl;
    wxStaticText* m_staticText830;
    wxStaticText* m_staticText836;
    wxCheckBox* m_includingWpt;
    wxButton* m_setZero;
    wxStaticText* m_staticText1156;
    wxStaticLine* m_staticLine1158;
    wxStaticText* m_staticText1171;
    wxStaticText* m_staticText1173;
    wxComboBox* m_homeDefintion;
    wxButton* m_moveHome;
    wxStaticLine* m_staticLine2177;
    wxStaticLine* m_staticLine2179;
    wxStaticText* m_staticText2182;
    wxComboBox* m_zeroMoveModeXY;
    wxButton* m_moveXYtoZero;
    wxStaticText* m_staticText218228;
    wxComboBox* m_zeroMoveModeXYZ;
    wxButton* m_moveXYZtoZero;
    wxStaticText* m_staticText21822831;
    wxComboBox* m_zeroMoveModeZ;
    wxButton* m_moveZtoZero;
    wxStaticLine* m_staticLine2191;
    wxStaticLine* m_staticLine2193;
    wxStaticText* m_staticText1177233;
    wxStaticText* m_staticText11772;
    wxButton* m_xToMax;
    wxButton* m_xToMid;
    wxButton* m_xToMin;
    wxButton* m_yToMax;
    wxButton* m_yToMid;
    wxButton* m_yToMin;
    wxStaticLine* m_staticLine2195;
    wxStaticLine* m_staticLine2197;
    wxStaticText* m_staticText1175;
    wxStaticText* m_staticText1177;
    wxButton* m_zToMax;
    wxButton* m_zToMid;
    wxButton* m_zToMin;
    wxButton* m_zToTop;
    wxStaticText* m_staticText2438;
    wxButton* m_zToBottom;
    wxPanel* m_mainBookManual;
    wxStaticText* m_staticText1160;
    wxStaticLine* m_staticLine1162;
    wxRadioBox* m_mmRadioCoordinates;
    wxStaticText* m_staticText5101;
    wxComboBox* m_manuallyToolId;
    wxStaticText* m_staticText5105;
    wxSlider* m_manuallySpeedSlider;
    wxTextCtrl* m_manuallySpeedValue;
    wxStaticText* m_staticText5113;
    wxStaticLine* m_staticLine5109;
    wxStaticText* m_staticText793;
    wxButton* m_minManuallyXSlider;
    wxTextCtrl* m_metricX;
    wxButton* m_maxManuallyXSlider;
    wxButton* m_zeroManuallyXSlider;
    wxButton* m_signManuallyXSlider;
    wxStaticText* m_mmUnitX;
    wxSlider* m_xManuallySlider;
    wxStaticLine* m_staticLine5129;
    wxStaticText* m_staticText797;
    wxButton* m_minManuallyYSlider;
    wxTextCtrl* m_metricY;
    wxButton* m_maxManuallyYSlider;
    wxButton* m_zeroManuallyYSlider;
    wxButton* m_signManuallyYSlider;
    wxStaticText* m_mmUnitY;
    wxSlider* m_yManuallySlider;
    wxStaticLine* m_staticLine5133;
    wxStaticText* m_staticText7973;
    wxButton* m_minManuallyZSlider;
    wxTextCtrl* m_metricZ;
    wxButton* m_maxManuallyZSlider;
    wxButton* m_zeroManuallyZSlider;
    wxButton* m_signManuallyZSlider;
    wxStaticText* m_mmUnitZ;
    wxSlider* m_zManuallySlider;
    wxStaticLine* m_staticLine5135;
    wxPanel* m_mainBookTest;
    wxListbook* m_testCaseBook;
    wxPanel* m_testIntervalPage;
    wxStaticText* m_staticText2117;
    wxStaticLine* m_staticLine2253;
    wxComboBox* m_testIntervalMode;
    wxStaticText* m_staticText2105;
    wxStaticText* m_staticText2107;
    wxStaticText* m_staticText2109;
    wxStaticText* m_staticText2149;
    wxStaticText* m_staticText2115;
    wxStaticText* m_staticText2165;
    wxStaticLine* m_staticLine2111;
    wxStaticText* m_testAxisX;
    wxSpinCtrl* m_testCountX;
    wxTextCtrl* m_testDistanceX;
    wxStaticText* m_staticText2101;
    wxComboBox* m_testFirstX;
    wxStaticText* m_staticText2151;
    wxCheckBox* m_testModeX;
    wxStaticText* m_testDurationCounterX;
    wxStaticText* m_testAxisY;
    wxSpinCtrl* m_testCountY;
    wxTextCtrl* m_testDistanceY;
    wxStaticText* m_staticText210115;
    wxComboBox* m_testFirstY;
    wxStaticText* m_staticText215123;
    wxCheckBox* m_testModeY;
    wxStaticText* m_testDurationCounterY;
    wxStaticText* m_testAxisZ;
    wxSpinCtrl* m_testCountZ;
    wxTextCtrl* m_testDistanceZ;
    wxStaticText* m_staticText21011521;
    wxComboBox* m_testFirstZ;
    wxStaticText* m_staticText215124;
    wxCheckBox* m_testModeZ;
    wxStaticText* m_testDurationCounterZ;
    wxPanel* m_testDimensions;
    wxStaticText* m_staticText21174;
    wxStaticLine* m_staticLine22535;
    wxStaticText* m_staticText2377;
    wxStaticText* m_staticText2418;
    wxStaticText* m_staticText2381;
    wxStaticText* m_staticText2379;
    wxStaticText* m_staticText2383;
    wxStaticLine* m_staticLine2385;
    wxStaticText* m_testDimAxisX;
    wxCheckBox* m_testDimModeX;
    wxCheckBox* m_testDimMinX;
    wxCheckBox* m_testDimMaxX;
    wxTextCtrl* m_testDimResultX;
    wxStaticText* m_staticText2431;
    wxCheckBox* m_testDimResultStateX;
    wxButton* m_testDimTakeX;
    wxStaticText* m_testDimAxisY;
    wxCheckBox* m_testDimModeY;
    wxCheckBox* m_testDimMinY;
    wxCheckBox* m_testDimMaxY;
    wxTextCtrl* m_testDimResultY;
    wxStaticText* m_testDimUnitX6;
    wxCheckBox* m_testDimResultStateY;
    wxButton* m_testDimTakeY;
    wxStaticText* m_testDimAxisZ;
    wxCheckBox* m_testDimModeZ;
    wxCheckBox* m_testDimMinZ;
    wxCheckBox* m_testDimMaxZ;
    wxTextCtrl* m_testDimResultZ;
    wxStaticText* m_testDimUnitX12;
    wxCheckBox* m_testDimResultStateZ;
    wxButton* m_testDimTakeZ;
    wxStaticLine* m_staticLine2429;
    wxButton* m_testDimTakeAll;
    wxPanel* m_testLimitPage;
    wxStaticText* m_staticText21172;
    wxStaticLine* m_staticLine22533;
    wxToggleButton* m_testToggleEndSwitch;
    wxPanel* m_testToolPage;
    wxStaticText* m_staticText211726;
    wxStaticLine* m_staticLine225337;
    wxToggleButton* m_testToggleTool;
    wxPanel* m_ctrlTestSuite;
    wxStaticText* m_staticText21174365;
    wxTextCtrl* m_ctrlTestSelectedId;
    wxStaticLine* m_staticLine22535477;
    wxStaticText* m_staticText25139;
    wxScrolledWindow* m_scrollWin2571;
    wxListBox* m_ctrlTestSelection;
    wxStaticText* m_staticText251911;
    wxTextCtrl* m_ctrlTestDescription;
    wxStaticText* m_staticText2486121314;
    wxTextCtrl* m_ctrlTestParam1;
    wxStaticText* m_staticText24861216;
    wxTextCtrl* m_ctrlTestParam2;
    wxStaticText* m_staticText24861418;
    wxTextCtrl* m_ctrlTestParam3;
    wxStaticText* m_staticText24861520;
    wxTextCtrl* m_ctrlTestParam4;
    wxStaticText* m_staticText248622;
    wxTextCtrl* m_ctrlTestParam5;
    wxPanel* m_mainBookPreviewPanel;
    wxPanel* m_filePreviewPlaceholder;
    wxPanel* m_panel4398;
    wxStaticText* m_staticText4402;
    wxTextCtrl* m_currentFileMangerPreviewFileName;
    wxPanel* m_panelZView;
    CncZView* m_zView;
    wxStaticText* m_infoToolDiameter;
    wxScrolledWindow* m_scrollWinMonitor;
    wxChoice* m_monitorViewSelector;
    wxSimplebook* m_monitorViewBook;
    wxPanel* m_monitorBookCncPanel;
    wxNotebook* m_outboundNotebook;
    wxPanel* m_cncParameters;
    wxListbook* m_notebookConfig;
    wxPanel* m_cncSummary;
    wxStaticText* m_staticText11481;
    wxListCtrl* m_cncSummaryListCtrl;
    wxButton* m_btCancelRun;
    wxButton* m_btConfirmRun;
    wxPanel* m_cncSetters;
    wxStaticText* m_staticText1150;
    wxTextCtrl* m_setterListCount;
    wxButton* m_btClearSetterList;
    wxButton* m_btRefreshSetterList;
    wxListCtrl* m_setterList;
    wxPanel* m_controllerConfiguration;
    wxStaticText* m_staticText12831;
    wxButton* m_btRequestCtlConfig;
    wxDataViewListCtrl* m_dvListCtrlControllerConfig;
    wxPanel* m_controllerPinReport;
    wxStaticText* m_staticText128313;
    wxButton* m_btRequestControllerPins;
    wxDataViewListCtrl* m_dvListCtrlControllerPins;
    wxPanel* m_conrollerMessages;
    wxStaticText* m_staticText1283132;
    wxButton* m_btClearMsgHistory;
    wxTextCtrl* m_controllerMsgHistory;
    wxPanel* m_controllerErrorInfo;
    wxStaticText* m_staticText128314;
    wxButton* m_btResetCtlErrorInfo;
    wxButton* m_btRequestCtlErrorInfo;
    wxButton* m_btClearCtlErrorInfoList;
    wxDataViewListCtrl* m_dvListCtrlControllerErrorInfo;
    wxPanel* m_panel5162;
    wxStaticText* m_staticText5159;
    wxTextCtrl* m_lastErrorInfoResponseId;
    wxPanel* m_3DPane;
    wxPanel* m_probeModePanel;
    wxBitmapToggleButton* m_btProbeMode;
    wxStaticText* m_probeModeLabel;
    wxStaticLine* m_staticLine5016;
    wxBitmapToggleButton* m_switchMonitoing;
    wxStaticLine* m_staticLine3525;
    wxButton* m_3D_Refreh;
    wxButton* m_3D_Clear;
    wxStaticLine* m_staticLine47803;
    wxStaticText* m_staticText16032;
    wxComboBox* m_cbCurveLibResolution;
    wxStaticLine* m_staticLine4780;
    wxStaticText* m_staticText32334;
    wxSlider* m_displayInterval;
    wxPanel* m_3DOutboundControl;
    wxPanel* m_rotatePaneZ3D;
    wxStaticText* m_staticText487556;
    wxPanel* m_rotatePaneY3D;
    wxStaticText* m_staticText48755;
    wxPanel* m_rotatePaneX3D;
    wxStaticText* m_staticText4875;
    wxPanel* m_drawPane3D;
    wxPanel* m_scalePane3D;
    wxPanel* m_3DOutboundStatistics;
    wxButton* m_btShowHideStatistics;
    wxButton* m_bt2ShowHideStatistics;
    wxStaticLine* m_staticLine50051;
    wxStaticText* m_staticText5014;
    wxStaticBitmap* m_lableWorkpieceThickness;
    wxStaticBitmap* m_toolStateTrafficLight;
    wxTextCtrl* m_toolId;
    wxStaticLine* m_staticLine5005;
    wxStaticLine* m_staticLine5008;
    wxStaticText* m_staticText1128;
    wxTextCtrl* m_crossings;
    wxStaticText* m_staticText1966;
    wxTextCtrl* m_passingCount;
    wxNotebook* m_statisticBook;
    wxPanel* m_statisticPageSum;
    wxListCtrl* m_statisticSummaryListCtrl;
    wxCheckBox* m_checkBoxStatisticUpdate;
    wxPanel* m_statisticPageVecties;
    wxButton* m_3D_Trace3;
    wxButton* m_3D_Trace4;
    wxButton* m_3D_Trace;
    wxListCtrl* m_vectiesListCtrl;
    wxPanel* m_panel5165;
    wxButton* m_3D_Top;
    wxButton* m_3D_Bottom;
    wxButton* m_3D_Front;
    wxButton* m_3D_Rear;
    wxButton* m_3D_Left;
    wxButton* m_3D_Right;
    wxStaticLine* m_staticLine3483;
    wxButton* m_3D_Perspective1;
    wxButton* m_3D_Perspective2;
    wxButton* m_3D_Perspective3;
    wxButton* m_3D_Perspective4;
    wxStaticLine* m_staticLine2341;
    wxButton* m_motionMonitorOptionDlg;
    wxPanel* m_svgEmuResult;
    wxButton* m_svgEmuOpenFileAsSource;
    wxButton* m_svgEmuOpenFileAsSvg;
    wxButton* m_svgEmuReload;
    wxButton* m_svgEmuClear;
    wxButton* m_svgEmuToggleOrigPath;
    wxButton* m_svgEmuZoomHome;
    wxButton* m_svgEmuZoomMinus;
    wxButton* m_svgEmuZoomPlus;
#if wxUSE_WEBVIEW
    wxWebView* m_svgView;
#endif // wxUSE_WEBVIEW

    wxPanel* m_svgEmuSource;
    wxBitmapToggleButton* m_svgEmuToggleWordWrap;
    wxStyledTextCtrl* m_stcEmuSource;
    wxPanel* m_monitorTemplatePanel;
    wxPanel* m_monitorTemplatePreviewPlaceHolder;
    wxPanel* m_panel5144;
    wxStaticText* m_staticText5142;
    wxTextCtrl* m_currentInboundFilePreviewFileName;
    wxPanel* m_panelSpeed;
    wxStaticText* m_staticText28052;
    CncSpeedView* m_speedView;
    wxPanel* m_scrollWinFile;
    wxCheckBox* m_keepFileManagerPreview;
    wxListCtrl* m_lruList;
    wxStaticLine* m_staticLine4345;
    wxPanel* m_mainFileViewPlaceholder;
    wxPanel* m_scrollWinLogger;
    wxBitmapButton* m_clearLogger;
    wxBitmapButton* m_copyLogger;
    wxCheckBox* m_showLoggerOnDemand;
    wxTextCtrl* m_logger;
    wxTextCtrl* m_tmpTraceInfo;
    wxPanel* m_statusBar;
    wxStaticText* m_staticText395;
    wxTextCtrl* m_cmdDuration;
    wxStaticLine* m_staticLine6021;
    wxStaticBitmap* m_heartbeatState;
    wxStaticLine* m_staticLine602;
    wxTextCtrl* m_inputFileName;
    wxStaticLine* m_staticLine6801;
    wxStaticText* m_svgParseMode;
    wxPanel* m_activityPanel;
    wxStaticLine* m_staticLine680;
    wxStaticText* LableF;
    wxTextCtrl* m_feedSpeed;
    wxStaticBitmap* m_refPosTrafficLight;
    wxStaticText* LableX;
    wxTextCtrl* m_xAxis;
    wxTextCtrl* m_xAxisCtl;
    wxStaticText* LabelY;
    wxTextCtrl* m_yAxis;
    wxTextCtrl* m_yAxisCtl;
    wxStaticText* LableZ;
    wxTextCtrl* m_zAxis;
    wxTextCtrl* m_zAxisCtl;
    wxComboBox* m_unit;
    wxStaticLine* m_staticLine60234;
    wxStaticText* m_staticText1196;
    wxStaticText* m_xMinLimit;
    wxStaticText* m_xMaxLimit;
    wxStaticText* m_yMinLimit;
    wxStaticText* m_yMaxLimit;
    wxStaticText* m_zMinLimit;
    wxStaticText* m_zMaxLimit;
    wxStaticLine* m_staticLine602341;
    wxStaticBitmap* m_updateManagerUpdate;
    wxPanel* m_svgUnitCalulator;
    wxStaticText* m_staticText3261;
    wxComboBox* m_cbUCUnitFrom;
    wxStaticText* m_staticText3259;
    wxComboBox* m_cbUCUnitTo;
    wxTextCtrl* m_cbUCValueFrom;
    wxTextCtrl* m_cbUCValueTo;
    wxButton* m_btUCClose;
    wxPanel* m_serialSpyView;
    wxButton* m_enableSerialSpy;
    wxButton* m_MarkSerialSpy;
    wxButton* m_clearSerialSpy;
    wxComboBox* m_cbSerialSpyMode;
    wxSplitterWindow* m_splitter4728;
    wxPanel* m_splitterPage4732;
    wxTextCtrl* m_serialSpy;
    wxPanel* m_splitterPage4736;
    wxTextCtrl* m_serialSpyDetails;
    wxCheckBox* m_clearSerialSpyOnConnect;
    wxCheckBox* m_clearSerialSpyBeforNextRun;
    wxPanel* m_debuggerView;
    wxPropertyGridManager* m_debuggerPropertyManagerGrid;
    wxPanel* m_positionMonitorView;
    wxBitmapToggleButton* m_btTogglePosSpy;
    wxBitmapButton* m_btCopyPosSpy;
    wxBitmapButton* m_btSearchPosSpy;
    wxBitmapButton* m_btClearPositionSpy;
    wxComboBox* m_cbContentPosSpy;
    wxStaticText* m_staticText4526;
    wxTextCtrl* m_positionSpyCount;
    wxListCtrl* m_positionSpy;
    wxPanel* m_speedPanel;
    wxBitmapButton* m_bmpButton47181;
    wxBitmapButton* m_bmpButton4718;
    wxBitmapButton* m_bmpButton47182;
    wxBitmapButton* m_bmpButton47183;
    wxMenuBar* m_menuBar;
    wxMenu* m_menuFile;
    wxMenuItem* m_miNewTemplate;
    wxMenuItem* m_miOpenTemplate;
    wxMenuItem* m_miReloadTemplate;
    wxMenuItem* m_miSaveTemplate;
    wxMenuItem* m_miSaveTemplateAs;
    wxMenuItem* m_miSaveEmuOutput;
    wxMenuItem* m_sep20;
    wxMenuItem* m_miExit;
    wxMenu* m_menuView;
    wxMenuItem* m_miToolbar;
    wxMenuItem* m_miViewStatusbar;
    wxMenuItem* m_miViewTemplateManager;
    wxMenuItem* m_miViewMainView;
    wxMenuItem* m_miViewMonitor;
    wxMenuItem* m_miViewZAxis;
    wxMenuItem* m_miViewPosMonitor;
    wxMenuItem* m_miViewDebugger;
    wxMenuItem* m_miViewSpy;
    wxMenuItem* m_miViewLogger;
    wxMenuItem* m_miViewSpeed;
    wxMenuItem* m_miViewUnitCalculator;
    wxMenuItem* m_menuItem1665;
    wxMenuItem* m_miViewAll;
    wxMenuItem* m_miHideAll;
    wxMenu* m_menuPerspective;
    wxMenuItem* m_miPerspectiveRun;
    wxMenuItem* m_miPerspectiveDebug;
    wxMenuItem* m_miPerspectiveSource;
    wxMenuItem* m_menuItem2771;
    wxMenuItem* m_menuSavePerspectiveRun;
    wxMenuItem* m_menuSavePerspectiveDebug;
    wxMenuItem* m_menuSavePerspectiveSource;
    wxMenuItem* m_menuItem27711;
    wxMenuItem* m_menuAddUserPerspective;
    wxMenuItem* m_menuRenameUserPerspective;
    wxMenuItem* m_menuRemoveUserPerspective;
    wxMenu* m_menuMonitoring;
    wxMenuItem* m_menuItemUpdCoors;
    wxMenuItem* m_menuItemUpdDraw;
    wxMenuItem* m_menuItemAllowEvents;
    wxMenuItem* m_menuItemDisplayUserAgent;
    wxMenuItem* m_menuItemToolControls;
    wxMenuItem* m_menuSeparator726;
    wxMenuItem* m_menuItemDebugSerial;
    wxMenuItem* m_menuItemFreezeLogger;
    wxMenuItem* m_menuSeparator1725;
    wxMenuItem* m_menuItemMinMonitoring;
    wxMenuItem* m_menuItemNormalMonitoring;
    wxMenu* m_menuRequestor;
    wxMenuItem* m_miRqtIdleMessages;
    wxMenuItem* m_menuItem2530;
    wxMenuItem* m_miRqtVersion;
    wxMenuItem* m_miRqtHeartbeat;
    wxMenuItem* m_miRqtConfig;
    wxMenuItem* m_miRqtPins;
    wxMenuItem* m_menuErrorCount;
    wxMenuItem* m_miRqtErrorInfo;
    wxMenuItem* m_menuItem46971;
    wxMenuItem* m_menuItemInfoMessage;
    wxMenuItem* m_menuItemWarningMessage;
    wxMenuItem* m_menuItemErrorMessage;
    wxMenuItem* m_menuItem1187;
    wxMenuItem* m_miMotorEnableState;
    wxMenuItem* m_menuItem881;
    wxMenuItem* m_miRqtCurPos;
    wxMenuItem* m_miRqtLimit;
    wxMenuItem* m_menuItem1183;
    wxMenuItem* m_miRqtReset;
    wxMenuItem* m_miRqtResetErrorInfo;
    wxMenu* m_menuTools;
    wxMenuItem* m_miPathGenerator;
    wxMenuItem* m_miIniFile;
    wxMenuItem* m_miExternalEditor;
    wxMenuItem* m_miCalculator;
    wxMenuItem* m_miPyCam;
    wxMenu* m_menuTest;
    wxMenuItem* m_miUnitTestFramework;
    wxMenuItem* m_menuItem3361;
    wxMenuItem* m_miLoopRepeatTest;
    wxMenuItem* m_menuItem4684;
    wxMenuItem* m_miTest1;
    wxMenuItem* m_miTest2;
    wxMenuItem* m_miTest3;
    wxMenuItem* m_miTest4;
    wxMenu* m_menuAbout;
    wxMenuItem* m_menuItem309;
    wxTimer* m_startupTimer;
    wxTimer* m_serialTimer;
    wxTimer* m_traceTimer;

protected:
    virtual void activateMainWindow(wxActivateEvent& event) { event.Skip(); }
    virtual void moveStartMainWindow(wxMoveEvent& event) { event.Skip(); }
    virtual void xxxxxxxxxxxxx(wxMouseEvent& event) { event.Skip(); }
    virtual void closeAuiPane(wxAuiManagerEvent& event) { event.Skip(); }
    virtual void maximizeAuiPane(wxAuiManagerEvent& event) { event.Skip(); }
    virtual void restoreAuiPane(wxAuiManagerEvent& event) { event.Skip(); }
    virtual void renderAuiPane(wxAuiManagerEvent& event) { event.Skip(); }
    virtual void buttonAuiPane(wxAuiManagerEvent& event) { event.Skip(); }
    virtual void activateAuiPane(wxAuiManagerEvent& event) { event.Skip(); }
    virtual void toggleTemplateManager(wxCommandEvent& event) { event.Skip(); }
    virtual void searchAvailiablePorts(wxCommandEvent& event) { event.Skip(); }
    virtual void selectPort(wxCommandEvent& event) { event.Skip(); }
    virtual void connect(wxCommandEvent& event) { event.Skip(); }
    virtual void onSelectReferences(wxCommandEvent& event) { event.Skip(); }
    virtual void onSelectManuallyMove(wxCommandEvent& event) { event.Skip(); }
    virtual void onSelectSetup(wxCommandEvent& event) { event.Skip(); }
    virtual void onSelectTemplate(wxCommandEvent& event) { event.Skip(); }
    virtual void onSelectTestPage(wxCommandEvent& event) { event.Skip(); }
    virtual void onSelectInboundPreview(wxCommandEvent& event) { event.Skip(); }
    virtual void onSelectCncMonitor(wxCommandEvent& event) { event.Skip(); }
    virtual void onSelectTemplatePreview(wxCommandEvent& event) { event.Skip(); }
    virtual void cfgStepDelayDropDown(wxAuiToolBarEvent& event) { event.Skip(); }
    virtual void cfgStepDelayMin(wxCommandEvent& event) { event.Skip(); }
    virtual void cfgStepDelayMax(wxCommandEvent& event) { event.Skip(); }
    virtual void cfgStepDelayArduino(wxCommandEvent& event) { event.Skip(); }
    virtual void stepDelayChanged(wxScrollEvent& event) { event.Skip(); }
    virtual void stepDelayThumbtrack(wxScrollEvent& event) { event.Skip(); }
    virtual void rcReset(wxCommandEvent& event) { event.Skip(); }
    virtual void rcDebugConfig(wxCommandEvent& event) { event.Skip(); }
    virtual void rcDebug(wxCommandEvent& event) { event.Skip(); }
    virtual void rcNextBreakpoint(wxCommandEvent& event) { event.Skip(); }
    virtual void rcNextStep(wxCommandEvent& event) { event.Skip(); }
    virtual void rcFinish(wxCommandEvent& event) { event.Skip(); }
    virtual void rcRun(wxCommandEvent& event) { event.Skip(); }
    virtual void rcPause(wxCommandEvent& event) { event.Skip(); }
    virtual void rcStop(wxCommandEvent& event) { event.Skip(); }
    virtual void emergencyStop(wxCommandEvent& event) { event.Skip(); }
    virtual void mainViewSelectorSelected(wxCommandEvent& event) { event.Skip(); }
    virtual void openTemplateSourceExtern(wxCommandEvent& event) { event.Skip(); }
    virtual void openTemplateSvgExtern(wxCommandEvent& event) { event.Skip(); }
    virtual void saveTemplateFromButton(wxCommandEvent& event) { event.Skip(); }
    virtual void reloadTemplateFromButton(wxCommandEvent& event) { event.Skip(); }
    virtual void renameTemplateFromButton(wxCommandEvent& event) { event.Skip(); }
    virtual void removeTemplateFromButton(wxCommandEvent& event) { event.Skip(); }
    virtual void toggleTemplateWordWrapMode(wxCommandEvent& event) { event.Skip(); }
    virtual void openSVGPathGenerator(wxCommandEvent& event) { event.Skip(); }
    virtual void toogleSvgEditSearchFlag(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEditSearchTextChanged(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEditSelected(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEditFind(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEditFindPrev(wxCommandEvent& event) { event.Skip(); }
    virtual void fileContentKeyDown(wxKeyEvent& event) { event.Skip(); }
    virtual void fileContentLeftDown(wxMouseEvent& event) { event.Skip(); }
    virtual void fileContentLeftUp(wxMouseEvent& event) { event.Skip(); }
    virtual void fileContentRightDown(wxMouseEvent& event) { event.Skip(); }
    virtual void marginClickFileContent(wxStyledTextEvent& event) { event.Skip(); }
    virtual void fileContentKeyUp(wxKeyEvent& event) { event.Skip(); }
    virtual void fileContentChange(wxStyledTextEvent& event) { event.Skip(); }
    virtual void fileContentDClick(wxMouseEvent& event) { event.Skip(); }
    virtual void selectUAInboundPathList(wxDataViewEvent& event) { event.Skip(); }
    virtual void selectUAUseDirectiveList(wxDataViewEvent& event) { event.Skip(); }
    virtual void selectUADetailInfo(wxDataViewEvent& event) { event.Skip(); }
    virtual void loadConfiguration(wxCommandEvent& event) { event.Skip(); }
    virtual void saveConfiguration(wxCommandEvent& event) { event.Skip(); }
    virtual void setupGridChanged(wxPropertyGridEvent& event) { event.Skip(); }
    virtual void setupGridChanging(wxPropertyGridEvent& event) { event.Skip(); }
    virtual void setupGridSelected(wxPropertyGridEvent& event) { event.Skip(); }
    virtual void setupGridCommandButton(wxCommandEvent& event) { event.Skip(); }
    virtual void cmKillFocus(wxFocusEvent& event) { event.Skip(); }
    virtual void cmLeave(wxMouseEvent& event) { event.Skip(); }
    virtual void cmLeftUp(wxMouseEvent& event) { event.Skip(); }
    virtual void cmXnegLeftDown(wxMouseEvent& event) { event.Skip(); }
    virtual void cmLeftDClick(wxMouseEvent& event) { event.Skip(); }
    virtual void cmXposLeftDown(wxMouseEvent& event) { event.Skip(); }
    virtual void cmYnegLeftDown(wxMouseEvent& event) { event.Skip(); }
    virtual void cmYposLeftDown(wxMouseEvent& event) { event.Skip(); }
    virtual void cmZnegLeftDown(wxMouseEvent& event) { event.Skip(); }
    virtual void cmZposLeftDown(wxMouseEvent& event) { event.Skip(); }
    virtual void mvSpinUpX(wxSpinEvent& event) { event.Skip(); }
    virtual void mvSpinDownX(wxSpinEvent& event) { event.Skip(); }
    virtual void mvSpinUpY(wxSpinEvent& event) { event.Skip(); }
    virtual void mvSpinDownY(wxSpinEvent& event) { event.Skip(); }
    virtual void keyDownXY(wxKeyEvent& event) { event.Skip(); }
    virtual void setFocusMoveXYAxis(wxFocusEvent& event) { event.Skip(); }
    virtual void killFocusMoveXYAxis(wxFocusEvent& event) { event.Skip(); }
    virtual void mvSpinUpZ(wxSpinEvent& event) { event.Skip(); }
    virtual void mvSpinDownZ(wxSpinEvent& event) { event.Skip(); }
    virtual void keyDownZ(wxKeyEvent& event) { event.Skip(); }
    virtual void setFocusMoveZAxis(wxFocusEvent& event) { event.Skip(); }
    virtual void killFocusMoveZAxis(wxFocusEvent& event) { event.Skip(); }
    virtual void updateInclWpt(wxCommandEvent& event) { event.Skip(); }
    virtual void setZero(wxCommandEvent& event) { event.Skip(); }
    virtual void moveHome(wxCommandEvent& event) { event.Skip(); }
    virtual void moveToZeroXY(wxCommandEvent& event) { event.Skip(); }
    virtual void moveToZeroXYZ(wxCommandEvent& event) { event.Skip(); }
    virtual void moveToZeroZ(wxCommandEvent& event) { event.Skip(); }
    virtual void moveXToMax(wxCommandEvent& event) { event.Skip(); }
    virtual void moveXToMid(wxCommandEvent& event) { event.Skip(); }
    virtual void moveXToMin(wxCommandEvent& event) { event.Skip(); }
    virtual void moveYToMax(wxCommandEvent& event) { event.Skip(); }
    virtual void moveYToMid(wxCommandEvent& event) { event.Skip(); }
    virtual void moveYToMin(wxCommandEvent& event) { event.Skip(); }
    virtual void moveZToMax(wxCommandEvent& event) { event.Skip(); }
    virtual void moveZToMid(wxCommandEvent& event) { event.Skip(); }
    virtual void moveZToMin(wxCommandEvent& event) { event.Skip(); }
    virtual void moveZToTop(wxCommandEvent& event) { event.Skip(); }
    virtual void moveZToBottom(wxCommandEvent& event) { event.Skip(); }
    virtual void changeManuallySpeedSlider(wxScrollEvent& event) { event.Skip(); }
    virtual void minManuallyXSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void updateMetricX(wxCommandEvent& event) { event.Skip(); }
    virtual void maxManuallyXSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void zeroManuallyXSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void signManuallyXSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void moveManuallySliderX(wxScrollEvent& event) { event.Skip(); }
    virtual void changeManuallySliderX(wxScrollEvent& event) { event.Skip(); }
    virtual void minManuallyYSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void updateMetricY(wxCommandEvent& event) { event.Skip(); }
    virtual void maxManuallyYSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void zeroManuallyYSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void signManuallyYSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void moveManuallySliderY(wxScrollEvent& event) { event.Skip(); }
    virtual void changeManuallySliderY(wxScrollEvent& event) { event.Skip(); }
    virtual void minManuallyZSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void updateMetricZ(wxCommandEvent& event) { event.Skip(); }
    virtual void maxManuallyZSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void zeroManuallyZSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void signManuallyZSlider(wxCommandEvent& event) { event.Skip(); }
    virtual void moveManuallySliderZ(wxScrollEvent& event) { event.Skip(); }
    virtual void changeManuallySliderZ(wxScrollEvent& event) { event.Skip(); }
    virtual void selectTestIntervalMode(wxCommandEvent& event) { event.Skip(); }
    virtual void testCountXSpinCtl(wxSpinEvent& event) { event.Skip(); }
    virtual void testCountXUpdated(wxCommandEvent& event) { event.Skip(); }
    virtual void testDimTakeOverX(wxCommandEvent& event) { event.Skip(); }
    virtual void testDimTakeOverY(wxCommandEvent& event) { event.Skip(); }
    virtual void testDimTakeOverZ(wxCommandEvent& event) { event.Skip(); }
    virtual void testDimTakeOverAll(wxCommandEvent& event) { event.Skip(); }
    virtual void testEndSwitchEvaluation(wxCommandEvent& event) { event.Skip(); }
    virtual void testSwitchToolOnOff(wxCommandEvent& event) { event.Skip(); }
    virtual void ctrlTestCaseSelected(wxCommandEvent& event) { event.Skip(); }
    virtual void monitorViewSelectorSelected(wxCommandEvent& event) { event.Skip(); }
    virtual void outboundBookChanged(wxNotebookEvent& event) { event.Skip(); }
    virtual void outboundBookChanging(wxNotebookEvent& event) { event.Skip(); }
    virtual void nootebookConfigChanged(wxListbookEvent& event) { event.Skip(); }
    virtual void cancelRun(wxCommandEvent& event) { event.Skip(); }
    virtual void confirmRun(wxCommandEvent& event) { event.Skip(); }
    virtual void clearSetterList(wxCommandEvent& event) { event.Skip(); }
    virtual void refreshSetterList(wxCommandEvent& event) { event.Skip(); }
    virtual void requestControllerConfigFromButton(wxCommandEvent& event) { event.Skip(); }
    virtual void requestControllerPinsFromButton(wxCommandEvent& event) { event.Skip(); }
    virtual void clearControllerMsgHistory(wxCommandEvent& event) { event.Skip(); }
    virtual void resetControllerErrorInfoFromButton(wxCommandEvent& event) { event.Skip(); }
    virtual void requestControllerErrorInfoFromButton(wxCommandEvent& event) { event.Skip(); }
    virtual void clearControllerErrorInfoFromButton(wxCommandEvent& event) { event.Skip(); }
    virtual void leftDownProbeModePanel(wxMouseEvent& event) { event.Skip(); }
    virtual void clickProbeMode(wxCommandEvent& event) { event.Skip(); }
    virtual void switchMonitoring(wxCommandEvent& event) { event.Skip(); }
    virtual void refreshMotionMonitor(wxCommandEvent& event) { event.Skip(); }
    virtual void clearMotionMonitor(wxCommandEvent& event) { event.Skip(); }
    virtual void updateCurveLibResolution(wxCommandEvent& event) { event.Skip(); }
    virtual void displayIntervalThumbtrack(wxScrollEvent& event) { event.Skip(); }
    virtual void displayIntervalChanged(wxScrollEvent& event) { event.Skip(); }
    virtual void displayIntervalKeyDown(wxKeyEvent& event) { event.Skip(); }
    virtual void toggleMonitorStatistics(wxCommandEvent& event) { event.Skip(); }
    virtual void clearMotionMonitorVecties(wxCommandEvent& event) { event.Skip(); }
    virtual void copyMotionMonitorVecties(wxCommandEvent& event) { event.Skip(); }
    virtual void traceMotionMonitorVecties(wxCommandEvent& event) { event.Skip(); }
    virtual void showFromTop3D(wxCommandEvent& event) { event.Skip(); }
    virtual void showFromBottom3D(wxCommandEvent& event) { event.Skip(); }
    virtual void showFromFront3D(wxCommandEvent& event) { event.Skip(); }
    virtual void showFromRear3D(wxCommandEvent& event) { event.Skip(); }
    virtual void showFromLeft3D(wxCommandEvent& event) { event.Skip(); }
    virtual void showFromRight3D(wxCommandEvent& event) { event.Skip(); }
    virtual void show3D(wxCommandEvent& event) { event.Skip(); }
    virtual void openMotionMonitorOptionDlg(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEmuOpenFileAsSource(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEmuOpenFileAsSvg(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEmuReload(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEmuClear(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEmuToogleOriginalPath(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEmuZoomHome(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEmuZoomMinus(wxCommandEvent& event) { event.Skip(); }
    virtual void svgEmuZoomPlus(wxCommandEvent& event) { event.Skip(); }
    #if wxUSE_WEBVIEW
    #endif // wxUSE_WEBVIEW
    virtual void toggleEmuWordWrapMode(wxCommandEvent& event) { event.Skip(); }
    virtual void emuContentRightDown(wxMouseEvent& event) { event.Skip(); }
    virtual void marginClickEmuSource(wxStyledTextEvent& event) { event.Skip(); }
    virtual void emuContentDClick(wxMouseEvent& event) { event.Skip(); }
    virtual void lruListItemSelected(wxListEvent& event) { event.Skip(); }
    virtual void lruListItemActivated(wxListEvent& event) { event.Skip(); }
    virtual void lruListItemLeave(wxMouseEvent& event) { event.Skip(); }
    virtual void keyDownLruList(wxKeyEvent& event) { event.Skip(); }
    virtual void clearLogger(wxCommandEvent& event) { event.Skip(); }
    virtual void copyLogger(wxCommandEvent& event) { event.Skip(); }
    virtual void UpdateLogger(wxCommandEvent& event) { event.Skip(); }
    virtual void keyDownLogger(wxKeyEvent& event) { event.Skip(); }
    virtual void dclickLogger(wxMouseEvent& event) { event.Skip(); }
    virtual void traceTextUpdated(wxCommandEvent& event) { event.Skip(); }
    virtual void dclickDurationCount(wxMouseEvent& event) { event.Skip(); }
    virtual void selectUnit(wxCommandEvent& event) { event.Skip(); }
    virtual void requestCurrentLimitStateIcon(wxMouseEvent& event) { event.Skip(); }
    virtual void dclickUpdateManagerThreadSymbol(wxMouseEvent& event) { event.Skip(); }
    virtual void selectUCUnitFrom(wxCommandEvent& event) { event.Skip(); }
    virtual void selectUCUnitTo(wxCommandEvent& event) { event.Skip(); }
    virtual void selectUCChangeFrom(wxCommandEvent& event) { event.Skip(); }
    virtual void closeUnitCalculator(wxCommandEvent& event) { event.Skip(); }
    virtual void enableSerialSpy(wxCommandEvent& event) { event.Skip(); }
    virtual void markSerialSpy(wxCommandEvent& event) { event.Skip(); }
    virtual void clearSerialSpy(wxCommandEvent& event) { event.Skip(); }
    virtual void selectSerialSpyMode(wxCommandEvent& event) { event.Skip(); }
    virtual void togglePositionSpy(wxCommandEvent& event) { event.Skip(); }
    virtual void copyPositionSpy(wxCommandEvent& event) { event.Skip(); }
    virtual void searchPosSpy(wxCommandEvent& event) { event.Skip(); }
    virtual void clearPositionSpy(wxCommandEvent& event) { event.Skip(); }
    virtual void selectPositionSpyContent(wxCommandEvent& event) { event.Skip(); }
    virtual void onPaintSpeedPanel(wxPaintEvent& event) { event.Skip(); }
    virtual void goPosSypFirstId(wxCommandEvent& event) { event.Skip(); }
    virtual void goPosSypLastId(wxCommandEvent& event) { event.Skip(); }
    virtual void goPosSypPrevId(wxCommandEvent& event) { event.Skip(); }
    virtual void goPosSypNextId(wxCommandEvent& event) { event.Skip(); }
    virtual void menuBarLButtonDown(wxMouseEvent& event) { event.Skip(); }
    virtual void newTemplate(wxCommandEvent& event) { event.Skip(); }
    virtual void openTemplate(wxCommandEvent& event) { event.Skip(); }
    virtual void reloadTemplate(wxCommandEvent& event) { event.Skip(); }
    virtual void saveTemplate(wxCommandEvent& event) { event.Skip(); }
    virtual void saveTemplateAs(wxCommandEvent& event) { event.Skip(); }
    virtual void saveEmuOutput(wxCommandEvent& event) { event.Skip(); }
    virtual void OnExit(wxCommandEvent& event) { event.Skip(); }
    virtual void viewToolbar(wxCommandEvent& event) { event.Skip(); }
    virtual void viewStatusbar(wxCommandEvent& event) { event.Skip(); }
    virtual void viewTemplateManager(wxCommandEvent& event) { event.Skip(); }
    virtual void viewMainView(wxCommandEvent& event) { event.Skip(); }
    virtual void viewMonitor(wxCommandEvent& event) { event.Skip(); }
    virtual void viewZAxis(wxCommandEvent& event) { event.Skip(); }
    virtual void viewPosistionMonitor(wxCommandEvent& event) { event.Skip(); }
    virtual void viewDebugger(wxCommandEvent& event) { event.Skip(); }
    virtual void viewSpy(wxCommandEvent& event) { event.Skip(); }
    virtual void viewLogger(wxCommandEvent& event) { event.Skip(); }
    virtual void viewSpeed(wxCommandEvent& event) { event.Skip(); }
    virtual void viewUnitCalculator(wxCommandEvent& event) { event.Skip(); }
    virtual void viewAllAuiPanes(wxCommandEvent& event) { event.Skip(); }
    virtual void hideAllAuiPanes(wxCommandEvent& event) { event.Skip(); }
    virtual void loadPerspective(wxCommandEvent& event) { event.Skip(); }
    virtual void savePerspective(wxCommandEvent& event) { event.Skip(); }
    virtual void addUserPerspective(wxCommandEvent& event) { event.Skip(); }
    virtual void renameUserPerspective(wxCommandEvent& event) { event.Skip(); }
    virtual void removeUserPerspective(wxCommandEvent& event) { event.Skip(); }
    virtual void defineUpdateCoordinates(wxCommandEvent& event) { event.Skip(); }
    virtual void defineOnlineDrawing(wxCommandEvent& event) { event.Skip(); }
    virtual void defineAllowEvents(wxCommandEvent& event) { event.Skip(); }
    virtual void displayUserAgent(wxCommandEvent& event) { event.Skip(); }
    virtual void updateToolControls(wxCommandEvent& event) { event.Skip(); }
    virtual void defineDebugSerial(wxCommandEvent& event) { event.Skip(); }
    virtual void defineMinMonitoring(wxCommandEvent& event) { event.Skip(); }
    virtual void defineNormalMonitoring(wxCommandEvent& event) { event.Skip(); }
    virtual void requestVersion(wxCommandEvent& event) { event.Skip(); }
    virtual void requestHeartbeat(wxCommandEvent& event) { event.Skip(); }
    virtual void requestConfig(wxCommandEvent& event) { event.Skip(); }
    virtual void requestPins(wxCommandEvent& event) { event.Skip(); }
    virtual void requestErrorCount(wxCommandEvent& event) { event.Skip(); }
    virtual void requestErrorInfo(wxCommandEvent& event) { event.Skip(); }
    virtual void requestInfoMessage(wxCommandEvent& event) { event.Skip(); }
    virtual void requestWarningMessage(wxCommandEvent& event) { event.Skip(); }
    virtual void requestErrorMessage(wxCommandEvent& event) { event.Skip(); }
    virtual void requestEnableStepperMotors(wxCommandEvent& event) { event.Skip(); }
    virtual void requestCurrentPos(wxCommandEvent& event) { event.Skip(); }
    virtual void requestCurrentLimitState(wxCommandEvent& event) { event.Skip(); }
    virtual void requestReset(wxCommandEvent& event) { event.Skip(); }
    virtual void requestResetErrorInfo(wxCommandEvent& event) { event.Skip(); }
    virtual void openConfigurationFile(wxCommandEvent& event) { event.Skip(); }
    virtual void openExternalEditor(wxCommandEvent& event) { event.Skip(); }
    virtual void openCalculator(wxCommandEvent& event) { event.Skip(); }
    virtual void openPyCam(wxCommandEvent& event) { event.Skip(); }
    virtual void unitTestFramework(wxCommandEvent& event) { event.Skip(); }
    virtual void loopRepeatTest(wxCommandEvent& event) { event.Skip(); }
    virtual void testFunction1(wxCommandEvent& event) { event.Skip(); }
    virtual void testFunction2(wxCommandEvent& event) { event.Skip(); }
    virtual void testFunction3(wxCommandEvent& event) { event.Skip(); }
    virtual void testFunction4(wxCommandEvent& event) { event.Skip(); }
    virtual void OnAbout(wxCommandEvent& event) { event.Skip(); }
    virtual void startupTimer(wxTimerEvent& event) { event.Skip(); }
    virtual void serialTimer(wxTimerEvent& event) { event.Skip(); }
    virtual void traceTimer(wxTimerEvent& event) { event.Skip(); }

public:
    wxBitmapButton* GetBmpButton4490() { return m_bmpButton4490; }
    wxStaticText* GetStaticText1842() { return m_staticText1842; }
    wxBitmapButton* GetSearchConnections() { return m_searchConnections; }
    wxBitmapComboBox* GetPortSelector() { return m_portSelector; }
    wxBitmapButton* GetConnect() { return m_connect; }
    wxBitmapButton* GetBtSelectReferences() { return m_btSelectReferences; }
    wxBitmapButton* GetBtSelectManuallyMove() { return m_btSelectManuallyMove; }
    wxBitmapButton* GetBtSelectSetup() { return m_btSelectSetup; }
    wxBitmapButton* GetBtSelectTemplate() { return m_btSelectTemplate; }
    wxBitmapButton* GetBtSelectInboundTest() { return m_btSelectInboundTest; }
    wxBitmapButton* GetBtSelectInboundPreview() { return m_btSelectInboundPreview; }
    wxBitmapButton* GetBtSelectCncPreview() { return m_btSelectCncPreview; }
    wxBitmapButton* GetBtSelectTemplatePreview() { return m_btSelectTemplatePreview; }
    wxStaticText* GetStaticText1748() { return m_staticText1748; }
    wxSlider* GetStepDelay() { return m_stepDelay; }
    wxStaticText* GetStepDelayValue() { return m_stepDelayValue; }
    wxBitmapButton* GetRcReset() { return m_rcReset; }
    wxBitmapButton* GetRcDebugConfig() { return m_rcDebugConfig; }
    wxBitmapButton* GetRcDebug() { return m_rcDebug; }
    wxBitmapButton* GetRcNextBreakpoint() { return m_rcNextBreakpoint; }
    wxBitmapButton* GetRcNextStep() { return m_rcNextStep; }
    wxBitmapButton* GetRcFinish() { return m_rcFinish; }
    wxBitmapButton* GetRcRun() { return m_rcRun; }
    wxBitmapButton* GetRcPause() { return m_rcPause; }
    wxBitmapButton* GetRcStop() { return m_rcStop; }
    wxButton* GetBtnEmergenyStop() { return m_btnEmergenyStop; }

    virtual void ShowAuiToolMenu(wxAuiToolBarEvent& event);
    wxAuiToolBar* GetAuibarMain() { return m_auibarMain; }
    wxChoice* GetMainViewSelector() { return m_mainViewSelector; }
    wxButton* GetOpenSourceExtern() { return m_openSourceExtern; }
    wxButton* GetOpenSvgExtern() { return m_openSvgExtern; }
    wxStaticLine* GetStaticLine44728() { return m_staticLine44728; }
    wxButton* GetSaveTemplate() { return m_saveTemplate; }
    wxButton* GetReloadTemplate() { return m_reloadTemplate; }
    wxButton* GetRenameTemplate() { return m_renameTemplate; }
    wxButton* GetRemoveTemplate() { return m_removeTemplate; }
    wxStaticLine* GetStaticLine4472() { return m_staticLine4472; }
    wxBitmapToggleButton* GetBtSvgToggleWordWrap() { return m_btSvgToggleWordWrap; }
    wxStaticLine* GetStaticLine4474() { return m_staticLine4474; }
    wxButton* GetBtPathGenerator() { return m_btPathGenerator; }
    wxBitmapToggleButton* GetTbCaseSensitive() { return m_tbCaseSensitive; }
    wxBitmapToggleButton* GetTbWholeWord() { return m_tbWholeWord; }
    wxBitmapToggleButton* GetTbRegEx() { return m_tbRegEx; }
    wxBitmapToggleButton* GetTbHighLight() { return m_tbHighLight; }
    wxStaticBitmap* GetSvgEditSearchState() { return m_svgEditSearchState; }
    wxComboBox* GetSvgEditSearch() { return m_svgEditSearch; }
    wxButton* GetSvgEditFind() { return m_svgEditFind; }
    wxButton* GetSvgEditFindPrev() { return m_svgEditFindPrev; }
    wxStyledTextCtrl* GetStcFileContent() { return m_stcFileContent; }
    wxStaticText* GetFilePosition() { return m_filePosition; }
    wxTextCtrl* GetSvgEditStatus() { return m_svgEditStatus; }
    wxStaticText* GetEditMode() { return m_editMode; }
    wxPanel* GetPanelTplEdit() { return m_panelTplEdit; }
    wxStaticText* GetStaticText1498() { return m_staticText1498; }
    wxDataViewListCtrl* GetDvListCtrlSvgUAInboundPathList() { return m_dvListCtrlSvgUAInboundPathList; }
    wxStaticText* GetStaticText14983() { return m_staticText14983; }
    wxDataViewListCtrl* GetDvListCtrlSvgUAUseDirective() { return m_dvListCtrlSvgUAUseDirective; }
    wxStaticText* GetStaticText1500() { return m_staticText1500; }
    wxDataViewListCtrl* GetDvListCtrlSvgUADetailInfo() { return m_dvListCtrlSvgUADetailInfo; }
    wxTextCtrl* GetSelectedUAInfo() { return m_selectedUAInfo; }
    wxPanel* GetPanelTplUserAgent() { return m_panelTplUserAgent; }
    wxNotebook* GetTemplateNotebook() { return m_templateNotebook; }
    wxPanel* GetMainBookSourcePanel() { return m_mainBookSourcePanel; }
    wxStaticText* GetStaticText5137() { return m_staticText5137; }
    wxButton* GetLoadConfiguration() { return m_loadConfiguration; }
    wxButton* GetSaveConfiguration() { return m_saveConfiguration; }
    wxPropertyGridManager* GetPgMgrSetup() { return m_pgMgrSetup; }
    wxPanel* GetSetupConfigPage() { return m_setupConfigPage; }
    wxPanel* GetToolMagazinePlaceholder() { return m_toolMagazinePlaceholder; }
    wxPanel* GetSetupToolMagazine() { return m_setupToolMagazine; }
    wxStaticText* GetStaticText4575() { return m_staticText4575; }
    wxPanel* GetSetupSpeedWizard() { return m_setupSpeedWizard; }
    wxNotebook* GetNotebook4561() { return m_notebook4561; }
    wxPanel* GetMainBookSetup() { return m_mainBookSetup; }
    wxStaticText* GetStaticText779() { return m_staticText779; }
    wxStaticLine* GetStaticLine783() { return m_staticLine783; }
    wxStaticText* GetCbStepSensitivityText() { return m_cbStepSensitivityText; }
    wxComboBox* GetCbStepSensitivity() { return m_cbStepSensitivity; }
    wxButton* GetCmXneg() { return m_cmXneg; }
    wxButton* GetCmXpos() { return m_cmXpos; }
    wxButton* GetCmYneg() { return m_cmYneg; }
    wxButton* GetCmYpos() { return m_cmYpos; }
    wxButton* GetCmZneg() { return m_cmZneg; }
    wxButton* GetCmZpos() { return m_cmZpos; }
    wxPanel* GetPanel5187() { return m_panel5187; }
    wxStaticText* GetStaticText821() { return m_staticText821; }
    wxSpinButton* GetSpinButtonX() { return m_spinButtonX; }
    wxStaticText* GetStaticText63169() { return m_staticText63169; }
    wxSpinButton* GetSpinButtonY() { return m_spinButtonY; }
    wxTextCtrl* GetMoveXYAxisCtl() { return m_moveXYAxisCtl; }
    wxStaticText* GetStaticText823() { return m_staticText823; }
    wxStaticText* GetStaticText6316() { return m_staticText6316; }
    wxStaticText* GetStaticText825() { return m_staticText825; }
    wxStaticText* GetStaticText827() { return m_staticText827; }
    wxStaticText* GetStaticText631() { return m_staticText631; }
    wxStaticText* GetStaticText832() { return m_staticText832; }
    wxStaticText* GetStaticText834() { return m_staticText834; }
    wxSpinButton* GetSpinButtonZ() { return m_spinButtonZ; }
    wxTextCtrl* GetMoveZAxisCtl() { return m_moveZAxisCtl; }
    wxStaticText* GetStaticText830() { return m_staticText830; }
    wxStaticText* GetStaticText836() { return m_staticText836; }
    wxPanel* GetPanel5185() { return m_panel5185; }
    wxNotebook* GetManualMotionControl() { return m_manualMotionControl; }
    wxCheckBox* GetIncludingWpt() { return m_includingWpt; }
    wxButton* GetSetZero() { return m_setZero; }
    wxStaticText* GetStaticText1156() { return m_staticText1156; }
    wxStaticLine* GetStaticLine1158() { return m_staticLine1158; }
    wxStaticText* GetStaticText1171() { return m_staticText1171; }
    wxStaticText* GetStaticText1173() { return m_staticText1173; }
    wxComboBox* GetHomeDefintion() { return m_homeDefintion; }
    wxButton* GetMoveHome() { return m_moveHome; }
    wxStaticLine* GetStaticLine2177() { return m_staticLine2177; }
    wxStaticLine* GetStaticLine2179() { return m_staticLine2179; }
    wxStaticText* GetStaticText2182() { return m_staticText2182; }
    wxComboBox* GetZeroMoveModeXY() { return m_zeroMoveModeXY; }
    wxButton* GetMoveXYtoZero() { return m_moveXYtoZero; }
    wxStaticText* GetStaticText218228() { return m_staticText218228; }
    wxComboBox* GetZeroMoveModeXYZ() { return m_zeroMoveModeXYZ; }
    wxButton* GetMoveXYZtoZero() { return m_moveXYZtoZero; }
    wxStaticText* GetStaticText21822831() { return m_staticText21822831; }
    wxComboBox* GetZeroMoveModeZ() { return m_zeroMoveModeZ; }
    wxButton* GetMoveZtoZero() { return m_moveZtoZero; }
    wxStaticLine* GetStaticLine2191() { return m_staticLine2191; }
    wxStaticLine* GetStaticLine2193() { return m_staticLine2193; }
    wxStaticText* GetStaticText1177233() { return m_staticText1177233; }
    wxStaticText* GetStaticText11772() { return m_staticText11772; }
    wxButton* GetXToMax() { return m_xToMax; }
    wxButton* GetXToMid() { return m_xToMid; }
    wxButton* GetXToMin() { return m_xToMin; }
    wxButton* GetYToMax() { return m_yToMax; }
    wxButton* GetYToMid() { return m_yToMid; }
    wxButton* GetYToMin() { return m_yToMin; }
    wxStaticLine* GetStaticLine2195() { return m_staticLine2195; }
    wxStaticLine* GetStaticLine2197() { return m_staticLine2197; }
    wxStaticText* GetStaticText1175() { return m_staticText1175; }
    wxStaticText* GetStaticText1177() { return m_staticText1177; }
    wxButton* GetZToMax() { return m_zToMax; }
    wxButton* GetZToMid() { return m_zToMid; }
    wxButton* GetZToMin() { return m_zToMin; }
    wxButton* GetZToTop() { return m_zToTop; }
    wxStaticText* GetStaticText2438() { return m_staticText2438; }
    wxButton* GetZToBottom() { return m_zToBottom; }
    wxPanel* GetMainBookReference() { return m_mainBookReference; }
    wxStaticText* GetStaticText1160() { return m_staticText1160; }
    wxStaticLine* GetStaticLine1162() { return m_staticLine1162; }
    wxRadioBox* GetMmRadioCoordinates() { return m_mmRadioCoordinates; }
    wxStaticText* GetStaticText5101() { return m_staticText5101; }
    wxComboBox* GetManuallyToolId() { return m_manuallyToolId; }
    wxStaticText* GetStaticText5105() { return m_staticText5105; }
    wxSlider* GetManuallySpeedSlider() { return m_manuallySpeedSlider; }
    wxTextCtrl* GetManuallySpeedValue() { return m_manuallySpeedValue; }
    wxStaticText* GetStaticText5113() { return m_staticText5113; }
    wxStaticLine* GetStaticLine5109() { return m_staticLine5109; }
    wxStaticText* GetStaticText793() { return m_staticText793; }
    wxButton* GetMinManuallyXSlider() { return m_minManuallyXSlider; }
    wxTextCtrl* GetMetricX() { return m_metricX; }
    wxButton* GetMaxManuallyXSlider() { return m_maxManuallyXSlider; }
    wxButton* GetZeroManuallyXSlider() { return m_zeroManuallyXSlider; }
    wxButton* GetSignManuallyXSlider() { return m_signManuallyXSlider; }
    wxStaticText* GetMmUnitX() { return m_mmUnitX; }
    wxSlider* GetXManuallySlider() { return m_xManuallySlider; }
    wxStaticLine* GetStaticLine5129() { return m_staticLine5129; }
    wxStaticText* GetStaticText797() { return m_staticText797; }
    wxButton* GetMinManuallyYSlider() { return m_minManuallyYSlider; }
    wxTextCtrl* GetMetricY() { return m_metricY; }
    wxButton* GetMaxManuallyYSlider() { return m_maxManuallyYSlider; }
    wxButton* GetZeroManuallyYSlider() { return m_zeroManuallyYSlider; }
    wxButton* GetSignManuallyYSlider() { return m_signManuallyYSlider; }
    wxStaticText* GetMmUnitY() { return m_mmUnitY; }
    wxSlider* GetYManuallySlider() { return m_yManuallySlider; }
    wxStaticLine* GetStaticLine5133() { return m_staticLine5133; }
    wxStaticText* GetStaticText7973() { return m_staticText7973; }
    wxButton* GetMinManuallyZSlider() { return m_minManuallyZSlider; }
    wxTextCtrl* GetMetricZ() { return m_metricZ; }
    wxButton* GetMaxManuallyZSlider() { return m_maxManuallyZSlider; }
    wxButton* GetZeroManuallyZSlider() { return m_zeroManuallyZSlider; }
    wxButton* GetSignManuallyZSlider() { return m_signManuallyZSlider; }
    wxStaticText* GetMmUnitZ() { return m_mmUnitZ; }
    wxSlider* GetZManuallySlider() { return m_zManuallySlider; }
    wxStaticLine* GetStaticLine5135() { return m_staticLine5135; }
    wxPanel* GetMainBookManual() { return m_mainBookManual; }
    wxStaticText* GetStaticText2117() { return m_staticText2117; }
    wxStaticLine* GetStaticLine2253() { return m_staticLine2253; }
    wxComboBox* GetTestIntervalMode() { return m_testIntervalMode; }
    wxStaticText* GetStaticText2105() { return m_staticText2105; }
    wxStaticText* GetStaticText2107() { return m_staticText2107; }
    wxStaticText* GetStaticText2109() { return m_staticText2109; }
    wxStaticText* GetStaticText2149() { return m_staticText2149; }
    wxStaticText* GetStaticText2115() { return m_staticText2115; }
    wxStaticText* GetStaticText2165() { return m_staticText2165; }
    wxStaticLine* GetStaticLine2111() { return m_staticLine2111; }
    wxStaticText* GetTestAxisX() { return m_testAxisX; }
    wxSpinCtrl* GetTestCountX() { return m_testCountX; }
    wxTextCtrl* GetTestDistanceX() { return m_testDistanceX; }
    wxStaticText* GetStaticText2101() { return m_staticText2101; }
    wxComboBox* GetTestFirstX() { return m_testFirstX; }
    wxStaticText* GetStaticText2151() { return m_staticText2151; }
    wxCheckBox* GetTestModeX() { return m_testModeX; }
    wxStaticText* GetTestDurationCounterX() { return m_testDurationCounterX; }
    wxStaticText* GetTestAxisY() { return m_testAxisY; }
    wxSpinCtrl* GetTestCountY() { return m_testCountY; }
    wxTextCtrl* GetTestDistanceY() { return m_testDistanceY; }
    wxStaticText* GetStaticText210115() { return m_staticText210115; }
    wxComboBox* GetTestFirstY() { return m_testFirstY; }
    wxStaticText* GetStaticText215123() { return m_staticText215123; }
    wxCheckBox* GetTestModeY() { return m_testModeY; }
    wxStaticText* GetTestDurationCounterY() { return m_testDurationCounterY; }
    wxStaticText* GetTestAxisZ() { return m_testAxisZ; }
    wxSpinCtrl* GetTestCountZ() { return m_testCountZ; }
    wxTextCtrl* GetTestDistanceZ() { return m_testDistanceZ; }
    wxStaticText* GetStaticText21011521() { return m_staticText21011521; }
    wxComboBox* GetTestFirstZ() { return m_testFirstZ; }
    wxStaticText* GetStaticText215124() { return m_staticText215124; }
    wxCheckBox* GetTestModeZ() { return m_testModeZ; }
    wxStaticText* GetTestDurationCounterZ() { return m_testDurationCounterZ; }
    wxPanel* GetTestIntervalPage() { return m_testIntervalPage; }
    wxStaticText* GetStaticText21174() { return m_staticText21174; }
    wxStaticLine* GetStaticLine22535() { return m_staticLine22535; }
    wxStaticText* GetStaticText2377() { return m_staticText2377; }
    wxStaticText* GetStaticText2418() { return m_staticText2418; }
    wxStaticText* GetStaticText2381() { return m_staticText2381; }
    wxStaticText* GetStaticText2379() { return m_staticText2379; }
    wxStaticText* GetStaticText2383() { return m_staticText2383; }
    wxStaticLine* GetStaticLine2385() { return m_staticLine2385; }
    wxStaticText* GetTestDimAxisX() { return m_testDimAxisX; }
    wxCheckBox* GetTestDimModeX() { return m_testDimModeX; }
    wxCheckBox* GetTestDimMinX() { return m_testDimMinX; }
    wxCheckBox* GetTestDimMaxX() { return m_testDimMaxX; }
    wxTextCtrl* GetTestDimResultX() { return m_testDimResultX; }
    wxStaticText* GetStaticText2431() { return m_staticText2431; }
    wxCheckBox* GetTestDimResultStateX() { return m_testDimResultStateX; }
    wxButton* GetTestDimTakeX() { return m_testDimTakeX; }
    wxStaticText* GetTestDimAxisY() { return m_testDimAxisY; }
    wxCheckBox* GetTestDimModeY() { return m_testDimModeY; }
    wxCheckBox* GetTestDimMinY() { return m_testDimMinY; }
    wxCheckBox* GetTestDimMaxY() { return m_testDimMaxY; }
    wxTextCtrl* GetTestDimResultY() { return m_testDimResultY; }
    wxStaticText* GetTestDimUnitX6() { return m_testDimUnitX6; }
    wxCheckBox* GetTestDimResultStateY() { return m_testDimResultStateY; }
    wxButton* GetTestDimTakeY() { return m_testDimTakeY; }
    wxStaticText* GetTestDimAxisZ() { return m_testDimAxisZ; }
    wxCheckBox* GetTestDimModeZ() { return m_testDimModeZ; }
    wxCheckBox* GetTestDimMinZ() { return m_testDimMinZ; }
    wxCheckBox* GetTestDimMaxZ() { return m_testDimMaxZ; }
    wxTextCtrl* GetTestDimResultZ() { return m_testDimResultZ; }
    wxStaticText* GetTestDimUnitX12() { return m_testDimUnitX12; }
    wxCheckBox* GetTestDimResultStateZ() { return m_testDimResultStateZ; }
    wxButton* GetTestDimTakeZ() { return m_testDimTakeZ; }
    wxStaticLine* GetStaticLine2429() { return m_staticLine2429; }
    wxButton* GetTestDimTakeAll() { return m_testDimTakeAll; }
    wxPanel* GetTestDimensions() { return m_testDimensions; }
    wxStaticText* GetStaticText21172() { return m_staticText21172; }
    wxStaticLine* GetStaticLine22533() { return m_staticLine22533; }
    wxToggleButton* GetTestToggleEndSwitch() { return m_testToggleEndSwitch; }
    wxPanel* GetTestLimitPage() { return m_testLimitPage; }
    wxStaticText* GetStaticText211726() { return m_staticText211726; }
    wxStaticLine* GetStaticLine225337() { return m_staticLine225337; }
    wxToggleButton* GetTestToggleTool() { return m_testToggleTool; }
    wxPanel* GetTestToolPage() { return m_testToolPage; }
    wxStaticText* GetStaticText21174365() { return m_staticText21174365; }
    wxTextCtrl* GetCtrlTestSelectedId() { return m_ctrlTestSelectedId; }
    wxStaticLine* GetStaticLine22535477() { return m_staticLine22535477; }
    wxStaticText* GetStaticText25139() { return m_staticText25139; }
    wxListBox* GetCtrlTestSelection() { return m_ctrlTestSelection; }
    wxScrolledWindow* GetScrollWin2571() { return m_scrollWin2571; }
    wxStaticText* GetStaticText251911() { return m_staticText251911; }
    wxTextCtrl* GetCtrlTestDescription() { return m_ctrlTestDescription; }
    wxStaticText* GetStaticText2486121314() { return m_staticText2486121314; }
    wxTextCtrl* GetCtrlTestParam1() { return m_ctrlTestParam1; }
    wxStaticText* GetStaticText24861216() { return m_staticText24861216; }
    wxTextCtrl* GetCtrlTestParam2() { return m_ctrlTestParam2; }
    wxStaticText* GetStaticText24861418() { return m_staticText24861418; }
    wxTextCtrl* GetCtrlTestParam3() { return m_ctrlTestParam3; }
    wxStaticText* GetStaticText24861520() { return m_staticText24861520; }
    wxTextCtrl* GetCtrlTestParam4() { return m_ctrlTestParam4; }
    wxStaticText* GetStaticText248622() { return m_staticText248622; }
    wxTextCtrl* GetCtrlTestParam5() { return m_ctrlTestParam5; }
    wxPanel* GetCtrlTestSuite() { return m_ctrlTestSuite; }
    wxListbook* GetTestCaseBook() { return m_testCaseBook; }
    wxPanel* GetMainBookTest() { return m_mainBookTest; }
    wxPanel* GetFilePreviewPlaceholder() { return m_filePreviewPlaceholder; }
    wxStaticText* GetStaticText4402() { return m_staticText4402; }
    wxPanel* GetPanel4398() { return m_panel4398; }
    wxTextCtrl* GetCurrentFileMangerPreviewFileName() { return m_currentFileMangerPreviewFileName; }
    wxPanel* GetMainBookPreviewPanel() { return m_mainBookPreviewPanel; }
    wxSimplebook* GetMainViewBook() { return m_mainViewBook; }
    wxPanel* GetScrollWinMain() { return m_scrollWinMain; }
    CncZView* GetZView() { return m_zView; }
    wxStaticText* GetInfoToolDiameter() { return m_infoToolDiameter; }
    wxPanel* GetPanelZView() { return m_panelZView; }
    wxChoice* GetMonitorViewSelector() { return m_monitorViewSelector; }
    wxStaticText* GetStaticText11481() { return m_staticText11481; }
    wxListCtrl* GetCncSummaryListCtrl() { return m_cncSummaryListCtrl; }
    wxButton* GetBtCancelRun() { return m_btCancelRun; }
    wxButton* GetBtConfirmRun() { return m_btConfirmRun; }
    wxPanel* GetCncSummary() { return m_cncSummary; }
    wxStaticText* GetStaticText1150() { return m_staticText1150; }
    wxTextCtrl* GetSetterListCount() { return m_setterListCount; }
    wxButton* GetBtClearSetterList() { return m_btClearSetterList; }
    wxButton* GetBtRefreshSetterList() { return m_btRefreshSetterList; }
    wxListCtrl* GetSetterList() { return m_setterList; }
    wxPanel* GetCncSetters() { return m_cncSetters; }
    wxStaticText* GetStaticText12831() { return m_staticText12831; }
    wxButton* GetBtRequestCtlConfig() { return m_btRequestCtlConfig; }
    wxDataViewListCtrl* GetDvListCtrlControllerConfig() { return m_dvListCtrlControllerConfig; }
    wxPanel* GetControllerConfiguration() { return m_controllerConfiguration; }
    wxStaticText* GetStaticText128313() { return m_staticText128313; }
    wxButton* GetBtRequestControllerPins() { return m_btRequestControllerPins; }
    wxDataViewListCtrl* GetDvListCtrlControllerPins() { return m_dvListCtrlControllerPins; }
    wxPanel* GetControllerPinReport() { return m_controllerPinReport; }
    wxStaticText* GetStaticText1283132() { return m_staticText1283132; }
    wxButton* GetBtClearMsgHistory() { return m_btClearMsgHistory; }
    wxTextCtrl* GetControllerMsgHistory() { return m_controllerMsgHistory; }
    wxPanel* GetConrollerMessages() { return m_conrollerMessages; }
    wxStaticText* GetStaticText128314() { return m_staticText128314; }
    wxButton* GetBtResetCtlErrorInfo() { return m_btResetCtlErrorInfo; }
    wxButton* GetBtRequestCtlErrorInfo() { return m_btRequestCtlErrorInfo; }
    wxButton* GetBtClearCtlErrorInfoList() { return m_btClearCtlErrorInfoList; }
    wxDataViewListCtrl* GetDvListCtrlControllerErrorInfo() { return m_dvListCtrlControllerErrorInfo; }
    wxStaticText* GetStaticText5159() { return m_staticText5159; }
    wxTextCtrl* GetLastErrorInfoResponseId() { return m_lastErrorInfoResponseId; }
    wxPanel* GetPanel5162() { return m_panel5162; }
    wxPanel* GetControllerErrorInfo() { return m_controllerErrorInfo; }
    wxListbook* GetNotebookConfig() { return m_notebookConfig; }
    wxPanel* GetCncParameters() { return m_cncParameters; }
    wxBitmapToggleButton* GetBtProbeMode() { return m_btProbeMode; }
    wxStaticText* GetProbeModeLabel() { return m_probeModeLabel; }
    wxPanel* GetProbeModePanel() { return m_probeModePanel; }
    wxStaticLine* GetStaticLine5016() { return m_staticLine5016; }
    wxBitmapToggleButton* GetSwitchMonitoing() { return m_switchMonitoing; }
    wxStaticLine* GetStaticLine3525() { return m_staticLine3525; }
    wxButton* Get3D_Refreh() { return m_3D_Refreh; }
    wxButton* Get3D_Clear() { return m_3D_Clear; }
    wxStaticLine* GetStaticLine47803() { return m_staticLine47803; }
    wxStaticText* GetStaticText16032() { return m_staticText16032; }
    wxComboBox* GetCbCurveLibResolution() { return m_cbCurveLibResolution; }
    wxStaticLine* GetStaticLine4780() { return m_staticLine4780; }
    wxStaticText* GetStaticText32334() { return m_staticText32334; }
    wxSlider* GetDisplayInterval() { return m_displayInterval; }
    wxPanel* GetRotatePaneZ3D() { return m_rotatePaneZ3D; }
    wxStaticText* GetStaticText487556() { return m_staticText487556; }
    wxPanel* GetRotatePaneY3D() { return m_rotatePaneY3D; }
    wxStaticText* GetStaticText48755() { return m_staticText48755; }
    wxPanel* GetRotatePaneX3D() { return m_rotatePaneX3D; }
    wxStaticText* GetStaticText4875() { return m_staticText4875; }
    wxPanel* GetDrawPane3D() { return m_drawPane3D; }
    wxPanel* GetScalePane3D() { return m_scalePane3D; }
    wxPanel* Get3DOutboundControl() { return m_3DOutboundControl; }
    wxButton* GetBtShowHideStatistics() { return m_btShowHideStatistics; }
    wxButton* GetBt2ShowHideStatistics() { return m_bt2ShowHideStatistics; }
    wxStaticLine* GetStaticLine50051() { return m_staticLine50051; }
    wxStaticText* GetStaticText5014() { return m_staticText5014; }
    wxStaticBitmap* GetLableWorkpieceThickness() { return m_lableWorkpieceThickness; }
    wxStaticBitmap* GetToolStateTrafficLight() { return m_toolStateTrafficLight; }
    wxTextCtrl* GetToolId() { return m_toolId; }
    wxStaticLine* GetStaticLine5005() { return m_staticLine5005; }
    wxStaticLine* GetStaticLine5008() { return m_staticLine5008; }
    wxStaticText* GetStaticText1128() { return m_staticText1128; }
    wxTextCtrl* GetCrossings() { return m_crossings; }
    wxStaticText* GetStaticText1966() { return m_staticText1966; }
    wxTextCtrl* GetPassingCount() { return m_passingCount; }
    wxListCtrl* GetStatisticSummaryListCtrl() { return m_statisticSummaryListCtrl; }
    wxCheckBox* GetCheckBoxStatisticUpdate() { return m_checkBoxStatisticUpdate; }
    wxPanel* GetStatisticPageSum() { return m_statisticPageSum; }
    wxButton* Get3D_Trace3() { return m_3D_Trace3; }
    wxButton* Get3D_Trace4() { return m_3D_Trace4; }
    wxButton* Get3D_Trace() { return m_3D_Trace; }
    wxListCtrl* GetVectiesListCtrl() { return m_vectiesListCtrl; }
    wxPanel* GetStatisticPageVecties() { return m_statisticPageVecties; }
    wxPanel* GetPanel5165() { return m_panel5165; }
    wxNotebook* GetStatisticBook() { return m_statisticBook; }
    wxPanel* Get3DOutboundStatistics() { return m_3DOutboundStatistics; }
    wxButton* Get3D_Top() { return m_3D_Top; }
    wxButton* Get3D_Bottom() { return m_3D_Bottom; }
    wxButton* Get3D_Front() { return m_3D_Front; }
    wxButton* Get3D_Rear() { return m_3D_Rear; }
    wxButton* Get3D_Left() { return m_3D_Left; }
    wxButton* Get3D_Right() { return m_3D_Right; }
    wxStaticLine* GetStaticLine3483() { return m_staticLine3483; }
    wxButton* Get3D_Perspective1() { return m_3D_Perspective1; }
    wxButton* Get3D_Perspective2() { return m_3D_Perspective2; }
    wxButton* Get3D_Perspective3() { return m_3D_Perspective3; }
    wxButton* Get3D_Perspective4() { return m_3D_Perspective4; }
    wxStaticLine* GetStaticLine2341() { return m_staticLine2341; }
    wxButton* GetMotionMonitorOptionDlg() { return m_motionMonitorOptionDlg; }
    wxPanel* Get3DPane() { return m_3DPane; }
    wxButton* GetSvgEmuOpenFileAsSource() { return m_svgEmuOpenFileAsSource; }
    wxButton* GetSvgEmuOpenFileAsSvg() { return m_svgEmuOpenFileAsSvg; }
    wxButton* GetSvgEmuReload() { return m_svgEmuReload; }
    wxButton* GetSvgEmuClear() { return m_svgEmuClear; }
    wxButton* GetSvgEmuToggleOrigPath() { return m_svgEmuToggleOrigPath; }
    wxButton* GetSvgEmuZoomHome() { return m_svgEmuZoomHome; }
    wxButton* GetSvgEmuZoomMinus() { return m_svgEmuZoomMinus; }
    wxButton* GetSvgEmuZoomPlus() { return m_svgEmuZoomPlus; }
    wxWebView* GetSvgView() { return m_svgView; }
    wxPanel* GetSvgEmuResult() { return m_svgEmuResult; }
    wxBitmapToggleButton* GetSvgEmuToggleWordWrap() { return m_svgEmuToggleWordWrap; }
    wxStyledTextCtrl* GetStcEmuSource() { return m_stcEmuSource; }
    wxPanel* GetSvgEmuSource() { return m_svgEmuSource; }
    wxNotebook* GetOutboundNotebook() { return m_outboundNotebook; }
    wxPanel* GetMonitorBookCncPanel() { return m_monitorBookCncPanel; }
    wxPanel* GetMonitorTemplatePreviewPlaceHolder() { return m_monitorTemplatePreviewPlaceHolder; }
    wxStaticText* GetStaticText5142() { return m_staticText5142; }
    wxPanel* GetPanel5144() { return m_panel5144; }
    wxTextCtrl* GetCurrentInboundFilePreviewFileName() { return m_currentInboundFilePreviewFileName; }
    wxPanel* GetMonitorTemplatePanel() { return m_monitorTemplatePanel; }
    wxSimplebook* GetMonitorViewBook() { return m_monitorViewBook; }
    wxScrolledWindow* GetScrollWinMonitor() { return m_scrollWinMonitor; }
    wxStaticText* GetStaticText28052() { return m_staticText28052; }
    CncSpeedView* GetSpeedView() { return m_speedView; }
    wxPanel* GetPanelSpeed() { return m_panelSpeed; }
    wxCheckBox* GetKeepFileManagerPreview() { return m_keepFileManagerPreview; }
    wxListCtrl* GetLruList() { return m_lruList; }
    wxStaticLine* GetStaticLine4345() { return m_staticLine4345; }
    wxPanel* GetMainFileViewPlaceholder() { return m_mainFileViewPlaceholder; }
    wxPanel* GetScrollWinFile() { return m_scrollWinFile; }
    wxBitmapButton* GetClearLogger() { return m_clearLogger; }
    wxBitmapButton* GetCopyLogger() { return m_copyLogger; }
    wxCheckBox* GetShowLoggerOnDemand() { return m_showLoggerOnDemand; }
    wxTextCtrl* GetLogger() { return m_logger; }
    wxTextCtrl* GetTmpTraceInfo() { return m_tmpTraceInfo; }
    wxPanel* GetScrollWinLogger() { return m_scrollWinLogger; }
    wxStaticText* GetStaticText395() { return m_staticText395; }
    wxTextCtrl* GetCmdDuration() { return m_cmdDuration; }
    wxStaticLine* GetStaticLine6021() { return m_staticLine6021; }
    wxStaticBitmap* GetHeartbeatState() { return m_heartbeatState; }
    wxStaticLine* GetStaticLine602() { return m_staticLine602; }
    wxTextCtrl* GetInputFileName() { return m_inputFileName; }
    wxStaticLine* GetStaticLine6801() { return m_staticLine6801; }
    wxStaticText* GetSvgParseMode() { return m_svgParseMode; }
    wxPanel* GetActivityPanel() { return m_activityPanel; }
    wxStaticLine* GetStaticLine680() { return m_staticLine680; }
    wxStaticText* GetLableF() { return LableF; }
    wxTextCtrl* GetFeedSpeed() { return m_feedSpeed; }
    wxStaticBitmap* GetRefPosTrafficLight() { return m_refPosTrafficLight; }
    wxStaticText* GetLableX() { return LableX; }
    wxTextCtrl* GetXAxis() { return m_xAxis; }
    wxTextCtrl* GetXAxisCtl() { return m_xAxisCtl; }
    wxStaticText* GetLabelY() { return LabelY; }
    wxTextCtrl* GetYAxis() { return m_yAxis; }
    wxTextCtrl* GetYAxisCtl() { return m_yAxisCtl; }
    wxStaticText* GetLableZ() { return LableZ; }
    wxTextCtrl* GetZAxis() { return m_zAxis; }
    wxTextCtrl* GetZAxisCtl() { return m_zAxisCtl; }
    wxComboBox* GetUnit() { return m_unit; }
    wxStaticLine* GetStaticLine60234() { return m_staticLine60234; }
    wxStaticText* GetStaticText1196() { return m_staticText1196; }
    wxStaticText* GetXMinLimit() { return m_xMinLimit; }
    wxStaticText* GetXMaxLimit() { return m_xMaxLimit; }
    wxStaticText* GetYMinLimit() { return m_yMinLimit; }
    wxStaticText* GetYMaxLimit() { return m_yMaxLimit; }
    wxStaticText* GetZMinLimit() { return m_zMinLimit; }
    wxStaticText* GetZMaxLimit() { return m_zMaxLimit; }
    wxStaticLine* GetStaticLine602341() { return m_staticLine602341; }
    wxStaticBitmap* GetUpdateManagerUpdate() { return m_updateManagerUpdate; }
    wxPanel* GetStatusBar() { return m_statusBar; }
    wxStaticText* GetStaticText3261() { return m_staticText3261; }
    wxComboBox* GetCbUCUnitFrom() { return m_cbUCUnitFrom; }
    wxStaticText* GetStaticText3259() { return m_staticText3259; }
    wxComboBox* GetCbUCUnitTo() { return m_cbUCUnitTo; }
    wxTextCtrl* GetCbUCValueFrom() { return m_cbUCValueFrom; }
    wxTextCtrl* GetCbUCValueTo() { return m_cbUCValueTo; }
    wxButton* GetBtUCClose() { return m_btUCClose; }
    wxPanel* GetSvgUnitCalulator() { return m_svgUnitCalulator; }
    wxButton* GetEnableSerialSpy() { return m_enableSerialSpy; }
    wxButton* GetMarkSerialSpy() { return m_MarkSerialSpy; }
    wxButton* GetClearSerialSpy() { return m_clearSerialSpy; }
    wxComboBox* GetCbSerialSpyMode() { return m_cbSerialSpyMode; }
    wxTextCtrl* GetSerialSpy() { return m_serialSpy; }
    wxPanel* GetSplitterPage4732() { return m_splitterPage4732; }
    wxTextCtrl* GetSerialSpyDetails() { return m_serialSpyDetails; }
    wxPanel* GetSplitterPage4736() { return m_splitterPage4736; }
    wxSplitterWindow* GetSplitter4728() { return m_splitter4728; }
    wxCheckBox* GetClearSerialSpyOnConnect() { return m_clearSerialSpyOnConnect; }
    wxCheckBox* GetClearSerialSpyBeforNextRun() { return m_clearSerialSpyBeforNextRun; }
    wxPanel* GetSerialSpyView() { return m_serialSpyView; }
    wxPropertyGridManager* GetDebuggerPropertyManagerGrid() { return m_debuggerPropertyManagerGrid; }
    wxPanel* GetDebuggerView() { return m_debuggerView; }
    wxBitmapToggleButton* GetBtTogglePosSpy() { return m_btTogglePosSpy; }
    wxBitmapButton* GetBtCopyPosSpy() { return m_btCopyPosSpy; }
    wxBitmapButton* GetBtSearchPosSpy() { return m_btSearchPosSpy; }
    wxBitmapButton* GetBtClearPositionSpy() { return m_btClearPositionSpy; }
    wxComboBox* GetCbContentPosSpy() { return m_cbContentPosSpy; }
    wxStaticText* GetStaticText4526() { return m_staticText4526; }
    wxTextCtrl* GetPositionSpyCount() { return m_positionSpyCount; }
    wxListCtrl* GetPositionSpy() { return m_positionSpy; }
    wxPanel* GetSpeedPanel() { return m_speedPanel; }
    wxBitmapButton* GetBmpButton47181() { return m_bmpButton47181; }
    wxBitmapButton* GetBmpButton4718() { return m_bmpButton4718; }
    wxBitmapButton* GetBmpButton47182() { return m_bmpButton47182; }
    wxBitmapButton* GetBmpButton47183() { return m_bmpButton47183; }
    wxPanel* GetPositionMonitorView() { return m_positionMonitorView; }
    wxAuiManager* GetAuimgrMain() { return m_auimgrMain; }
    wxMenuBar* GetMenuBar() { return m_menuBar; }
    wxTimer* GetStartupTimer() { return m_startupTimer; }
    wxTimer* GetSerialTimer() { return m_serialTimer; }
    wxTimer* GetTraceTimer() { return m_traceTimer; }
    MainFrameBClass(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = _("CNC Controller"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(1600,1000), long style = wxDEFAULT_FRAME_STYLE);
    virtual ~MainFrameBClass();
};


class PathGeneratorFrameBase : public wxFrame
{
protected:
    wxSplitterWindow* m_mainSplitter;
    wxPanel* m_leftMainSplitterPage;
    wxButton* m_btPGMinimizeTree;
    wxTextCtrl* m_treeSearchText;
    wxButton* m_btSearchTree;
    wxTreeCtrl* m_templateTree;
    wxPanel* m_rightMainSplitterPage;
    wxSplitterWindow* m_splitter3185;
    wxPanel* m_splitterPage3189;
    wxComboBox* m_pgPathSelector;
    wxSplitterWindow* m_splitter2932;
    wxPanel* m_splitterPage2936;
    wxNotebook* m_pgMainBook;
    wxPanel* m_pgPreviewPage;
#if wxUSE_WEBVIEW
    wxWebView* m_pgPreview;
#endif // wxUSE_WEBVIEW

    wxPanel* m_pgAdditionalCodePage;
    wxTextCtrl* m_aditionalCode;
    wxPanel* m_pgAdditionalInfoPage;
    wxTextCtrl* m_additionalInfo;
    wxPanel* m_splitterPage2940;
    wxStaticText* m_staticText3401;
    wxTextCtrl* m_currentTemplate;
    wxStaticText* m_staticText33892;
    wxComboBox* m_cbEditMode;
    wxButton* m_updatePreview;
    wxStaticText* m_staticText3389;
    wxComboBox* m_cbDisplayMode;
    wxToolbook* m_tbOutput;
    wxPanel* m_panelPreview;
    wxTextCtrl* m_generatedPreview;
    wxPanel* m_panelResult;
    wxTextCtrl* m_generatedResult;
    wxPanel* m_panelInfo;
    wxTextCtrl* m_processInfo;
    wxPanel* m_splitterPage3193;
    wxButton* m_btPGGenerate;
    wxButton* m_btPGClear;
    wxButton* m_btPGReplaceEdit;
    wxButton* m_btPGCopy;
    wxButton* m_btPGSave;
    wxButton* m_btPGMinimize;
    wxButton* m_btPGClose;
    wxPropertyGridManager* m_pgParameterMgr;
    wxPGProperty* m_pgCatCommon;
    wxPGProperty* m_pgPropToolDiameter;
    wxPGProperty* m_pgPropCorrectionMode;
    wxPGProperty* m_pgPropCorrectionJointType;
    wxPGProperty* m_pgPropCLResolution;
    wxPGProperty* m_pgPropPathColour;
    wxPGProperty* m_pgPropConfigBlock;
    wxPGProperty* m_pgCatPath;
    wxPGProperty* m_pgProp01;
    wxPGProperty* m_pgCatGrid;
    wxPGProperty* m_pgPropRefCross;
    wxPGProperty* m_pgPropGridHelpConstructs;
    wxPGProperty* m_pgPropGridDisplay;
    wxPGProperty* m_pgPropGridSize;
    wxPGProperty* m_pgCatCncBlock;
    wxPGProperty* m_pgPropCncInclude;
    wxPGProperty* m_pgCatCncParameter;
    wxPGProperty* m_pgPropCncZDepthMode;
    wxPGProperty* m_pgPropCncZDepth;
    wxPGProperty* m_pgPropCncToolCorrection;
    wxPGProperty* m_pgPropCncReversePath;
    wxPGProperty* m_pgCatSvg;
    wxPGProperty* m_pgPropSvgWidth;
    wxPGProperty* m_pgPropSvgHeight;
    wxPGProperty* m_pgCatViewBox;
    wxPGProperty* m_pgPropSvgVbX;
    wxPGProperty* m_pgPropSvgVbY;
    wxPGProperty* m_pgPropSvgVbW;
    wxPGProperty* m_pgPropSvgVbH;
    wxPGProperty* m_pgCatTransform;
    wxPGProperty* m_pgPropTransformMode;
    wxPGProperty* m_pgCatTranslate;
    wxPGProperty* m_pgPropTranslateX;
    wxPGProperty* m_pgPropTranslateY;
    wxPGProperty* m_pgCatScale;
    wxPGProperty* m_pgPropScaleX;
    wxPGProperty* m_pgPropScaleY;
    wxPGProperty* m_pgCatRotate;
    wxPGProperty* m_pgPropRotateA;
    wxPGProperty* m_pgPropRotateX;
    wxPGProperty* m_pgPropRotateY;
    wxPGProperty* m_pgCatSkrew;
    wxPGProperty* m_pgPropSkewX;
    wxPGProperty* m_pgPropSkewY;
    wxCheckBox* m_autoGenerate;

protected:
    virtual void onCloseWindow(wxCloseEvent& event) { event.Skip(); }
    virtual void onSize(wxSizeEvent& event) { event.Skip(); }
    virtual void onActivate(wxActivateEvent& event) { event.Skip(); }
    virtual void onMaximize(wxMaximizeEvent& event) { event.Skip(); }
    virtual void onShow(wxShowEvent& event) { event.Skip(); }
    virtual void mainShashPositionChanged( wxSplitterEvent& event) { event.Skip(); }
    virtual void mainShashPositionChanging( wxSplitterEvent& event) { event.Skip(); }
    virtual void toogleTreeSize(wxCommandEvent& event) { event.Skip(); }
    virtual void updateTreeSearch(wxCommandEvent& event) { event.Skip(); }
    virtual void keyDownTreeSearch(wxKeyEvent& event) { event.Skip(); }
    virtual void treeSearch(wxCommandEvent& event) { event.Skip(); }
    virtual void selectTemplateTree(wxTreeEvent& event) { event.Skip(); }
    virtual void selectPathSelector(wxCommandEvent& event) { event.Skip(); }
    virtual void pgMainBookChanged(wxNotebookEvent& event) { event.Skip(); }
    #if wxUSE_WEBVIEW
    #endif // wxUSE_WEBVIEW
    virtual void selectEditMode(wxCommandEvent& event) { event.Skip(); }
    virtual void updatePreview(wxCommandEvent& event) { event.Skip(); }
    virtual void selectDisplayMode(wxCommandEvent& event) { event.Skip(); }
    virtual void generatePath(wxCommandEvent& event) { event.Skip(); }
    virtual void clearView(wxCommandEvent& event) { event.Skip(); }
    virtual void relaceEditControlSelection(wxCommandEvent& event) { event.Skip(); }
    virtual void copyPath(wxCommandEvent& event) { event.Skip(); }
    virtual void saveTemplate(wxCommandEvent& event) { event.Skip(); }
    virtual void toogleSize(wxCommandEvent& event) { event.Skip(); }
    virtual void onCloseWindowFromButton(wxCommandEvent& event) { event.Skip(); }
    virtual void propertyChanged(wxPropertyGridEvent& event) { event.Skip(); }
    virtual void propertyChanging(wxPropertyGridEvent& event) { event.Skip(); }
    virtual void checkAutoGenerate(wxCommandEvent& event) { event.Skip(); }

public:
    wxButton* GetBtPGMinimizeTree() { return m_btPGMinimizeTree; }
    wxTextCtrl* GetTreeSearchText() { return m_treeSearchText; }
    wxButton* GetBtSearchTree() { return m_btSearchTree; }
    wxTreeCtrl* GetTemplateTree() { return m_templateTree; }
    wxPanel* GetLeftMainSplitterPage() { return m_leftMainSplitterPage; }
    wxComboBox* GetPgPathSelector() { return m_pgPathSelector; }
    wxWebView* GetPgPreview() { return m_pgPreview; }
    wxPanel* GetPgPreviewPage() { return m_pgPreviewPage; }
    wxTextCtrl* GetAditionalCode() { return m_aditionalCode; }
    wxPanel* GetPgAdditionalCodePage() { return m_pgAdditionalCodePage; }
    wxTextCtrl* GetAdditionalInfo() { return m_additionalInfo; }
    wxPanel* GetPgAdditionalInfoPage() { return m_pgAdditionalInfoPage; }
    wxNotebook* GetPgMainBook() { return m_pgMainBook; }
    wxPanel* GetSplitterPage2936() { return m_splitterPage2936; }
    wxStaticText* GetStaticText3401() { return m_staticText3401; }
    wxTextCtrl* GetCurrentTemplate() { return m_currentTemplate; }
    wxStaticText* GetStaticText33892() { return m_staticText33892; }
    wxComboBox* GetCbEditMode() { return m_cbEditMode; }
    wxButton* GetUpdatePreview() { return m_updatePreview; }
    wxStaticText* GetStaticText3389() { return m_staticText3389; }
    wxComboBox* GetCbDisplayMode() { return m_cbDisplayMode; }
    wxTextCtrl* GetGeneratedPreview() { return m_generatedPreview; }
    wxPanel* GetPanelPreview() { return m_panelPreview; }
    wxTextCtrl* GetGeneratedResult() { return m_generatedResult; }
    wxPanel* GetPanelResult() { return m_panelResult; }
    wxTextCtrl* GetProcessInfo() { return m_processInfo; }
    wxPanel* GetPanelInfo() { return m_panelInfo; }
    wxToolbook* GetTbOutput() { return m_tbOutput; }
    wxPanel* GetSplitterPage2940() { return m_splitterPage2940; }
    wxSplitterWindow* GetSplitter2932() { return m_splitter2932; }
    wxPanel* GetSplitterPage3189() { return m_splitterPage3189; }
    wxButton* GetBtPGGenerate() { return m_btPGGenerate; }
    wxButton* GetBtPGClear() { return m_btPGClear; }
    wxButton* GetBtPGReplaceEdit() { return m_btPGReplaceEdit; }
    wxButton* GetBtPGCopy() { return m_btPGCopy; }
    wxButton* GetBtPGSave() { return m_btPGSave; }
    wxButton* GetBtPGMinimize() { return m_btPGMinimize; }
    wxButton* GetBtPGClose() { return m_btPGClose; }
    wxPropertyGridManager* GetPgParameterMgr() { return m_pgParameterMgr; }
    wxCheckBox* GetAutoGenerate() { return m_autoGenerate; }
    wxPanel* GetSplitterPage3193() { return m_splitterPage3193; }
    wxSplitterWindow* GetSplitter3185() { return m_splitter3185; }
    wxPanel* GetRightMainSplitterPage() { return m_rightMainSplitterPage; }
    wxSplitterWindow* GetMainSplitter() { return m_mainSplitter; }
    PathGeneratorFrameBase(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = _("SVG Path Generator"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(1600,750), long style = wxDEFAULT_FRAME_STYLE|wxFRAME_FLOAT_ON_PARENT);
    virtual ~PathGeneratorFrameBase();
};


class CncFilePreviewBase : public wxPanel
{
protected:
    wxSimplebook* m_previewBook;
    wxPanel* m_panel3764;
#if wxUSE_WEBVIEW
    wxWebView* m_svgPreview;
#endif // wxUSE_WEBVIEW

    wxPanel* m_panel3766;
    wxPanel* m_gcodePreviewPlaceholder;

protected:
    #if wxUSE_WEBVIEW
    #endif // wxUSE_WEBVIEW

public:
    wxWebView* GetSvgPreview() { return m_svgPreview; }
    wxPanel* GetPanel3764() { return m_panel3764; }
    wxPanel* GetGcodePreviewPlaceholder() { return m_gcodePreviewPlaceholder; }
    wxPanel* GetPanel3766() { return m_panel3766; }
    wxSimplebook* GetPreviewBook() { return m_previewBook; }
    CncFilePreviewBase(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(500,300), long style = wxTAB_TRAVERSAL);
    virtual ~CncFilePreviewBase();
};


class CncToolMagazineBase : public wxPanel
{
protected:
    wxListCtrl* m_toolMagazine;
    wxStaticLine* m_staticLine4628;
    wxStaticText* m_staticText5046;
    wxStaticText* m_staticText5056;
    wxCheckBox* m_cbDefaultToolUsage;
    wxStaticText* m_staticText5058;
    wxComboBox* m_cbDefaultMappedTo;
    wxStaticLine* m_staticLine5048;
    wxStaticText* m_staticText5050;
    wxStaticText* m_staticText4609;
    wxTextCtrl* m_toolMagazineId;
    wxStaticText* m_staticText5072;
    wxStaticText* m_staticText4613;
    wxComboBox* m_toolMagazineType;
    wxStaticText* m_staticText5074;
    wxStaticText* m_staticText4617;
    wxTextCtrl* m_toolMagazineDiameter;
    wxStaticText* m_staticText5076;
    wxStaticText* m_staticText5064;
    wxTextCtrl* m_toolMagazineLength;
    wxStaticText* m_staticText5078;
    wxStaticText* m_staticText5068;
    wxTextCtrl* m_toolMagazineOffset;
    wxStaticText* m_staticText5080;
    wxStaticText* m_staticText4638;
    wxTextCtrl* m_toolMagazineComment;
    wxStaticText* m_staticText5082;
    wxButton* m_btToolMagazineRemove;
    wxButton* m_btToolMagazineDuplicate;
    wxButton* m_btToolMagazineAdd;
    wxButton* m_btToolMagazineEdit;
    wxButton* m_btToolMagazineCancle;

protected:
    virtual void selectedTool(wxListEvent& event) { event.Skip(); }
    virtual void clickUseDefaultTool(wxCommandEvent& event) { event.Skip(); }
    virtual void selectDefaultToolMappedTo(wxCommandEvent& event) { event.Skip(); }
    virtual void selectType(wxCommandEvent& event) { event.Skip(); }
    virtual void removeTool(wxCommandEvent& event) { event.Skip(); }
    virtual void duplicateTool(wxCommandEvent& event) { event.Skip(); }
    virtual void addTool(wxCommandEvent& event) { event.Skip(); }
    virtual void editTool(wxCommandEvent& event) { event.Skip(); }
    virtual void cancel(wxCommandEvent& event) { event.Skip(); }

public:
    wxListCtrl* GetToolMagazine() { return m_toolMagazine; }
    wxStaticLine* GetStaticLine4628() { return m_staticLine4628; }
    wxStaticText* GetStaticText5046() { return m_staticText5046; }
    wxStaticText* GetStaticText5056() { return m_staticText5056; }
    wxCheckBox* GetCbDefaultToolUsage() { return m_cbDefaultToolUsage; }
    wxStaticText* GetStaticText5058() { return m_staticText5058; }
    wxComboBox* GetCbDefaultMappedTo() { return m_cbDefaultMappedTo; }
    wxStaticLine* GetStaticLine5048() { return m_staticLine5048; }
    wxStaticText* GetStaticText5050() { return m_staticText5050; }
    wxStaticText* GetStaticText4609() { return m_staticText4609; }
    wxTextCtrl* GetToolMagazineId() { return m_toolMagazineId; }
    wxStaticText* GetStaticText5072() { return m_staticText5072; }
    wxStaticText* GetStaticText4613() { return m_staticText4613; }
    wxComboBox* GetToolMagazineType() { return m_toolMagazineType; }
    wxStaticText* GetStaticText5074() { return m_staticText5074; }
    wxStaticText* GetStaticText4617() { return m_staticText4617; }
    wxTextCtrl* GetToolMagazineDiameter() { return m_toolMagazineDiameter; }
    wxStaticText* GetStaticText5076() { return m_staticText5076; }
    wxStaticText* GetStaticText5064() { return m_staticText5064; }
    wxTextCtrl* GetToolMagazineLength() { return m_toolMagazineLength; }
    wxStaticText* GetStaticText5078() { return m_staticText5078; }
    wxStaticText* GetStaticText5068() { return m_staticText5068; }
    wxTextCtrl* GetToolMagazineOffset() { return m_toolMagazineOffset; }
    wxStaticText* GetStaticText5080() { return m_staticText5080; }
    wxStaticText* GetStaticText4638() { return m_staticText4638; }
    wxTextCtrl* GetToolMagazineComment() { return m_toolMagazineComment; }
    wxStaticText* GetStaticText5082() { return m_staticText5082; }
    wxButton* GetBtToolMagazineRemove() { return m_btToolMagazineRemove; }
    wxButton* GetBtToolMagazineDuplicate() { return m_btToolMagazineDuplicate; }
    wxButton* GetBtToolMagazineAdd() { return m_btToolMagazineAdd; }
    wxButton* GetBtToolMagazineEdit() { return m_btToolMagazineEdit; }
    wxButton* GetBtToolMagazineCancle() { return m_btToolMagazineCancle; }
    CncToolMagazineBase(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxTAB_TRAVERSAL);
    virtual ~CncToolMagazineBase();
};


class CncFilePreviewWndBase : public wxFrame
{
protected:
    wxTextCtrl* m_previewFileName;
    wxTextCtrl* m_previewFileType;
    wxPanel* m_previewPlaceHolder;

protected:
    virtual void onClose(wxCloseEvent& event) { event.Skip(); }

public:
    wxTextCtrl* GetPreviewFileName() { return m_previewFileName; }
    wxTextCtrl* GetPreviewFileType() { return m_previewFileType; }
    wxPanel* GetPreviewPlaceHolder() { return m_previewPlaceHolder; }
    CncFilePreviewWndBase(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = _("Cnc File Preview"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(500,300), long style = wxDEFAULT_FRAME_STYLE|wxFRAME_FLOAT_ON_PARENT);
    virtual ~CncFilePreviewWndBase();
};


class CncFileViewBase : public wxPanel
{
protected:
    wxBitmapButton* m_btDirUp;
    wxBitmapButton* m_btRefresh;
    wxBitmapButton* m_btDefaultPath;
    wxStaticLine* m_staticLine5035;
    wxBitmapButton* m_btNewTemplate;
    wxBitmapButton* m_btOpenTemplate;
    wxListCtrl* m_fileList;
    wxComboBox* m_filterExtention;
    wxTextCtrl* m_currentDirectory;

protected:
    virtual void aFolderUp(wxCommandEvent& event) { event.Skip(); }
    virtual void refresh(wxCommandEvent& event) { event.Skip(); }
    virtual void selectDefault(wxCommandEvent& event) { event.Skip(); }
    virtual void selectNewTemplate(wxCommandEvent& event) { event.Skip(); }
    virtual void selectOpenTemplate(wxCommandEvent& event) { event.Skip(); }
    virtual void fileListActivated(wxListEvent& event) { event.Skip(); }
    virtual void fileListSelected(wxListEvent& event) { event.Skip(); }
    virtual void fileListLeave(wxMouseEvent& event) { event.Skip(); }
    virtual void selectFilter(wxCommandEvent& event) { event.Skip(); }

public:
    wxBitmapButton* GetBtDirUp() { return m_btDirUp; }
    wxBitmapButton* GetBtRefresh() { return m_btRefresh; }
    wxBitmapButton* GetBtDefaultPath() { return m_btDefaultPath; }
    wxStaticLine* GetStaticLine5035() { return m_staticLine5035; }
    wxBitmapButton* GetBtNewTemplate() { return m_btNewTemplate; }
    wxBitmapButton* GetBtOpenTemplate() { return m_btOpenTemplate; }
    wxListCtrl* GetFileList() { return m_fileList; }
    wxComboBox* GetFilterExtention() { return m_filterExtention; }
    wxTextCtrl* GetCurrentDirectory() { return m_currentDirectory; }
    CncFileViewBase(wxWindow* parent, wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxTAB_TRAVERSAL);
    virtual ~CncFileViewBase();
};


class GL3DOptionsBase : public wxFrame
{
protected:
    wxCollapsiblePane* m_collPaneOptions;
    wxPropertyGridManager* m_pgMgr3543;
    wxPGProperty* m_pgCatDisplayOptions;
    wxPGProperty* m_pgPropDrawType;
    wxPGProperty* m_pgPropAutoScaling;
    wxPGProperty* m_pgPropDrawFlyPath;
    wxPGProperty* m_pgPropPositionMarker;
    wxPGProperty* m_pgPropWorkColour;
    wxPGProperty* m_pgPropFlyColour;
    wxPGProperty* m_pgPropZoom;
    wxPGProperty* m_pgCatBoundBox;
    wxPGProperty* m_pgPropDrawBoundBox;
    wxPGProperty* m_pgPropBoundBoxColour;
    wxPGProperty* m_pgCatRenderOptions;
    wxPGProperty* m_pgPropSmoothing;
    wxCheckBox* m_cbAutoUpdate;
    wxCollapsiblePane* m_collPaneCameraRotation;
    wxSlider* m_sliderCameraRotation;
    wxBitmapButton* m_btResetCameraPos;
    wxBitmapToggleButton* m_btCameraRotionClockwise;
    wxBitmapToggleButton* m_btCameraRotionAnticlockwise;
    wxStaticText* m_staticText3684;
    wxSlider* m_sliderCameraRotationSpeed;
    wxCollapsiblePane* m_collPaneModelRotation;
    wxSlider* m_sliderModelRotationX;
    wxButton* m_btModelRotationResetX;
    wxStaticLine* m_staticLine364118;
    wxSlider* m_sliderModelRotationY;
    wxButton* m_btModelRotationResetY;
    wxStaticLine* m_staticLine3641;
    wxSlider* m_sliderModelRotationZ;
    wxButton* m_btModelRotationResetZ;
    wxStaticLine* m_staticLine36411719;
    wxSlider* m_sliderModelRotationXYZ;
    wxButton* m_btModelRotationResetXYZ;
    wxStaticLine* m_staticLine364117;
    wxTimer* m_timer4476;

protected:
    virtual void onCloseWindow(wxCloseEvent& event) { event.Skip(); }
    virtual void onShowWindow(wxShowEvent& event) { event.Skip(); }
    virtual void onActivate(wxActivateEvent& event) { event.Skip(); }
    virtual void propertyChanged(wxPropertyGridEvent& event) { event.Skip(); }
    virtual void propertyChanging(wxPropertyGridEvent& event) { event.Skip(); }
    virtual void cameraRotationChanged(wxScrollEvent& event) { event.Skip(); }
    virtual void resetCameraPostion(wxCommandEvent& event) { event.Skip(); }
    virtual void autoCameraRotationClockwise(wxCommandEvent& event) { event.Skip(); }
    virtual void autoCameraRotationAnticlockwise(wxCommandEvent& event) { event.Skip(); }
    virtual void cameraRotationSpeedChanged(wxScrollEvent& event) { event.Skip(); }
    virtual void modelRotationXChanged(wxScrollEvent& event) { event.Skip(); }
    virtual void resetModelRotationX(wxCommandEvent& event) { event.Skip(); }
    virtual void modelRotationYChanged(wxScrollEvent& event) { event.Skip(); }
    virtual void resetModelRotationY(wxCommandEvent& event) { event.Skip(); }
    virtual void modelRotationZChanged(wxScrollEvent& event) { event.Skip(); }
    virtual void resetModelRotationZ(wxCommandEvent& event) { event.Skip(); }
    virtual void modelRotationXYZChanged(wxScrollEvent& event) { event.Skip(); }
    virtual void resetModelRotationXYZ(wxCommandEvent& event) { event.Skip(); }
    virtual void onUpdateTimer(wxTimerEvent& event) { event.Skip(); }

public:
    wxPropertyGridManager* GetPgMgr3543() { return m_pgMgr3543; }
    wxCheckBox* GetCbAutoUpdate() { return m_cbAutoUpdate; }
    wxCollapsiblePane* GetCollPaneOptions() { return m_collPaneOptions; }
    wxSlider* GetSliderCameraRotation() { return m_sliderCameraRotation; }
    wxBitmapButton* GetBtResetCameraPos() { return m_btResetCameraPos; }
    wxBitmapToggleButton* GetBtCameraRotionClockwise() { return m_btCameraRotionClockwise; }
    wxBitmapToggleButton* GetBtCameraRotionAnticlockwise() { return m_btCameraRotionAnticlockwise; }
    wxStaticText* GetStaticText3684() { return m_staticText3684; }
    wxSlider* GetSliderCameraRotationSpeed() { return m_sliderCameraRotationSpeed; }
    wxCollapsiblePane* GetCollPaneCameraRotation() { return m_collPaneCameraRotation; }
    wxSlider* GetSliderModelRotationX() { return m_sliderModelRotationX; }
    wxButton* GetBtModelRotationResetX() { return m_btModelRotationResetX; }
    wxStaticLine* GetStaticLine364118() { return m_staticLine364118; }
    wxSlider* GetSliderModelRotationY() { return m_sliderModelRotationY; }
    wxButton* GetBtModelRotationResetY() { return m_btModelRotationResetY; }
    wxStaticLine* GetStaticLine3641() { return m_staticLine3641; }
    wxSlider* GetSliderModelRotationZ() { return m_sliderModelRotationZ; }
    wxButton* GetBtModelRotationResetZ() { return m_btModelRotationResetZ; }
    wxStaticLine* GetStaticLine36411719() { return m_staticLine36411719; }
    wxSlider* GetSliderModelRotationXYZ() { return m_sliderModelRotationXYZ; }
    wxButton* GetBtModelRotationResetXYZ() { return m_btModelRotationResetXYZ; }
    wxStaticLine* GetStaticLine364117() { return m_staticLine364117; }
    wxCollapsiblePane* GetCollPaneModelRotation() { return m_collPaneModelRotation; }
    wxTimer* GetTimer4476() { return m_timer4476; }
    GL3DOptionsBase(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = _("3D Options"), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(-1,-1), long style = wxDEFAULT_FRAME_STYLE|wxSTAY_ON_TOP);
    virtual ~GL3DOptionsBase();
};


class UnitTestsBase : public wxDialog
{
protected:
    wxStaticText* m_staticText3357;
    wxComboBox* m_unitTestSelector;
    wxButton* m_btUnitTestClear;
    wxButton* m_btUnitTestRun;
    wxTextCtrl* m_testResultStream;
    wxStaticText* m_unitTestStatus;
    wxCheckBox* m_unitTestFreezeOutput;
    wxCheckBox* m_unitTestAutoRun;
    wxTimer* m_unitTestStartupTimer;

protected:
    virtual void onShow(wxShowEvent& event) { event.Skip(); }
    virtual void selectTest(wxCommandEvent& event) { event.Skip(); }
    virtual void clearView(wxCommandEvent& event) { event.Skip(); }
    virtual void onStartupTimer(wxTimerEvent& event) { event.Skip(); }

public:
    wxStaticText* GetStaticText3357() { return m_staticText3357; }
    wxComboBox* GetUnitTestSelector() { return m_unitTestSelector; }
    wxButton* GetBtUnitTestClear() { return m_btUnitTestClear; }
    wxButton* GetBtUnitTestRun() { return m_btUnitTestRun; }
    wxTextCtrl* GetTestResultStream() { return m_testResultStream; }
    wxStaticText* GetUnitTestStatus() { return m_unitTestStatus; }
    wxCheckBox* GetUnitTestFreezeOutput() { return m_unitTestFreezeOutput; }
    wxCheckBox* GetUnitTestAutoRun() { return m_unitTestAutoRun; }
    wxTimer* GetUnitTestStartupTimer() { return m_unitTestStartupTimer; }
    UnitTestsBase(wxWindow* parent, wxWindowID id = wxID_ANY, const wxString& title = _("CNC Controller Unit Tests . . ."), const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxSize(800,600), long style = wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxMAXIMIZE_BOX|wxSYSTEM_MENU|wxCLOSE_BOX);
    virtual ~UnitTestsBase();
};


class ImageLib16 : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLib16();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLib16();
};


class ImageLib24 : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLib24();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLib24();
};


class ImageLibFile : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibFile();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibFile();
};


class ImageLibBig : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibBig();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibBig();
};


class ImageLibPortSelector : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibPortSelector();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibPortSelector();
};


class ImageLibAppIcons : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibAppIcons();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibAppIcons();
};


class ImageLibDebugger : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibDebugger();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibDebugger();
};


class ImageLibConfig : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibConfig();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibConfig();
};


class ImageLibPosSpy : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibPosSpy();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibPosSpy();
};


class ImageLibSetterList : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibSetterList();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibSetterList();
};


class ImageLibProbe : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibProbe();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibProbe();
};


class ImageLibStatistics : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibStatistics();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibStatistics();
};


class ImageLibSummary : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibSummary();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibSummary();
};


class ImageLibPerspective : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibPerspective();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibPerspective();
};


class ImageLibHeartbeat : public wxImageList
{
protected:
    // Maintain a map of all bitmaps representd by their name
    std::map<wxString, wxBitmap> m_bitmaps;
    // The requested image resolution (can be one of @2x, @1.5x, @1.25x or an empty string (the default)
    wxString m_resolution;
    int m_imagesWidth;
    int m_imagesHeight;


protected:

public:
    ImageLibHeartbeat();
    const wxBitmap& Bitmap(const wxString &name) const {
        if ( !m_bitmaps.count(name + m_resolution) )
            return wxNullBitmap;
        return m_bitmaps.find(name + m_resolution)->second;
    }

    void SetBitmapResolution(const wxString &res = wxEmptyString) {
        m_resolution = res;
    }

    virtual ~ImageLibHeartbeat();
};

#endif
