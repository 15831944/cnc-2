#include "CncManuallyParser.h"

/////////////////////////////////////////////////////////////
ManuallyParser::ManuallyParser(ManuallyPathHandlerCnc* ph)
: FileParser("")
, pathHandler(ph)
, moves()
, toolId(-1)
/////////////////////////////////////////////////////////////
{
	setupToolId(-1);
}
/////////////////////////////////////////////////////////////
ManuallyParser::~ManuallyParser() {
/////////////////////////////////////////////////////////////
	reset();
}
/////////////////////////////////////////////////////////////
void ManuallyParser::reset() {
/////////////////////////////////////////////////////////////
	moves.clear();
}
/////////////////////////////////////////////////////////////
void ManuallyParser::setupToolId(int id) {
/////////////////////////////////////////////////////////////
	toolId = id;
}
/////////////////////////////////////////////////////////////
void ManuallyParser::addMove(const ManuallyPathHandlerCnc::MoveDefinition& md) {
/////////////////////////////////////////////////////////////
	moves.push_back(md);
}
/////////////////////////////////////////////////////////////
bool ManuallyParser::preprocess() {
/////////////////////////////////////////////////////////////
	// currently nothing todo
	return true;
}
/////////////////////////////////////////////////////////////
bool ManuallyParser::spool() {
/////////////////////////////////////////////////////////////
	long clientId = 0;
	for ( auto it = moves.begin(); it != moves.end(); ++it ) {
		initNextClientId(clientId++);
		
		pathHandler->processLinearMove(*it);
	}
	
	return true;
}
/////////////////////////////////////////////////////////////
bool ManuallyParser::postprocess() {
/////////////////////////////////////////////////////////////
	// currently nothing todo
	return true;
}
/////////////////////////////////////////////////////////////
void ManuallyParser::logMeasurementStart() {
/////////////////////////////////////////////////////////////
	pathHandler->logMeasurementStart();
}
/////////////////////////////////////////////////////////////
void ManuallyParser::logMeasurementEnd() {
/////////////////////////////////////////////////////////////
	pathHandler->logMeasurementEnd();
}
