//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterSecurityRun.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterSecurityRun.h"


// Declare the bitmap loading function
extern void wxC51DFInitBitmapResources();

static bool bBitmapLoaded = false;


CncSecureRunBase::CncSecureRunBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC51DFInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer6563 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer6563->SetFlexibleDirection( wxBOTH );
    flexGridSizer6563->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6563->AddGrowableCol(0);
    flexGridSizer6563->AddGrowableRow(0);
    this->SetSizer(flexGridSizer6563);
    
    wxFlexGridSizer* flexGridSizer6578 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer6578->SetFlexibleDirection( wxBOTH );
    flexGridSizer6578->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer6563->Add(flexGridSizer6578, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer6578->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_header1 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(150,16)), wxTAB_TRAVERSAL);
    m_header1->SetBackgroundColour(wxColour(wxT("rgb(0,128,192)")));
    
    flexGridSizer6578->Add(m_header1, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer6586 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6586->SetFlexibleDirection( wxBOTH );
    flexGridSizer6586->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_header1->SetSizer(flexGridSizer6586);
    
    m_staticText6588 = new wxStaticText(m_header1, wxID_ANY, _("  Remote Monitor Control:"), wxDefaultPosition, wxDLG_UNIT(m_header1, wxSize(-1,-1)), 0);
    m_staticText6588->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText6588Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6588->SetFont(m_staticText6588Font);
    
    flexGridSizer6586->Add(m_staticText6588, 0, wxALL, WXC_FROM_DIP(1));
    m_header1->SetMinSize(wxSize(150,16));
    
    flexGridSizer6578->Add(6, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_header2 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(320,16)), wxTAB_TRAVERSAL);
    m_header2->SetBackgroundColour(wxColour(wxT("rgb(0,128,192)")));
    
    flexGridSizer6578->Add(m_header2, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer6590 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6590->SetFlexibleDirection( wxBOTH );
    flexGridSizer6590->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_header2->SetSizer(flexGridSizer6590);
    
    m_staticText65883 = new wxStaticText(m_header2, wxID_ANY, _("  Remote CNC Control:"), wxDefaultPosition, wxDLG_UNIT(m_header2, wxSize(-1,-1)), 0);
    m_staticText65883->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText65883Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText65883->SetFont(m_staticText65883Font);
    
    flexGridSizer6590->Add(m_staticText65883, 0, wxALL, WXC_FROM_DIP(1));
    m_header2->SetMinSize(wxSize(320,16));
    
    wxFlexGridSizer* flexGridSizer5294 = new wxFlexGridSizer(1, 11, 0, 0);
    flexGridSizer5294->SetFlexibleDirection( wxBOTH );
    flexGridSizer5294->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer6563->Add(flexGridSizer5294, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticLine527312 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL|wxLI_HORIZONTAL);
    
    flexGridSizer5294->Add(m_staticLine527312, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer6595 = new wxBoxSizer(wxVERTICAL);
    
    flexGridSizer5294->Add(boxSizer6595, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_remoteControl = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(140,86)), wxTAB_TRAVERSAL);
    m_remoteControl->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_remoteControl->SetToolTip(_("Only a placeholder"));
    
    boxSizer6595->Add(m_remoteControl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_remoteControl->SetMinSize(wxSize(140,86));
    
    m_staticLine52731 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL|wxLI_HORIZONTAL);
    
    flexGridSizer5294->Add(m_staticLine52731, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btPlay = new wxButton(this, wxID_ANY, _("Pause"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,90)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPlay->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("secureRunPause")), wxBOTTOM);
    m_btPlay->SetBitmapMargins(0,0);
    #endif
    m_btPlay->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_btPlayFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btPlay->SetFont(m_btPlayFont);
    m_btPlay->SetToolTip(_("Pause Current Run"));
    
    flexGridSizer5294->Add(m_btPlay, 0, wxALL, WXC_FROM_DIP(0));
    m_btPlay->SetMinSize(wxSize(90,90));
    
    m_btStop = new wxButton(this, wxID_ANY, _("Stop"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,90)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btStop->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("secureRunStop")), wxBOTTOM);
    m_btStop->SetBitmapMargins(0,0);
    #endif
    m_btStop->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));
    wxFont m_btStopFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btStop->SetFont(m_btStopFont);
    m_btStop->SetToolTip(_("Stop Current Run"));
    
    flexGridSizer5294->Add(m_btStop, 0, wxALL, WXC_FROM_DIP(0));
    m_btStop->SetMinSize(wxSize(90,90));
    
    flexGridSizer5294->Add(16, 90, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine52733 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL|wxLI_HORIZONTAL);
    
    flexGridSizer5294->Add(m_staticLine52733, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer5294->Add(8, 90, 1, wxALL, WXC_FROM_DIP(0));
    
    m_btEmergengy = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,90)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btEmergengy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("emergengy-button-klein")), wxLEFT);
    m_btEmergengy->SetBitmapMargins(0,0);
    #endif
    m_btEmergengy->SetBackgroundColour(wxColour(wxT("rgb(255,223,223)")));
    m_btEmergengy->SetToolTip(_("Emergengy Button"));
    
    flexGridSizer5294->Add(m_btEmergengy, 0, wxALL, WXC_FROM_DIP(0));
    m_btEmergengy->SetMinSize(wxSize(90,90));
    
    flexGridSizer5294->Add(8, 90, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine5273 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL|wxLI_HORIZONTAL);
    
    flexGridSizer5294->Add(m_staticLine5273, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticLine6571 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer6563->Add(m_staticLine6571, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer6558 = new wxFlexGridSizer(1, 20, 0, 0);
    flexGridSizer6558->SetFlexibleDirection( wxBOTH );
    flexGridSizer6558->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6558->AddGrowableCol(9);
    flexGridSizer6558->AddGrowableRow(0);
    
    flexGridSizer6563->Add(flexGridSizer6558, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_btViewTop = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewUp")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewTop->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewTop, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewTop->SetMinSize(wxSize(26,26));
    
    m_btViewBottom = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewDown")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewBottom->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewBottom, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewBottom->SetMinSize(wxSize(26,26));
    
    m_btViewFront = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewFront")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewFront->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewFront, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewFront->SetMinSize(wxSize(26,26));
    
    m_btViewRear = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewButtom")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewRear->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewRear, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewRear->SetMinSize(wxSize(26,26));
    
    m_btViewLeft = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewLeft")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewLeft->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewLeft, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewLeft->SetMinSize(wxSize(26,26));
    
    m_btViewRight = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewRight")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewRight->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewRight, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewRight->SetMinSize(wxSize(26,26));
    
    m_btViewIso1 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewIso1")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewIso1->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewIso1, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewIso1->SetMinSize(wxSize(26,26));
    
    m_btViewIso2 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewIso2")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewIso2->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewIso2, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewIso2->SetMinSize(wxSize(26,26));
    
    m_btViewIso3 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewIso3")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewIso3->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewIso3, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewIso3->SetMinSize(wxSize(26,26));
    
    m_btViewIso4 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewIso4")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewIso4->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewIso4, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewIso4->SetMinSize(wxSize(26,26));
    
    flexGridSizer6558->Add(18, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_startupTimer = new wxTimer;
    m_startupTimer->Start(100, false);
    
    m_blinkTimer = new wxTimer;
    m_blinkTimer->Start(750, false);
    
    SetName(wxT("CncSecureRunBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxVERTICAL);
    } else {
        CentreOnScreen(wxVERTICAL);
    }
    // Connect events
    this->Connect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncSecureRunBase::initDialog), NULL, this);
    this->Connect(wxEVT_SHOW, wxShowEventHandler(CncSecureRunBase::show), NULL, this);
    this->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(CncSecureRunBase::onKeyDown), NULL, this);
    m_btPlay->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::play), NULL, this);
    m_btStop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::stop), NULL, this);
    m_btEmergengy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::emergengy), NULL, this);
    m_btViewTop->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewBottom->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewFront->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewRear->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewLeft->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewRight->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso1->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso2->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso3->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso4->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_startupTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncSecureRunBase::startupTimer), NULL, this);
    m_blinkTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncSecureRunBase::blinkTimer), NULL, this);
    
}

CncSecureRunBase::~CncSecureRunBase()
{
    this->Disconnect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncSecureRunBase::initDialog), NULL, this);
    this->Disconnect(wxEVT_SHOW, wxShowEventHandler(CncSecureRunBase::show), NULL, this);
    this->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(CncSecureRunBase::onKeyDown), NULL, this);
    m_btPlay->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::play), NULL, this);
    m_btStop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::stop), NULL, this);
    m_btEmergengy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::emergengy), NULL, this);
    m_btViewTop->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewBottom->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewFront->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewRear->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewLeft->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewRight->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso1->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso2->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso3->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso4->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_startupTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncSecureRunBase::startupTimer), NULL, this);
    m_blinkTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncSecureRunBase::blinkTimer), NULL, this);
    
    m_startupTimer->Stop();
    wxDELETE( m_startupTimer );

    m_blinkTimer->Stop();
    wxDELETE( m_blinkTimer );

}
