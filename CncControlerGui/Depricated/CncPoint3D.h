#ifndef CNC_POINT_3D_H
#define CNC_POINT_3D_H

////////////////////////////////////////////////////////////
template<class T> class CncPoint3D {
////////////////////////////////////////////////////////////
	
	protected:

		T x;
		T y;
		T z;

	public:
	
		///////////////////////////////////////////////////////
		CncPoint3D() 
		///////////////////////////////////////////////////////	
		: x(0.0f)
		, y(0.0f)
		, z(0.0f)
		{}
		///////////////////////////////////////////////////////
		CncPoint3D(const CncPoint3D<T>& from) 
		///////////////////////////////////////////////////////	
		: x(from.getX())
		, y(from.getY())
		, z(from.getZ())
		{}
		///////////////////////////////////////////////////////
		CncPoint3D(T xx, T yy, T zz) 
		///////////////////////////////////////////////////////
		: x(xx)
		, y(yy)
		, z(zz)
		{}
		///////////////////////////////////////////////////////
		~CncPoint3D() {
		///////////////////////////////////////////////////////	
		}
		///////////////////////////////////////////////////////
		void reint() {
		///////////////////////////////////////////////////////
			x = y = z = 0.0f;
		}
		///////////////////////////////////////////////////////
		const T getX() const {
		///////////////////////////////////////////////////////
			return x;
		}
		///////////////////////////////////////////////////////
		const T getY() const {
		///////////////////////////////////////////////////////
			return y;
		}
		///////////////////////////////////////////////////////
		const T getZ() const {
		///////////////////////////////////////////////////////
			return z;
		}
		///////////////////////////////////////////////////////
		CncPoint3D<T>& setX(T xx) {
		///////////////////////////////////////////////////////	
			x = xx;
			return *this;
		}
		///////////////////////////////////////////////////////
		CncPoint3D<T>& setY(T yy) {
		///////////////////////////////////////////////////////	
			y = yy;
			return *this;
		}
		///////////////////////////////////////////////////////
		CncPoint3D<T>& setZ(T zz) {
		///////////////////////////////////////////////////////	
			z = zz;
			return *this;
		}
		///////////////////////////////////////////////////////
		CncPoint3D<T>& setXYZ(T xx, T yy, T zz) {
		///////////////////////////////////////////////////////	
			x = xx;
			y = yy;
			z = zz;

			return *this;
		}
		///////////////////////////////////////////////////////
		bool operator==(CncPoint3D<T>& cp) const {
		///////////////////////////////////////////////////////
			return ( x == cp.getX() && y == cp.getY() && z = cp.getZ() );
		}
		///////////////////////////////////////////////////////
		bool operator!=(CncPoint3D<T>& cp) const {
		///////////////////////////////////////////////////////
			return ( !operator==(cp) );
		}
		///////////////////////////////////////////////////////
		friend std::ostream& operator<<(std::ostream& os, const CncPoint3D<T>& cp) {
		///////////////////////////////////////////////////////
			os << cp.getX() << ", " << cp.getY() << ", " << cp.getZ();
			return  os;
		} 
};

typedef CncPoint3D<int> 		IntPoint3D;
typedef CncPoint3D<long> 		LongPoint3D;
typedef CncPoint3D<double> 		DoublePoint3D;
typedef CncPoint3D<float> 		FloatPoint3D;

////////////////////////////////////////////////////////////
template<class T> class CncPointPair3D {
////////////////////////////////////////////////////////////
	
	protected:
		
		CncPoint3D<T> p1;
		CncPoint3D<T> p2;
		
		const wxColour defaultDrawColour = *wxWHITE;
		wxColour drawColor;
		
		const int defaultLineStyle = wxSOLID;
		int lineStyle;
	
	public:
		
		///////////////////////////////////////////////////////
		CncPointPair3D () 
		///////////////////////////////////////////////////////
		: drawColor(defaultDrawColour)
		, lineStyle(defaultLineStyle)
		{
			p1.reint();
			p2.reint();
		}
		///////////////////////////////////////////////////////
		CncPointPair3D (const CncPointPair3D& from) 
		///////////////////////////////////////////////////////
		: drawColor(from.getDrawColour())
		, lineStyle(from.getLineStyle())
		{
			p1 = from.getP1();
			p2 = from.getP2();
		}
		///////////////////////////////////////////////////////
		~CncPointPair3D () {
		///////////////////////////////////////////////////////
		}
		///////////////////////////////////////////////////////
		void initDefaultDrawColour(const wxColour& c) {
		///////////////////////////////////////////////////////
			defaultDrawColour = c;
		}
		///////////////////////////////////////////////////////
		const wxColour& getDrawColour() const {
		///////////////////////////////////////////////////////
			return drawColor;
		}
		///////////////////////////////////////////////////////
		void setDrawColour(const wxColour& c) {
		///////////////////////////////////////////////////////
			drawColor = c;
		}
		///////////////////////////////////////////////////////
		void setDefaultToDrawColour() {
		///////////////////////////////////////////////////////
			drawColor = defaultDrawColour;
		}
		///////////////////////////////////////////////////////
		void initDefaultLineStyle(const int s) {
		///////////////////////////////////////////////////////
			defaultLineStyle = s;
		}
		///////////////////////////////////////////////////////
		const int getLineStyle() const {
		///////////////////////////////////////////////////////
			return lineStyle;
		}
		///////////////////////////////////////////////////////
		void setLineStyle(const int s) {
		///////////////////////////////////////////////////////
			lineStyle = s;
		}
		///////////////////////////////////////////////////////
		void setDefaultToLineStyle() {
		///////////////////////////////////////////////////////
			lineStyle = defaultLineStyle;
		}
		///////////////////////////////////////////////////////
		const CncPoint3D<T> getP1() const {
		///////////////////////////////////////////////////////
			return p1;
		}
		///////////////////////////////////////////////////////
		const CncPoint3D<T> getP2() const {
		///////////////////////////////////////////////////////
			return p2;
		}
		///////////////////////////////////////////////////////
		const CncPointPair3D<T>& set(const CncPoint3D<T>& pp1, const CncPoint3D<T>& pp2) {
		///////////////////////////////////////////////////////
			p1 = pp1;
			p2 = pp2;
			
			return *this;
		}
		///////////////////////////////////////////////////////
		const CncPointPair3D<T>& set(T x1, T y1, T z1, T x2, T y2, T z2) {
		///////////////////////////////////////////////////////
			p1.setXYZ(x1, y1, z1);
			p2.setXYZ(x2, y2, z2);
			
			return *this;
		}
		///////////////////////////////////////////////////////
		bool operator==(CncPointPair3D<T>& cpp) const {
		///////////////////////////////////////////////////////
			return ( p1 == cpp.getP1() && p2 == cpp.getP2());
		}
		///////////////////////////////////////////////////////
		bool operator!=(CncPointPair3D<T>& crp) const {
		///////////////////////////////////////////////////////
			return ( !operator==(crp) );
		}
		///////////////////////////////////////////////////////
		friend std::ostream& operator<<(std::ostream& os, const CncPointPair3D<T>& cpp) {
		///////////////////////////////////////////////////////
			os << cpp.getP1() << " | " << cpp.getP2();
			os << " Colour:(" << (int)cpp.drawColor.Red() << "," << (int)cpp.drawColor.Green()<< "," << (int)cpp.drawColor.Blue()<< ")";
			return  os;
		} 		
	
};

typedef CncPointPair3D<int> 		IntPointPair3D;
typedef CncPointPair3D<long> 		LongPointPair3D;
typedef CncPointPair3D<double> 		DoublePointPair3D;
typedef CncPointPair3D<float> 		FloatPointPair3D;

#endif