//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBClass::MainFrameBClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    m_auimgrMain = new wxAuiManager;
    m_auimgrMain->SetManagedWindow( this );
    m_auimgrMain->SetFlags( wxAUI_MGR_LIVE_RESIZE|wxAUI_MGR_TRANSPARENT_HINT|wxAUI_MGR_TRANSPARENT_DRAG|wxAUI_MGR_ALLOW_ACTIVE_PANE|wxAUI_MGR_ALLOW_FLOATING);
    m_auimgrMain->GetArtProvider()->SetMetric( wxAUI_DOCKART_SASH_SIZE, 3);
    m_auimgrMain->GetArtProvider()->SetColor( wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR, wxColour(wxT("rgb(0,0,128)")));
    m_auimgrMain->GetArtProvider()->SetColor( wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR, wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_auimgrMain->GetArtProvider()->SetColor( wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR, wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_auimgrMain->GetArtProvider()->SetColor( wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR, wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_auimgrMain->GetArtProvider()->SetMetric(wxAUI_DOCKART_GRADIENT_TYPE, wxAUI_GRADIENT_NONE);
    
    m_auibarMain = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxAUI_TB_PLAIN_BACKGROUND|wxAUI_TB_DEFAULT_STYLE|wxAUI_TB_NO_AUTORESIZE);
    m_auibarMain->SetToolBitmapSize(wxSize(16,16));
    
    m_auimgrMain->AddPane(m_auibarMain, wxAuiPaneInfo().Name(wxT("Toolbar")).Caption(_("Main")).Direction(wxAUI_DOCK_TOP).Layer(0).Row(0).Position(0).BestSize(40,40).MinSize(40,40).MaxSize(40,40).Fixed().CaptionVisible(false).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false));
    
    m_bmpButton4490 = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("application-side-boxes")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_bmpButton4490->SetToolTip(_("Toggle Template Manager"));
    m_auibarMain->AddControl(m_bmpButton4490);
    
    m_auibarMain->AddSeparator();
    
    m_staticText1842 = new wxStaticText(m_auibarMain, wxID_ANY, _("Port:"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    m_auibarMain->AddControl(m_staticText1842);
    
    m_searchConnections = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("database_refresh")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_searchConnections->SetToolTip(_("Update COM ports"));
    m_auibarMain->AddControl(m_searchConnections);
    
    m_portSelector = new wxBitmapComboBox(m_auibarMain, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(120,-1)), wxArrayString(), wxCB_READONLY);
    m_auibarMain->AddControl(m_portSelector);
    
    m_connect = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-connected")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    m_connect->SetToolTip(_("Connect to mirco controller"));
    m_auibarMain->AddControl(m_connect);
    
    m_auibarMain->AddSeparator();
    
    m_refPosition = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("snap-orto")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    m_refPosition->SetToolTip(_("Determine Reference Position"));
    m_auibarMain->AddControl(m_refPosition);
    
    m_auibarMain->AddSeparator();
    
    m_btSelectSetup = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("system-settings")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectSetup->SetToolTip(_("Setup Page"));
    m_auibarMain->AddControl(m_btSelectSetup);
    
    m_btSelectReferences = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("view-orientation")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectReferences->SetToolTip(_("Navigtor & Predefined Positions"));
    m_auibarMain->AddControl(m_btSelectReferences);
    
    m_btSelectManuallyMove = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-fold")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectManuallyMove->SetToolTip(_("Manually Controller"));
    m_auibarMain->AddControl(m_btSelectManuallyMove);
    
    m_btSelectTemplate = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("package-supported")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectTemplate->SetToolTip(_("Template Page"));
    m_auibarMain->AddControl(m_btSelectTemplate);
    
    m_auibarMain->AddSeparator();
    
    m_btSelectInboundTest = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("software-update-available-3 (2)")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectInboundTest->SetToolTip(_("Test Page"));
    m_auibarMain->AddControl(m_btSelectInboundTest);
    
    m_btSelectInboundPreview = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("filepreview")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectInboundPreview->SetToolTip(_("Inbound Preview"));
    m_auibarMain->AddControl(m_btSelectInboundPreview);
    
    m_auibarMain->AddSeparator();
    
    m_btSelectCncPreview = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("brick-go1")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectCncPreview->SetToolTip(_("CNC Monitor"));
    m_auibarMain->AddControl(m_btSelectCncPreview);
    
    m_btSelectTemplatePreview = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("document-preview")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectTemplatePreview->SetToolTip(_("Template Preview"));
    m_auibarMain->AddControl(m_btSelectTemplatePreview);
    
    m_auibarMain->AddSeparator();
    
    m_auibarMain->AddStretchSpacer(1);
    
    m_auibarMain->AddSeparator();
    
    m_auibarMain->AddTool(wxID_ANY, _("Tool Label"), wxXmlResource::Get()->LoadBitmap(wxT("snail")), wxNullBitmap, wxITEM_NORMAL, _("Config Step Delay"), wxT(""), NULL);
    wxAuiToolBarItem* m_configStepDelay = m_auibarMain->FindToolByIndex(m_auibarMain->GetToolCount()-1);
    if (m_configStepDelay) {
        m_configStepDelay->SetHasDropDown(true);
        m_configStepDelayMenu = new wxMenu;
        m_miCfgStepDelayMin = new wxMenuItem(m_configStepDelayMenu, wxID_ANY, _("Set Step Delay (MIN)"), wxT(""), wxITEM_RADIO);
        m_configStepDelayMenu->Append(m_miCfgStepDelayMin);
        m_miCfgStepDelayMax = new wxMenuItem(m_configStepDelayMenu, wxID_ANY, _("Set Step Delay (MAX)"), wxT(""), wxITEM_RADIO);
        m_configStepDelayMenu->Append(m_miCfgStepDelayMax);
        m_miCfgSimulateArduino = new wxMenuItem(m_configStepDelayMenu, wxID_ANY, _("Simulate Arduino"), wxT(""), wxITEM_RADIO);
        m_configStepDelayMenu->Append(m_miCfgSimulateArduino);
        m_miCfgCustom = new wxMenuItem(m_configStepDelayMenu, wxID_ANY, _("Custom value"), wxT(""), wxITEM_RADIO);
        m_configStepDelayMenu->Append(m_miCfgCustom);
        
        m_dropdownMenus.insert(std::make_pair( m_configStepDelay->GetId(), m_configStepDelayMenu) );
    }
    
    m_stepDelay = new wxSlider(m_auibarMain, wxID_ANY, 0, 0, 128, wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(75,-1)), wxSL_SELRANGE|wxSL_HORIZONTAL);
    wxFont m_stepDelayFont(6, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_stepDelay->SetFont(m_stepDelayFont);
    m_stepDelay->SetToolTip(_("Artificially Step Delay"));
    m_auibarMain->AddControl(m_stepDelay);
    
    m_stepDelayValue = new wxStaticText(m_auibarMain, wxID_ANY, _("0 ms"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(30,-1)), wxALIGN_RIGHT);
    wxFont m_stepDelayValueFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_stepDelayValue->SetFont(m_stepDelayValueFont);
    m_auibarMain->AddControl(m_stepDelayValue);
    
    m_auibarMain->AddSeparator();
    
    m_staticText16032 = new wxStaticText(m_auibarMain, wxID_ANY, _("Render\nResolution:"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    wxFont m_staticText16032Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_staticText16032->SetFont(m_staticText16032Font);
    m_auibarMain->AddControl(m_staticText16032);
    
    wxArrayString m_cbRenderResolutionArr;
    m_cbRenderResolutionArr.Add(wxT("0.001 mm - 9999 PPI"));
    m_cbRenderResolution = new wxComboBox(m_auibarMain, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), m_cbRenderResolutionArr, wxCB_SORT|wxCB_READONLY|wxCB_DROPDOWN);
    m_cbRenderResolution->SetSelection(0);
    m_auibarMain->AddControl(m_cbRenderResolution);
    
    m_auibarMain->AddSeparator();
    
    m_rcReset = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcReset->SetToolTip(_("Reset Controller"));
    m_auibarMain->AddControl(m_rcReset);
    
    m_btProbeMode = new wxBitmapToggleButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("feed")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_EXACTFIT|wxBU_BOTTOM);
    m_btProbeMode->SetToolTip(_("Probe mode ..."));
    m_btProbeMode->SetValue(true);
    m_auibarMain->AddControl(m_btProbeMode);
    
    m_btSpeedControl = new wxBitmapToggleButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("time-add")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_EXACTFIT|wxBU_BOTTOM);
    m_btSpeedControl->SetToolTip(_("SpeedControl ..."));
    m_btSpeedControl->SetValue(true);
    m_auibarMain->AddControl(m_btSpeedControl);
    
    m_auibarMain->AddSeparator();
    
    m_rcDebugConfig = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("server-connect")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcDebugConfig->SetToolTip(_("Open Debug Configuration"));
    m_auibarMain->AddControl(m_rcDebugConfig);
    
    m_rcDebug = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("bug-go")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcDebug->SetToolTip(_("Run - Debug"));
    m_auibarMain->AddControl(m_rcDebug);
    
    m_rcNextBreakpoint = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-next-2")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcNextBreakpoint->SetToolTip(_("Debug: Next Breakpoint"));
    m_auibarMain->AddControl(m_rcNextBreakpoint);
    
    m_rcNextStep = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-down-2")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcNextStep->SetToolTip(_("Debug: Next Step"));
    m_auibarMain->AddControl(m_rcNextStep);
    
    m_rcFinish = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-bottom")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcFinish->SetToolTip(_("Debug: Finish Session"));
    m_auibarMain->AddControl(m_rcFinish);
    
    m_auibarMain->AddSeparator();
    
    m_rcSecureDlg = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("window-new-2")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcSecureDlg->SetToolTip(_("Toggle Secure Run Dialog Mode"));
    m_auibarMain->AddControl(m_rcSecureDlg);
    
    m_rcRun = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("arrow-right-3")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcRun->SetToolTip(_("Run - Release"));
    m_auibarMain->AddControl(m_rcRun);
    
    m_auibarMain->AddSeparator();
    
    m_rcPause = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("media-playback-pause-blue")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcPause->SetToolTip(_("Pause"));
    m_auibarMain->AddControl(m_rcPause);
    
    m_rcStop = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_stop")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcStop->SetToolTip(_("Stop"));
    m_auibarMain->AddControl(m_rcStop);
    
    m_auibarMain->AddSeparator();
    
    m_btnEmergenyStop = new wxButton(m_auibarMain, wxID_ANY, _("Emergency Stop [ESC]"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btnEmergenyStop->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("error")), wxRIGHT);
    m_btnEmergenyStop->SetBitmapMargins(10,2);
    #endif
    m_btnEmergenyStop->SetBackgroundColour(wxColour(wxT("rgb(128,64,64)")));
    m_btnEmergenyStop->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_btnEmergenyStop->SetToolTip(_("Interrupt the CNC Controller"));
    m_auibarMain->AddControl(m_btnEmergenyStop);
    m_auibarMain->Realize();
    
    m_winMainView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_winMainView, wxAuiPaneInfo().Name(wxT("SourceView")).Caption(_("CNC Template")).Direction(wxAUI_DOCK_CENTER).Layer(0).Row(0).Position(0).BestSize(100,100).MinSize(100,100).MaxSize(100,100).CaptionVisible(true).MaximizeButton(true).CloseButton(false).MinimizeButton(true).PinButton(false));
    
    wxFlexGridSizer* flexGridSizer434 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer434->SetFlexibleDirection( wxBOTH );
    flexGridSizer434->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer434->AddGrowableCol(0);
    flexGridSizer434->AddGrowableRow(1);
    m_winMainView->SetSizer(flexGridSizer434);
    
    wxArrayString m_mainViewSelectorArr;
    m_mainViewSelectorArr.Add(wxT("Source View"));
    m_mainViewSelectorArr.Add(wxT("Setup"));
    m_mainViewSelectorArr.Add(wxT("References"));
    m_mainViewSelectorArr.Add(wxT("Manuel Controller"));
    m_mainViewSelectorArr.Add(wxT("Test"));
    m_mainViewSelectorArr.Add(wxT("File Manager Preview"));
    m_mainViewSelector = new wxChoice(m_winMainView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_winMainView, wxSize(-1,-1)), m_mainViewSelectorArr, wxBORDER_NONE);
    wxFont m_mainViewSelectorFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_mainViewSelector->SetFont(m_mainViewSelectorFont);
    m_mainViewSelector->Hide();
    m_mainViewSelector->SetSelection(0);
    
    flexGridSizer434->Add(m_mainViewSelector, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_mainViewBook = new wxSimplebook(m_winMainView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_winMainView, wxSize(-1,-1)), wxBK_DEFAULT);
    m_mainViewBook->SetName(wxT("m_mainViewBook"));
    m_mainViewBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer434->Add(m_mainViewBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_mainBookSourcePanel = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookSourcePanel, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer706 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer706->SetFlexibleDirection( wxBOTH );
    flexGridSizer706->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer706->AddGrowableCol(1);
    flexGridSizer706->AddGrowableRow(0);
    m_mainBookSourcePanel->SetSizer(flexGridSizer706);
    
    wxFlexGridSizer* flexGridSizer1368 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1368->SetFlexibleDirection( wxBOTH );
    flexGridSizer1368->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1368->SetMinSize(28,-1);
    
    flexGridSizer706->Add(flexGridSizer1368, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_openSourceExtern = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_openSourceExtern->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_BUTTON, wxDefaultSize), wxLEFT);
    m_openSourceExtern->SetBitmapMargins(2,2);
    #endif
    m_openSourceExtern->SetToolTip(_("Open Source extern as Text"));
    
    flexGridSizer1368->Add(m_openSourceExtern, 0, wxALL, WXC_FROM_DIP(1));
    m_openSourceExtern->SetMinSize(wxSize(24,24));
    
    m_openSvgExtern = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_openSvgExtern->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-gtk")), wxLEFT);
    m_openSvgExtern->SetBitmapMargins(2,2);
    #endif
    m_openSvgExtern->SetToolTip(_("Open Source extern with configured tool"));
    
    flexGridSizer1368->Add(m_openSvgExtern, 0, wxALL, WXC_FROM_DIP(1));
    m_openSvgExtern->SetMinSize(wxSize(24,24));
    
    m_staticLine44728 = new wxStaticLine(m_mainBookSourcePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1368->Add(m_staticLine44728, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_saveTemplate = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_saveTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxLEFT);
    m_saveTemplate->SetBitmapMargins(2,2);
    #endif
    m_saveTemplate->SetToolTip(_("Save Source"));
    
    flexGridSizer1368->Add(m_saveTemplate, 0, wxALL, WXC_FROM_DIP(1));
    m_saveTemplate->SetMinSize(wxSize(24,24));
    
    m_reloadTemplate = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_reloadTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_reload")), wxLEFT);
    m_reloadTemplate->SetBitmapMargins(2,2);
    #endif
    m_reloadTemplate->SetToolTip(_("Reload current Template"));
    
    flexGridSizer1368->Add(m_reloadTemplate, 0, wxALL, WXC_FROM_DIP(1));
    m_reloadTemplate->SetMinSize(wxSize(24,24));
    
    m_renameTemplate = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_renameTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("edit-rename")), wxLEFT);
    m_renameTemplate->SetBitmapMargins(2,2);
    #endif
    m_renameTemplate->SetToolTip(_("Rename current Template"));
    
    flexGridSizer1368->Add(m_renameTemplate, 0, wxALL, WXC_FROM_DIP(1));
    m_renameTemplate->SetMinSize(wxSize(24,24));
    
    m_removeTemplate = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_removeTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_removeTemplate->SetBitmapMargins(2,2);
    #endif
    m_removeTemplate->SetToolTip(_("Remove current Template"));
    
    flexGridSizer1368->Add(m_removeTemplate, 0, wxALL, WXC_FROM_DIP(1));
    m_removeTemplate->SetMinSize(wxSize(24,24));
    
    flexGridSizer1368->Add(0, 20, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine4472 = new wxStaticLine(m_mainBookSourcePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1368->Add(m_staticLine4472, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_btSvgToggleWordWrap = new wxBitmapToggleButton(m_mainBookSourcePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-word_wrap")), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    m_btSvgToggleWordWrap->SetToolTip(_("Toggle Word Wrap Mode"));
    m_btSvgToggleWordWrap->SetValue(true);
    
    flexGridSizer1368->Add(m_btSvgToggleWordWrap, 0, wxALL, WXC_FROM_DIP(1));
    m_btSvgToggleWordWrap->SetMinSize(wxSize(24,24));
    
    m_staticLine4474 = new wxStaticLine(m_mainBookSourcePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1368->Add(m_staticLine4474, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_btPathGenerator = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPathGenerator->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-globals")), wxLEFT);
    m_btPathGenerator->SetBitmapMargins(2,2);
    #endif
    m_btPathGenerator->SetToolTip(_("Open SVG Path Generator"));
    
    flexGridSizer1368->Add(m_btPathGenerator, 0, wxALL, WXC_FROM_DIP(1));
    m_btPathGenerator->SetMinSize(wxSize(24,24));
    flexGridSizer1368->SetMinSize(wxSize(28,-1));
    
    m_templateNotebook = new wxNotebook(m_mainBookSourcePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(-1,-1)), wxNB_NOPAGETHEME|wxBK_TOP|wxBK_DEFAULT);
    m_templateNotebook->SetName(wxT("m_templateNotebook"));
    wxImageList* m_templateNotebook_il = new wxImageList(16, 16);
    m_templateNotebook->AssignImageList(m_templateNotebook_il);
    
    flexGridSizer706->Add(m_templateNotebook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelTplObserver = new wxPanel(m_templateNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_templateNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplObserverImgIndex;
    m_panelTplObserverImgIndex = m_templateNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("db_update")));
    m_templateNotebook->AddPage(m_panelTplObserver, _("Observer"), false, m_panelTplObserverImgIndex);
    
    wxFlexGridSizer* flexGridSizer6498 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6498->SetFlexibleDirection( wxBOTH );
    flexGridSizer6498->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6498->AddGrowableCol(0);
    flexGridSizer6498->AddGrowableRow(0);
    m_panelTplObserver->SetSizer(flexGridSizer6498);
    
    m_panelTemplateObserverPlaceholder = new wxPanel(m_panelTplObserver, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplObserver, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelTemplateObserverPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer6498->Add(m_panelTemplateObserverPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelTplEdit = new wxPanel(m_templateNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_templateNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplEditImgIndex;
    m_panelTplEditImgIndex = m_templateNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("book_blue")));
    m_templateNotebook->AddPage(m_panelTplEdit, _("Source"), false, m_panelTplEditImgIndex);
    
    wxFlexGridSizer* flexGridSizer1294 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1294->SetFlexibleDirection( wxBOTH );
    flexGridSizer1294->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1294->AddGrowableCol(0);
    flexGridSizer1294->AddGrowableRow(1);
    m_panelTplEdit->SetSizer(flexGridSizer1294);
    
    wxFlexGridSizer* flexGridSizer1809 = new wxFlexGridSizer(0, 8, 0, 0);
    flexGridSizer1809->SetFlexibleDirection( wxBOTH );
    flexGridSizer1809->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1809->AddGrowableCol(5);
    
    flexGridSizer1294->Add(flexGridSizer1809, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_tbCaseSensitive = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-case-sensitive")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbCaseSensitive->SetToolTip(_("Match case"));
    m_tbCaseSensitive->SetValue(false);
    
    flexGridSizer1809->Add(m_tbCaseSensitive, 0, wxALL, WXC_FROM_DIP(1));
    m_tbCaseSensitive->SetMinSize(wxSize(26,26));
    
    m_tbWholeWord = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-whole-word")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbWholeWord->SetToolTip(_("Match whole word"));
    m_tbWholeWord->SetValue(false);
    
    flexGridSizer1809->Add(m_tbWholeWord, 0, wxALL, WXC_FROM_DIP(1));
    m_tbWholeWord->SetMinSize(wxSize(26,26));
    
    m_tbRegEx = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-regular-expression")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbRegEx->SetToolTip(_("Match regular expresion"));
    m_tbRegEx->SetValue(false);
    
    flexGridSizer1809->Add(m_tbRegEx, 0, wxALL, WXC_FROM_DIP(1));
    m_tbRegEx->SetMinSize(wxSize(26,26));
    
    m_tbHighLight = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-marker")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbHighLight->SetToolTip(_("Highlight all occurences"));
    m_tbHighLight->Enable(false);
    m_tbHighLight->SetValue(false);
    
    flexGridSizer1809->Add(m_tbHighLight, 0, wxALL, WXC_FROM_DIP(1));
    m_tbHighLight->SetMinSize(wxSize(26,26));
    
    m_sourceEditSearchState = new wxStaticBitmap(m_panelTplEdit, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(20,-1)), 0 );
    
    flexGridSizer1809->Add(m_sourceEditSearchState, 0, wxALL, WXC_FROM_DIP(5));
    m_sourceEditSearchState->SetMinSize(wxSize(20,-1));
    
    wxArrayString m_sourceEditSearchArr;
    m_sourceEditSearch = new wxComboBox(m_panelTplEdit, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), m_sourceEditSearchArr, 0);
    m_sourceEditSearch->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_sourceEditSearch->SetToolTip(_("Search pattern"));
    #if wxVERSION_NUMBER >= 3000
    m_sourceEditSearch->SetHint(wxT(""));
    #endif
    
    flexGridSizer1809->Add(m_sourceEditSearch, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_svgEditFind = new wxButton(m_panelTplEdit, wxID_ANY, _("Find"), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEditFind->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("system-search-2")), wxLEFT);
    m_svgEditFind->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer1809->Add(m_svgEditFind, 0, wxALL, WXC_FROM_DIP(1));
    m_svgEditFind->SetMinSize(wxSize(-1,26));
    
    m_svgEditFindPrev = new wxButton(m_panelTplEdit, wxID_ANY, _("Find Prev"), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEditFindPrev->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("go-up-search")), wxLEFT);
    m_svgEditFindPrev->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer1809->Add(m_svgEditFindPrev, 0, wxALL, WXC_FROM_DIP(1));
    m_svgEditFindPrev->SetMinSize(wxSize(-1,26));
    
    wxFlexGridSizer* editorToolBoxSizer = new wxFlexGridSizer(2, 1, 0, 0);
    editorToolBoxSizer->SetFlexibleDirection( wxBOTH );
    editorToolBoxSizer->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    editorToolBoxSizer->AddGrowableCol(0);
    editorToolBoxSizer->AddGrowableRow(1);
    
    flexGridSizer1294->Add(editorToolBoxSizer, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_editorToolBox = new wxSimplebook(m_panelTplEdit, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), wxBK_DEFAULT);
    m_editorToolBox->SetName(wxT("m_editorToolBox"));
    m_editorToolBox->SetEffect(wxSHOW_EFFECT_NONE);
    
    editorToolBoxSizer->Add(m_editorToolBox, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelToolBoxSvg = new wxPanel(m_editorToolBox, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_editorToolBox, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_editorToolBox->AddPage(m_panelToolBoxSvg, _("Page"), false);
    
    m_panelToolBoxGcode = new wxPanel(m_editorToolBox, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_editorToolBox, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_editorToolBox->AddPage(m_panelToolBoxGcode, _("Page"), false);
    
    m_panelToolBoxBinary = new wxPanel(m_editorToolBox, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_editorToolBox, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_editorToolBox->AddPage(m_panelToolBoxBinary, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer5976 = new wxFlexGridSizer(1, 10, 0, 0);
    flexGridSizer5976->SetFlexibleDirection( wxBOTH );
    flexGridSizer5976->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5976->AddGrowableCol(0);
    flexGridSizer5976->AddGrowableRow(0);
    m_panelToolBoxBinary->SetSizer(flexGridSizer5976);
    
    wxFlexGridSizer* flexGridSizer6072 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer6072->SetFlexibleDirection( wxBOTH );
    flexGridSizer6072->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6072->AddGrowableCol(2);
    flexGridSizer6072->AddGrowableRow(0);
    
    flexGridSizer5976->Add(flexGridSizer6072, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText6074 = new wxStaticText(m_panelToolBoxBinary, wxID_ANY, _("Binary View Mode:"), wxDefaultPosition, wxDLG_UNIT(m_panelToolBoxBinary, wxSize(-1,-1)), 0);
    wxFont m_staticText6074Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6074->SetFont(m_staticText6074Font);
    
    flexGridSizer6072->Add(m_staticText6074, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer6072->Add(27, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    wxArrayString m_cbBinaryViewModeArr;
    m_cbBinaryViewModeArr.Add(wxT("1 - View Hex"));
    m_cbBinaryViewModeArr.Add(wxT("2 - View Hex C-style"));
    m_cbBinaryViewModeArr.Add(wxT("3 - View Readable [steps]"));
    m_cbBinaryViewModeArr.Add(wxT("4 - View Readable [metric]"));
    m_cbBinaryViewMode = new wxComboBox(m_panelToolBoxBinary, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelToolBoxBinary, wxSize(-1,-1)), m_cbBinaryViewModeArr, wxCB_READONLY);
    m_cbBinaryViewMode->SetSelection(3);
    
    flexGridSizer6072->Add(m_cbBinaryViewMode, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_btExtractSourceAsNewTpl = new wxButton(m_panelToolBoxBinary, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelToolBoxBinary, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btExtractSourceAsNewTpl->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("go-next-context")), wxLEFT);
    m_btExtractSourceAsNewTpl->SetBitmapMargins(2,2);
    #endif
    m_btExtractSourceAsNewTpl->SetToolTip(_("Extract source as new Template"));
    
    flexGridSizer5976->Add(m_btExtractSourceAsNewTpl, 0, wxALL, WXC_FROM_DIP(0));
    m_btExtractSourceAsNewTpl->SetMinSize(wxSize(26,26));
    
    m_stcFileContent = new wxStyledTextCtrl(m_panelTplEdit, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), wxHSCROLL|wxVSCROLL);
    // Configure the fold margin
    m_stcFileContent->SetMarginType     (4, wxSTC_MARGIN_SYMBOL);
    m_stcFileContent->SetMarginMask     (4, wxSTC_MASK_FOLDERS);
    m_stcFileContent->SetMarginSensitive(4, true);
    m_stcFileContent->SetMarginWidth    (4, 0);
    
    // Configure the tracker margin
    m_stcFileContent->SetMarginWidth(1, 0);
    
    // Configure the symbol margin
    m_stcFileContent->SetMarginType (2, wxSTC_MARGIN_SYMBOL);
    m_stcFileContent->SetMarginMask (2, ~(wxSTC_MASK_FOLDERS));
    m_stcFileContent->SetMarginWidth(2, 0);
    m_stcFileContent->SetMarginSensitive(2, true);
    
    // Configure the line numbers margin
    int m_stcFileContent_PixelWidth = 4 + 5 *m_stcFileContent->TextWidth(wxSTC_STYLE_LINENUMBER, wxT("9"));
    m_stcFileContent->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_stcFileContent->SetMarginWidth(0,m_stcFileContent_PixelWidth);
    
    // Configure the line symbol margin
    m_stcFileContent->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_stcFileContent->SetMarginMask(3, 0);
    m_stcFileContent->SetMarginWidth(3,1);
    // Select the lexer
    m_stcFileContent->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_stcFileContent->StyleClearAll();
    m_stcFileContent->SetWrapMode(0);
    m_stcFileContent->SetIndentationGuides(0);
    m_stcFileContent->SetKeyWords(0, wxT(""));
    m_stcFileContent->SetKeyWords(1, wxT(""));
    m_stcFileContent->SetKeyWords(2, wxT(""));
    m_stcFileContent->SetKeyWords(3, wxT(""));
    m_stcFileContent->SetKeyWords(4, wxT(""));
    
    editorToolBoxSizer->Add(m_stcFileContent, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer713 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer713->SetFlexibleDirection( wxBOTH );
    flexGridSizer713->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer713->AddGrowableCol(1);
    
    flexGridSizer1294->Add(flexGridSizer713, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_filePosition = new wxStaticText(m_panelTplEdit, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(100,-1)), 0);
    m_filePosition->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_filePositionFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_filePosition->SetFont(m_filePositionFont);
    
    flexGridSizer713->Add(m_filePosition, 0, wxALL, WXC_FROM_DIP(1));
    m_filePosition->SetMinSize(wxSize(100,-1));
    
    m_sourceEditStatus = new wxTextCtrl(m_panelTplEdit, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    m_sourceEditStatus->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_sourceEditStatusFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_sourceEditStatus->SetFont(m_sourceEditStatusFont);
    #if wxVERSION_NUMBER >= 3000
    m_sourceEditStatus->SetHint(wxT(""));
    #endif
    
    flexGridSizer713->Add(m_sourceEditStatus, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_editMode = new wxStaticText(m_panelTplEdit, wxID_ANY, _("edit mode"), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), 0);
    m_editMode->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_editModeFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_editMode->SetFont(m_editModeFont);
    
    flexGridSizer713->Add(m_editMode, 0, wxALL, WXC_FROM_DIP(1));
    
    m_panelTplSourceExt = new wxPanel(m_templateNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_templateNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplSourceExtImgIndex;
    m_panelTplSourceExtImgIndex = m_templateNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-ToolPin")));
    m_templateNotebook->AddPage(m_panelTplSourceExt, _("Ext"), false, m_panelTplSourceExtImgIndex);
    
    wxFlexGridSizer* flexGridSizer6102 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6102->SetFlexibleDirection( wxBOTH );
    flexGridSizer6102->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6102->AddGrowableCol(0);
    flexGridSizer6102->AddGrowableRow(0);
    m_panelTplSourceExt->SetSizer(flexGridSizer6102);
    
    m_simpleBookSourceExt = new wxSimplebook(m_panelTplSourceExt, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplSourceExt, wxSize(-1,-1)), wxBK_DEFAULT);
    m_simpleBookSourceExt->SetName(wxT("m_simpleBookSourceExt"));
    wxImageList* m_simpleBookSourceExt_il = new wxImageList(16, 16);
    m_simpleBookSourceExt->AssignImageList(m_simpleBookSourceExt_il);
    m_simpleBookSourceExt->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer6102->Add(m_simpleBookSourceExt, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelTplNull = new wxPanel(m_simpleBookSourceExt, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_simpleBookSourceExt, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplNullImgIndex;
    m_panelTplNullImgIndex = m_simpleBookSourceExt_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-file_close")));
    m_simpleBookSourceExt->AddPage(m_panelTplNull, _("Info"), false, m_panelTplNullImgIndex);
    
    wxFlexGridSizer* flexGridSizer6110 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer6110->SetFlexibleDirection( wxBOTH );
    flexGridSizer6110->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_panelTplNull->SetSizer(flexGridSizer6110);
    
    m_staticText6112 = new wxStaticText(m_panelTplNull, wxID_ANY, _("No further information available . . ."), wxDefaultPosition, wxDLG_UNIT(m_panelTplNull, wxSize(-1,-1)), 0);
    wxFont m_staticText6112Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6112->SetFont(m_staticText6112Font);
    
    flexGridSizer6110->Add(m_staticText6112, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panelTplUserAgent = new wxPanel(m_simpleBookSourceExt, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_simpleBookSourceExt, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplUserAgentImgIndex;
    m_panelTplUserAgentImgIndex = m_simpleBookSourceExt_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("book_green")));
    m_simpleBookSourceExt->AddPage(m_panelTplUserAgent, _("UserAgent"), false, m_panelTplUserAgentImgIndex);
    
    wxFlexGridSizer* flexGridSizer1506 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1506->SetFlexibleDirection( wxBOTH );
    flexGridSizer1506->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1506->AddGrowableCol(0);
    flexGridSizer1506->AddGrowableRow(0);
    m_panelTplUserAgent->SetSizer(flexGridSizer1506);
    
    wxFlexGridSizer* flexGridSizer5933 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5933->SetFlexibleDirection( wxBOTH );
    flexGridSizer5933->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5933->AddGrowableCol(0);
    flexGridSizer5933->AddGrowableRow(1);
    
    flexGridSizer1506->Add(flexGridSizer5933, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_svgRootNode = new wxTextCtrl(m_panelTplUserAgent, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxTE_READONLY);
    m_svgRootNode->SetToolTip(_("SVG Root Node (interpreted)"));
    #if wxVERSION_NUMBER >= 3000
    m_svgRootNode->SetHint(wxT(""));
    #endif
    
    flexGridSizer5933->Add(m_svgRootNode, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer1488 = new wxFlexGridSizer(2, 3, 0, 0);
    flexGridSizer1488->SetFlexibleDirection( wxBOTH );
    flexGridSizer1488->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1488->AddGrowableCol(0);
    flexGridSizer1488->AddGrowableCol(1);
    flexGridSizer1488->AddGrowableCol(2);
    flexGridSizer1488->AddGrowableRow(0);
    flexGridSizer1488->AddGrowableRow(1);
    
    flexGridSizer5933->Add(flexGridSizer1488, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer1490 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer1490->SetFlexibleDirection( wxBOTH );
    flexGridSizer1490->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1490->AddGrowableCol(0);
    flexGridSizer1490->AddGrowableRow(1);
    flexGridSizer1490->AddGrowableRow(3);
    
    flexGridSizer1488->Add(flexGridSizer1490, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1498 = new wxStaticText(m_panelTplUserAgent, wxID_ANY, _("Inbound Path List:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), 0);
    wxFont m_staticText1498Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1498Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1498->SetFont(m_staticText1498Font);
    
    flexGridSizer1490->Add(m_staticText1498, 0, wxALL, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAInboundPathList = new wxDataViewListCtrl(m_panelTplUserAgent, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlSvgUAInboundPathList->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1490->Add(m_dvListCtrlSvgUAInboundPathList, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAInboundPathList->AppendTextColumn(_("Ln"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlSvgUAInboundPathList->AppendToggleColumn(_("Considered"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_CENTER);
    m_dvListCtrlSvgUAInboundPathList->AppendTextColumn(_("Node"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_staticText14983 = new wxStaticText(m_panelTplUserAgent, wxID_ANY, _("Use Directives:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), 0);
    wxFont m_staticText14983Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText14983Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText14983->SetFont(m_staticText14983Font);
    
    flexGridSizer1490->Add(m_staticText14983, 0, wxALL, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAUseDirective = new wxDataViewListCtrl(m_panelTplUserAgent, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlSvgUAUseDirective->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1490->Add(m_dvListCtrlSvgUAUseDirective, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAUseDirective->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlSvgUAUseDirective->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    wxFlexGridSizer* flexGridSizer1492 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1492->SetFlexibleDirection( wxBOTH );
    flexGridSizer1492->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1492->AddGrowableCol(0);
    flexGridSizer1492->AddGrowableRow(1);
    
    flexGridSizer1488->Add(flexGridSizer1492, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1500 = new wxStaticText(m_panelTplUserAgent, wxID_ANY, _("Detail Info:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), 0);
    wxFont m_staticText1500Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1500Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1500->SetFont(m_staticText1500Font);
    
    flexGridSizer1492->Add(m_staticText1500, 0, wxALL, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUADetailInfo = new wxDataViewListCtrl(m_panelTplUserAgent, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlSvgUADetailInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1492->Add(m_dvListCtrlSvgUADetailInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUADetailInfo->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlSvgUADetailInfo->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_selectedUAInfo = new wxTextCtrl(m_panelTplUserAgent, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxTE_READONLY);
    m_selectedUAInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    #if wxVERSION_NUMBER >= 3000
    m_selectedUAInfo->SetHint(wxT(""));
    #endif
    
    flexGridSizer1506->Add(m_selectedUAInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_panelTplNestedInfo = new wxPanel(m_simpleBookSourceExt, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_simpleBookSourceExt, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplNestedInfoImgIndex;
    m_panelTplNestedInfoImgIndex = m_simpleBookSourceExt_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("book_red")));
    m_simpleBookSourceExt->AddPage(m_panelTplNestedInfo, _("Nested Information"), false, m_panelTplNestedInfoImgIndex);
    
    wxFlexGridSizer* flexGridSizer6080 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6080->SetFlexibleDirection( wxBOTH );
    flexGridSizer6080->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6080->AddGrowableCol(0);
    flexGridSizer6080->AddGrowableRow(0);
    m_panelTplNestedInfo->SetSizer(flexGridSizer6080);
    
    m_splitter6082 = new wxSplitterWindow(m_panelTplNestedInfo, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplNestedInfo, wxSize(-1,-1)), wxSP_3D);
    m_splitter6082->SetSashGravity(0.4);
    m_splitter6082->SetMinimumPaneSize(10);
    
    flexGridSizer6080->Add(m_splitter6082, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitterPage6086 = new wxPanel(m_splitter6082, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter6082, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer6092 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6092->SetFlexibleDirection( wxBOTH );
    flexGridSizer6092->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6092->AddGrowableCol(0);
    flexGridSizer6092->AddGrowableRow(0);
    m_splitterPage6086->SetSizer(flexGridSizer6092);
    
    m_nestedDataHeader = new wxTextCtrl(m_splitterPage6086, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage6086, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE);
    m_nestedDataHeader->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_nestedDataHeaderFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_nestedDataHeader->SetFont(m_nestedDataHeaderFont);
    
    flexGridSizer6092->Add(m_nestedDataHeader, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_splitterPage6090 = new wxPanel(m_splitter6082, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter6082, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitter6082->SplitHorizontally(m_splitterPage6086, m_splitterPage6090, 0);
    
    wxFlexGridSizer* flexGridSizer60923 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer60923->SetFlexibleDirection( wxBOTH );
    flexGridSizer60923->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer60923->AddGrowableCol(0);
    flexGridSizer60923->AddGrowableRow(0);
    m_splitterPage6090->SetSizer(flexGridSizer60923);
    
    m_nestedSource = new wxTextCtrl(m_splitterPage6090, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage6090, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE);
    m_nestedSource->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_nestedSourceFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_nestedSource->SetFont(m_nestedSourceFont);
    
    flexGridSizer60923->Add(m_nestedSource, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_mainBookSetup = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookSetup, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer1884 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1884->SetFlexibleDirection( wxBOTH );
    flexGridSizer1884->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1884->AddGrowableCol(0);
    flexGridSizer1884->AddGrowableRow(1);
    m_mainBookSetup->SetSizer(flexGridSizer1884);
    
    wxFlexGridSizer* flexGridSizer5138 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5138->SetFlexibleDirection( wxBOTH );
    flexGridSizer5138->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5138->AddGrowableCol(1);
    flexGridSizer5138->AddGrowableRow(0);
    
    flexGridSizer1884->Add(flexGridSizer5138, 0, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_staticText5137 = new wxStaticText(m_mainBookSetup, wxID_ANY, _("Setup Configuration:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookSetup, wxSize(-1,-1)), 0);
    wxFont m_staticText5137Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5137->SetFont(m_staticText5137Font);
    
    flexGridSizer5138->Add(m_staticText5137, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer4541 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer4541->SetFlexibleDirection( wxBOTH );
    flexGridSizer4541->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4541->AddGrowableCol(0);
    flexGridSizer4541->AddGrowableRow(0);
    
    flexGridSizer5138->Add(flexGridSizer4541, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_loadConfiguration = new wxButton(m_mainBookSetup, wxID_ANY, _("Restore"), wxDefaultPosition, wxDLG_UNIT(m_mainBookSetup, wxSize(-1,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_loadConfiguration->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("reload")), wxLEFT);
    m_loadConfiguration->SetBitmapMargins(2,2);
    #endif
    wxFont m_loadConfigurationFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_loadConfiguration->SetFont(m_loadConfigurationFont);
    m_loadConfiguration->SetToolTip(_("Restore saved parameters"));
    
    flexGridSizer4541->Add(m_loadConfiguration, 0, wxALL, WXC_FROM_DIP(1));
    m_loadConfiguration->SetMinSize(wxSize(-1,26));
    
    m_saveConfiguration = new wxButton(m_mainBookSetup, wxID_ANY, _("Save"), wxDefaultPosition, wxDLG_UNIT(m_mainBookSetup, wxSize(-1,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_saveConfiguration->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxLEFT);
    m_saveConfiguration->SetBitmapMargins(2,2);
    #endif
    wxFont m_saveConfigurationFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_saveConfiguration->SetFont(m_saveConfigurationFont);
    m_saveConfiguration->SetToolTip(_("Save current parameters"));
    
    flexGridSizer4541->Add(m_saveConfiguration, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    m_saveConfiguration->SetMinSize(wxSize(-1,26));
    
    m_notebook4561 = new wxNotebook(m_mainBookSetup, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookSetup, wxSize(-1,-1)), wxBK_DEFAULT);
    m_notebook4561->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_notebook4561->SetName(wxT("m_notebook4561"));
    wxImageList* m_notebook4561_il = new wxImageList(16, 16);
    m_notebook4561->AssignImageList(m_notebook4561_il);
    
    flexGridSizer1884->Add(m_notebook4561, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_setupConfigPage = new wxPanel(m_notebook4561, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook4561, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_setupConfigPageImgIndex;
    m_setupConfigPageImgIndex = m_notebook4561_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("system-settings")));
    m_notebook4561->AddPage(m_setupConfigPage, _("Configuration"), true, m_setupConfigPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer3705 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3705->SetFlexibleDirection( wxBOTH );
    flexGridSizer3705->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3705->AddGrowableCol(1);
    flexGridSizer3705->AddGrowableRow(0);
    m_setupConfigPage->SetSizer(flexGridSizer3705);
    
    m_configurationToolbook = new wxToolbook(m_setupConfigPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupConfigPage, wxSize(44,-1)), wxBK_LEFT);
    m_configurationToolbook->SetName(wxT("m_configurationToolbook"));
    wxImageList* m_configurationToolbook_il = new wxImageList(16, 16);
    m_configurationToolbook->AssignImageList(m_configurationToolbook_il);
    
    flexGridSizer3705->Add(m_configurationToolbook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panel5618 = new wxPanel(m_configurationToolbook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_configurationToolbook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel5618ImgIndex;
    m_panel5618ImgIndex = m_configurationToolbook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("actionrun")));
    m_configurationToolbook->AddPage(m_panel5618, _("Work"), true, m_panel5618ImgIndex);
    
    m_panel5620 = new wxPanel(m_configurationToolbook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_configurationToolbook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel5620ImgIndex;
    m_panel5620ImgIndex = m_configurationToolbook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("settings")));
    m_configurationToolbook->AddPage(m_panel5620, _("Gbl."), false, m_panel5620ImgIndex);
    
    m_panel5610 = new wxPanel(m_configurationToolbook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_configurationToolbook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel5610ImgIndex;
    m_panel5610ImgIndex = m_configurationToolbook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("application-view-gallery")));
    m_configurationToolbook->AddPage(m_panel5610, _("App."), false, m_panel5610ImgIndex);
    
    m_panel5612 = new wxPanel(m_configurationToolbook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_configurationToolbook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel5612ImgIndex;
    m_panel5612ImgIndex = m_configurationToolbook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("world-link")));
    m_configurationToolbook->AddPage(m_panel5612, _("Env."), false, m_panel5612ImgIndex);
    
    m_panel5614 = new wxPanel(m_configurationToolbook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_configurationToolbook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel5614ImgIndex;
    m_panel5614ImgIndex = m_configurationToolbook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-globals")));
    m_configurationToolbook->AddPage(m_panel5614, _("SVG"), false, m_panel5614ImgIndex);
    
    m_panel5616 = new wxPanel(m_configurationToolbook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_configurationToolbook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel5616ImgIndex;
    m_panel5616ImgIndex = m_configurationToolbook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-enumerator")));
    m_configurationToolbook->AddPage(m_panel5616, _("GCode"), false, m_panel5616ImgIndex);
    m_configurationToolbook->SetMinSize(wxSize(44,-1));
    
    wxArrayString m_pgMgrSetupArr;
    wxUnusedVar(m_pgMgrSetupArr);
    wxArrayInt m_pgMgrSetupIntArr;
    wxUnusedVar(m_pgMgrSetupIntArr);
    m_pgMgrSetup = new wxPropertyGridManager(m_setupConfigPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupConfigPage, wxSize(-1,-1)), wxPG_NO_INTERNAL_BORDER|wxPG_DESCRIPTION|wxPG_LIMITED_EDITING|wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    m_pgMgrSetup->SetToolTip(_("rtrt"));
    
    flexGridSizer3705->Add(m_pgMgrSetup, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_setupToolMagazine = new wxPanel(m_notebook4561, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook4561, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_setupToolMagazineImgIndex;
    m_setupToolMagazineImgIndex = m_notebook4561_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("database")));
    m_notebook4561->AddPage(m_setupToolMagazine, _("Tool Magazine"), false, m_setupToolMagazineImgIndex);
    
    wxFlexGridSizer* flexGridSizer45651 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer45651->SetFlexibleDirection( wxBOTH );
    flexGridSizer45651->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer45651->AddGrowableCol(0);
    flexGridSizer45651->AddGrowableRow(0);
    m_setupToolMagazine->SetSizer(flexGridSizer45651);
    
    m_toolMagazinePlaceholder = new wxPanel(m_setupToolMagazine, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupToolMagazine, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_toolMagazinePlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_toolMagazinePlaceholder->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer45651->Add(m_toolMagazinePlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_setupSpeedWizard = new wxPanel(m_notebook4561, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook4561, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_setupSpeedWizard->Hide();
    int m_setupSpeedWizardImgIndex;
    m_setupSpeedWizardImgIndex = m_notebook4561_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("bricks")));
    m_notebook4561->AddPage(m_setupSpeedWizard, _("Speed Playground"), false, m_setupSpeedWizardImgIndex);
    
    wxFlexGridSizer* flexGridSizer4565 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4565->SetFlexibleDirection( wxBOTH );
    flexGridSizer4565->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4565->AddGrowableCol(0);
    flexGridSizer4565->AddGrowableRow(1);
    m_setupSpeedWizard->SetSizer(flexGridSizer4565);
    
    wxFlexGridSizer* flexGridSizer5673 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5673->SetFlexibleDirection( wxBOTH );
    flexGridSizer5673->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5673->AddGrowableCol(0);
    flexGridSizer5673->AddGrowableRow(0);
    flexGridSizer5673->AddGrowableRow(1);
    
    flexGridSizer4565->Add(flexGridSizer5673, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5681 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer5681->SetFlexibleDirection( wxBOTH );
    flexGridSizer5681->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5681->AddGrowableCol(2);
    flexGridSizer5681->AddGrowableRow(0);
    
    flexGridSizer5673->Add(flexGridSizer5681, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText5677 = new wxStaticText(m_setupSpeedWizard, wxID_ANY, _("Feed Speed Value [mm/min]:"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(-1,-1)), 0);
    wxFont m_staticText5677Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5677->SetFont(m_staticText5677Font);
    
    flexGridSizer5681->Add(m_staticText5677, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer5681->Add(20, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_speedConfigSlider = new wxSlider(m_setupSpeedWizard, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(-1,-1)), wxSL_LABELS|wxSL_HORIZONTAL);
    wxFont m_speedConfigSliderFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_speedConfigSlider->SetFont(m_speedConfigSliderFont);
    
    flexGridSizer5681->Add(m_speedConfigSlider, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer5707 = new wxFlexGridSizer(1, 11, 0, 0);
    flexGridSizer5707->SetFlexibleDirection( wxBOTH );
    flexGridSizer5707->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5707->AddGrowableCol(3);
    flexGridSizer5707->AddGrowableCol(5);
    flexGridSizer5707->AddGrowableCol(7);
    flexGridSizer5707->AddGrowableCol(10);
    flexGridSizer5707->AddGrowableRow(0);
    
    flexGridSizer5673->Add(flexGridSizer5707, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText5709 = new wxStaticText(m_setupSpeedWizard, wxID_ANY, _("Steps to move:"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(-1,-1)), 0);
    wxFont m_staticText5709Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5709->SetFont(m_staticText5709Font);
    
    flexGridSizer5707->Add(m_staticText5709, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer5707->Add(90, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText5717 = new wxStaticText(m_setupSpeedWizard, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(-1,-1)), 0);
    wxFont m_staticText5717Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5717->SetFont(m_staticText5717Font);
    
    flexGridSizer5707->Add(m_staticText5717, 0, wxALL, WXC_FROM_DIP(5));
    
    m_speedConfigStepsX = new wxTextCtrl(m_setupSpeedWizard, wxID_ANY, wxT("1000"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(100,-1)), wxTE_RIGHT);
    wxFont m_speedConfigStepsXFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_speedConfigStepsX->SetFont(m_speedConfigStepsXFont);
    #if wxVERSION_NUMBER >= 3000
    m_speedConfigStepsX->SetHint(wxT(""));
    #endif
    
    flexGridSizer5707->Add(m_speedConfigStepsX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_speedConfigStepsX->SetMinSize(wxSize(100,-1));
    
    m_staticText5719 = new wxStaticText(m_setupSpeedWizard, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(-1,-1)), 0);
    wxFont m_staticText5719Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5719->SetFont(m_staticText5719Font);
    
    flexGridSizer5707->Add(m_staticText5719, 0, wxALL, WXC_FROM_DIP(5));
    
    m_speedConfigStepsY = new wxTextCtrl(m_setupSpeedWizard, wxID_ANY, wxT("1000"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(100,-1)), wxTE_RIGHT);
    wxFont m_speedConfigStepsYFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_speedConfigStepsY->SetFont(m_speedConfigStepsYFont);
    #if wxVERSION_NUMBER >= 3000
    m_speedConfigStepsY->SetHint(wxT(""));
    #endif
    
    flexGridSizer5707->Add(m_speedConfigStepsY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_speedConfigStepsY->SetMinSize(wxSize(100,-1));
    
    m_staticText5721 = new wxStaticText(m_setupSpeedWizard, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(-1,-1)), 0);
    wxFont m_staticText5721Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5721->SetFont(m_staticText5721Font);
    
    flexGridSizer5707->Add(m_staticText5721, 0, wxALL, WXC_FROM_DIP(5));
    
    m_speedConfigStepsZ = new wxTextCtrl(m_setupSpeedWizard, wxID_ANY, wxT("1000"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(100,-1)), wxTE_RIGHT);
    wxFont m_speedConfigStepsZFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_speedConfigStepsZ->SetFont(m_speedConfigStepsZFont);
    #if wxVERSION_NUMBER >= 3000
    m_speedConfigStepsZ->SetHint(wxT(""));
    #endif
    
    flexGridSizer5707->Add(m_speedConfigStepsZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_speedConfigStepsZ->SetMinSize(wxSize(100,-1));
    
    m_staticLine5781 = new wxStaticLine(m_setupSpeedWizard, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer5707->Add(m_staticLine5781, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText5777 = new wxStaticText(m_setupSpeedWizard, wxID_ANY, _("Accel Axis:"), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(-1,-1)), 0);
    
    flexGridSizer5707->Add(m_staticText5777, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_speedConfigAccelAxisArr;
    m_speedConfigAccelAxisArr.Add(wxT("X"));
    m_speedConfigAccelAxisArr.Add(wxT("Y"));
    m_speedConfigAccelAxisArr.Add(wxT("Z"));
    m_speedConfigAccelAxis = new wxComboBox(m_setupSpeedWizard, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(-1,-1)), m_speedConfigAccelAxisArr, wxCB_READONLY);
    wxFont m_speedConfigAccelAxisFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_speedConfigAccelAxis->SetFont(m_speedConfigAccelAxisFont);
    m_speedConfigAccelAxis->SetSelection(0);
    
    flexGridSizer5707->Add(m_speedConfigAccelAxis, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5678 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer5678->SetFlexibleDirection( wxBOTH );
    flexGridSizer5678->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5678->AddGrowableCol(0);
    flexGridSizer5678->AddGrowableRow(0);
    
    flexGridSizer4565->Add(flexGridSizer5678, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_notebook5687 = new wxNotebook(m_setupSpeedWizard, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(-1,-1)), wxBK_BOTTOM);
    m_notebook5687->SetName(wxT("m_notebook5687"));
    wxImageList* m_notebook5687_il = new wxImageList(16, 16);
    m_notebook5687->AssignImageList(m_notebook5687_il);
    
    flexGridSizer5678->Add(m_notebook5687, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panel5699 = new wxPanel(m_notebook5687, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook5687, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel5699ImgIndex;
    m_panel5699ImgIndex = m_notebook5687_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("car")));
    m_notebook5687->AddPage(m_panel5699, _("Controller"), false, m_panel5699ImgIndex);
    
    wxFlexGridSizer* flexGridSizer56917 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer56917->SetFlexibleDirection( wxBOTH );
    flexGridSizer56917->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer56917->AddGrowableCol(0);
    flexGridSizer56917->AddGrowableRow(0);
    m_panel5699->SetSizer(flexGridSizer56917);
    
    m_splitter5759 = new wxSplitterWindow(m_panel5699, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel5699, wxSize(-1,-1)), wxSP_3D);
    m_splitter5759->SetSashGravity(0.65);
    m_splitter5759->SetMinimumPaneSize(10);
    
    flexGridSizer56917->Add(m_splitter5759, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_accelGraphPanelMain = new wxPanel(m_splitter5759, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter5759, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_accelGraphPanelMain->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTIONTEXT));
    
    wxFlexGridSizer* flexGridSizer5773 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer5773->SetFlexibleDirection( wxBOTH );
    flexGridSizer5773->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5773->AddGrowableCol(0);
    flexGridSizer5773->AddGrowableRow(0);
    m_accelGraphPanelMain->SetSizer(flexGridSizer5773);
    
    m_accelGraphPanel = new wxPanel(m_accelGraphPanelMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_accelGraphPanelMain, wxSize(-1,-1)), wxTAB_TRAVERSAL|wxHSCROLL|wxVSCROLL);
    m_accelGraphPanel->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer5773->Add(m_accelGraphPanel, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_splitterPage5767 = new wxPanel(m_splitter5759, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter5759, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitter5759->SplitHorizontally(m_accelGraphPanelMain, m_splitterPage5767, 0);
    
    wxFlexGridSizer* flexGridSizer5769 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer5769->SetFlexibleDirection( wxBOTH );
    flexGridSizer5769->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5769->AddGrowableCol(0);
    flexGridSizer5769->AddGrowableRow(0);
    m_splitterPage5767->SetSizer(flexGridSizer5769);
    
    m_speedConfigTrace = new wxTextCtrl(m_splitterPage5767, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage5767, wxSize(-1,-1)), wxTE_MULTILINE);
    m_speedConfigTrace->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_speedConfigTrace->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_speedConfigTraceFont(8, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_speedConfigTrace->SetFont(m_speedConfigTraceFont);
    
    flexGridSizer5769->Add(m_speedConfigTrace, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelSpeedPgAxisX = new wxPanel(m_notebook5687, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook5687, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelSpeedPgAxisXImgIndex;
    m_panelSpeedPgAxisXImgIndex = m_notebook5687_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("network-wireless-medium (2)")));
    m_notebook5687->AddPage(m_panelSpeedPgAxisX, _("X Axis"), false, m_panelSpeedPgAxisXImgIndex);
    
    wxFlexGridSizer* flexGridSizer5691 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5691->SetFlexibleDirection( wxBOTH );
    flexGridSizer5691->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5691->AddGrowableCol(0);
    flexGridSizer5691->AddGrowableCol(1);
    flexGridSizer5691->AddGrowableRow(0);
    m_panelSpeedPgAxisX->SetSizer(flexGridSizer5691);
    
    m_accelConfigTraceX = new wxTextCtrl(m_panelSpeedPgAxisX, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelSpeedPgAxisX, wxSize(-1,-1)), wxTE_MULTILINE);
    m_accelConfigTraceX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_accelConfigTraceX->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_accelConfigTraceXFont(8, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_accelConfigTraceX->SetFont(m_accelConfigTraceXFont);
    
    flexGridSizer5691->Add(m_accelConfigTraceX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_speedConfigTraceX = new wxTextCtrl(m_panelSpeedPgAxisX, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelSpeedPgAxisX, wxSize(-1,-1)), wxTE_MULTILINE);
    m_speedConfigTraceX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_speedConfigTraceX->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_speedConfigTraceXFont(8, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_speedConfigTraceX->SetFont(m_speedConfigTraceXFont);
    
    flexGridSizer5691->Add(m_speedConfigTraceX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelSpeedPgAxisY = new wxPanel(m_notebook5687, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook5687, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelSpeedPgAxisYImgIndex;
    m_panelSpeedPgAxisYImgIndex = m_notebook5687_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("network-wireless-medium (2)")));
    m_notebook5687->AddPage(m_panelSpeedPgAxisY, _("Y Axis"), false, m_panelSpeedPgAxisYImgIndex);
    
    wxFlexGridSizer* flexGridSizer569125 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer569125->SetFlexibleDirection( wxBOTH );
    flexGridSizer569125->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer569125->AddGrowableCol(0);
    flexGridSizer569125->AddGrowableCol(1);
    flexGridSizer569125->AddGrowableRow(0);
    m_panelSpeedPgAxisY->SetSizer(flexGridSizer569125);
    
    m_accelConfigTraceY = new wxTextCtrl(m_panelSpeedPgAxisY, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelSpeedPgAxisY, wxSize(-1,-1)), wxTE_MULTILINE);
    m_accelConfigTraceY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_accelConfigTraceY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_accelConfigTraceYFont(8, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_accelConfigTraceY->SetFont(m_accelConfigTraceYFont);
    
    flexGridSizer569125->Add(m_accelConfigTraceY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_speedConfigTraceY = new wxTextCtrl(m_panelSpeedPgAxisY, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelSpeedPgAxisY, wxSize(-1,-1)), wxTE_MULTILINE);
    m_speedConfigTraceY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_speedConfigTraceY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_speedConfigTraceYFont(8, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_speedConfigTraceY->SetFont(m_speedConfigTraceYFont);
    
    flexGridSizer569125->Add(m_speedConfigTraceY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelSpeedPgAxisZ = new wxPanel(m_notebook5687, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook5687, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelSpeedPgAxisZImgIndex;
    m_panelSpeedPgAxisZImgIndex = m_notebook5687_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("network-wireless-medium (2)")));
    m_notebook5687->AddPage(m_panelSpeedPgAxisZ, _("Z Axis"), false, m_panelSpeedPgAxisZImgIndex);
    
    wxFlexGridSizer* flexGridSizer56912 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer56912->SetFlexibleDirection( wxBOTH );
    flexGridSizer56912->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer56912->AddGrowableCol(0);
    flexGridSizer56912->AddGrowableCol(1);
    flexGridSizer56912->AddGrowableRow(0);
    m_panelSpeedPgAxisZ->SetSizer(flexGridSizer56912);
    
    m_accelConfigTraceZ = new wxTextCtrl(m_panelSpeedPgAxisZ, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelSpeedPgAxisZ, wxSize(-1,-1)), wxTE_MULTILINE);
    m_accelConfigTraceZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_accelConfigTraceZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_accelConfigTraceZFont(8, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_accelConfigTraceZ->SetFont(m_accelConfigTraceZFont);
    
    flexGridSizer56912->Add(m_accelConfigTraceZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_speedConfigTraceZ = new wxTextCtrl(m_panelSpeedPgAxisZ, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelSpeedPgAxisZ, wxSize(-1,-1)), wxTE_MULTILINE);
    m_speedConfigTraceZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_speedConfigTraceZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_speedConfigTraceZFont(8, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_speedConfigTraceZ->SetFont(m_speedConfigTraceZFont);
    
    flexGridSizer56912->Add(m_speedConfigTraceZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_mainBookReference = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookReference, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer1885 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer1885->SetFlexibleDirection( wxBOTH );
    flexGridSizer1885->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1885->AddGrowableCol(0);
    flexGridSizer1885->AddGrowableRow(0);
    m_mainBookReference->SetSizer(flexGridSizer1885);
    
    wxFlexGridSizer* flexGridSizer777 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer777->SetFlexibleDirection( wxBOTH );
    flexGridSizer777->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer777->AddGrowableCol(0);
    flexGridSizer777->AddGrowableRow(2);
    
    flexGridSizer1885->Add(flexGridSizer777, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText779 = new wxStaticText(m_mainBookReference, wxID_ANY, _("Manually Motion Control:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    wxFont m_staticText779Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText779->SetFont(m_staticText779Font);
    
    flexGridSizer777->Add(m_staticText779, 0, wxALL, WXC_FROM_DIP(3));
    
    m_staticLine783 = new wxStaticLine(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer777->Add(m_staticLine783, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_listbook7170 = new wxListbook(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxLB_DEFAULT|wxBK_DEFAULT);
    m_listbook7170->SetName(wxT("m_listbook7170"));
    wxImageList* m_listbook7170_il = new wxImageList(16, 16);
    m_listbook7170->AssignImageList(m_listbook7170_il);
    
    flexGridSizer777->Add(m_listbook7170, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_predefinedPositions = new wxPanel(m_listbook7170, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook7170, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_predefinedPositionsImgIndex;
    m_predefinedPositionsImgIndex = m_listbook7170_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("flag-blue-2")));
    m_listbook7170->AddPage(m_predefinedPositions, _("Predefined\nPositions"), false, m_predefinedPositionsImgIndex);
    
    wxFlexGridSizer* flexGridSizer1152 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer1152->SetFlexibleDirection( wxBOTH );
    flexGridSizer1152->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1152->AddGrowableCol(1);
    flexGridSizer1152->AddGrowableRow(0);
    m_predefinedPositions->SetSizer(flexGridSizer1152);
    
    m_scrollWin7112 = new wxScrolledWindow(m_predefinedPositions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_predefinedPositions, wxSize(400,-1)), wxHSCROLL|wxVSCROLL);
    m_scrollWin7112->SetScrollRate(5, 5);
    
    flexGridSizer1152->Add(m_scrollWin7112, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer1165 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1165->SetFlexibleDirection( wxBOTH );
    flexGridSizer1165->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1165->AddGrowableCol(0);
    m_scrollWin7112->SetSizer(flexGridSizer1165);
    
    m_staticText1171 = new wxStaticText(m_scrollWin7112, wxID_ANY, _("Home:"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), 0);
    m_staticText1171->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText1171Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1171Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1171->SetFont(m_staticText1171Font);
    
    flexGridSizer1165->Add(m_staticText1171, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticText1173 = new wxStaticText(m_scrollWin7112, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), 0);
    
    flexGridSizer1165->Add(m_staticText1173, 0, wxALL, WXC_FROM_DIP(1));
    
    wxArrayString m_homeDefintionArr;
    m_homeDefintionArr.Add(wxT("a) X(min), Y(min), Z(Top)"));
    m_homeDefintionArr.Add(wxT("b) X(max), Y(max), Z(Top)"));
    m_homeDefintionArr.Add(wxT("c) X(mid), Y(mid), Z(Top)"));
    m_homeDefintionArr.Add(wxT("d) X(mid), Y(mid), Z(mid)"));
    m_homeDefintion = new wxComboBox(m_scrollWin7112, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), m_homeDefintionArr, wxCB_READONLY);
    m_homeDefintion->SetSelection(0);
    
    flexGridSizer1165->Add(m_homeDefintion, 0, wxALL, WXC_FROM_DIP(2));
    
    m_moveHome = new wxButton(m_scrollWin7112, wxID_ANY, _("Move to Home"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(110,-1)), 0);
    m_moveHome->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveHome, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_moveHome->SetMinSize(wxSize(110,-1));
    
    m_staticLine2177 = new wxStaticLine(m_scrollWin7112, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2177, 0, wxALL|wxEXPAND, WXC_FROM_DIP(4));
    
    m_staticLine2179 = new wxStaticLine(m_scrollWin7112, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2179, 0, wxALL|wxEXPAND, WXC_FROM_DIP(4));
    
    wxFlexGridSizer* flexGridSizer2180 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2180->SetFlexibleDirection( wxBOTH );
    flexGridSizer2180->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2180->AddGrowableCol(0);
    flexGridSizer2180->AddGrowableRow(0);
    
    flexGridSizer1165->Add(flexGridSizer2180, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText2182 = new wxStaticText(m_scrollWin7112, wxID_ANY, _("Move Mode:"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(114,-1)), 0);
    
    flexGridSizer2180->Add(m_staticText2182, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(5));
    m_staticText2182->SetMinSize(wxSize(114,-1));
    
    wxArrayString m_zeroMoveModeXYArr;
    m_zeroMoveModeXYArr.Add(wxT("1D"));
    m_zeroMoveModeXYArr.Add(wxT("2D"));
    m_zeroMoveModeXY = new wxComboBox(m_scrollWin7112, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), m_zeroMoveModeXYArr, wxCB_READONLY);
    m_zeroMoveModeXY->SetToolTip(_("1D: Each axis moves separatly\n2D: X and Y moves simultaneously"));
    m_zeroMoveModeXY->SetSelection(0);
    
    flexGridSizer2180->Add(m_zeroMoveModeXY, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_moveXYtoZero = new wxButton(m_scrollWin7112, wxID_ANY, _("Move XY to Zero"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(110,-1)), 0);
    m_moveXYtoZero->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveXYtoZero, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_moveXYtoZero->SetMinSize(wxSize(110,-1));
    
    wxFlexGridSizer* flexGridSizer218027 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer218027->SetFlexibleDirection( wxBOTH );
    flexGridSizer218027->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer218027->AddGrowableCol(0);
    flexGridSizer218027->AddGrowableRow(0);
    
    flexGridSizer1165->Add(flexGridSizer218027, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText218228 = new wxStaticText(m_scrollWin7112, wxID_ANY, _("Move Mode:"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(114,-1)), 0);
    
    flexGridSizer218027->Add(m_staticText218228, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(5));
    m_staticText218228->SetMinSize(wxSize(114,-1));
    
    wxArrayString m_zeroMoveModeXYZArr;
    m_zeroMoveModeXYZArr.Add(wxT("1D"));
    m_zeroMoveModeXYZArr.Add(wxT("2D"));
    m_zeroMoveModeXYZArr.Add(wxT("3D"));
    m_zeroMoveModeXYZ = new wxComboBox(m_scrollWin7112, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), m_zeroMoveModeXYZArr, wxCB_READONLY);
    m_zeroMoveModeXYZ->SetToolTip(_("1D: Each axis moves separatly\n2D: Z moves separatly as well as X and Y moves simultaneously\n3D: X, Y and Z moves simultaneously"));
    m_zeroMoveModeXYZ->SetSelection(0);
    
    flexGridSizer218027->Add(m_zeroMoveModeXYZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_moveXYZtoZero = new wxButton(m_scrollWin7112, wxID_ANY, _("Move XYZ to Zero"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(110,-1)), 0);
    m_moveXYZtoZero->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveXYZtoZero, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_moveXYZtoZero->SetMinSize(wxSize(110,-1));
    
    wxFlexGridSizer* flexGridSizer21802730 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer21802730->SetFlexibleDirection( wxBOTH );
    flexGridSizer21802730->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21802730->AddGrowableCol(0);
    flexGridSizer21802730->AddGrowableRow(0);
    
    flexGridSizer1165->Add(flexGridSizer21802730, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText21822831 = new wxStaticText(m_scrollWin7112, wxID_ANY, _("Move Mode:"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(114,-1)), 0);
    
    flexGridSizer21802730->Add(m_staticText21822831, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(5));
    m_staticText21822831->SetMinSize(wxSize(114,-1));
    
    wxArrayString m_zeroMoveModeZArr;
    m_zeroMoveModeZArr.Add(wxT("1D"));
    m_zeroMoveModeZ = new wxComboBox(m_scrollWin7112, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), m_zeroMoveModeZArr, wxCB_READONLY);
    m_zeroMoveModeZ->SetToolTip(_("1D: Each axis moves separatly"));
    m_zeroMoveModeZ->SetSelection(0);
    
    flexGridSizer21802730->Add(m_zeroMoveModeZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_moveZtoZero = new wxButton(m_scrollWin7112, wxID_ANY, _("Move Z to Zero"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(110,-1)), 0);
    m_moveZtoZero->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveZtoZero, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_moveZtoZero->SetMinSize(wxSize(110,-1));
    
    m_staticLine2191 = new wxStaticLine(m_scrollWin7112, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2191, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticLine2193 = new wxStaticLine(m_scrollWin7112, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2193, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticText1177233 = new wxStaticText(m_scrollWin7112, wxID_ANY, _("XY Axis:"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), 0);
    m_staticText1177233->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText1177233Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1177233Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1177233->SetFont(m_staticText1177233Font);
    
    flexGridSizer1165->Add(m_staticText1177233, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText11772 = new wxStaticText(m_scrollWin7112, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), 0);
    
    flexGridSizer1165->Add(m_staticText11772, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer2439 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2439->SetFlexibleDirection( wxBOTH );
    flexGridSizer2439->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2439, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_xToMax = new wxButton(m_scrollWin7112, wxID_ANY, _("Move X Axis to Max"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), 0);
    m_xToMax->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_xToMax->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_xToMax->SetToolTip(_("Moves the X axis to the physical MAX position"));
    
    flexGridSizer2439->Add(m_xToMax, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_xToMax->SetMinSize(wxSize(140,-1));
    
    m_xToMid = new wxButton(m_scrollWin7112, wxID_ANY, _("Move X Axis to Mid"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), 0);
    m_xToMid->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_xToMid->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_xToMid->SetToolTip(_("Moves the X axis to the physical MID position"));
    
    flexGridSizer2439->Add(m_xToMid, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_xToMid->SetMinSize(wxSize(140,-1));
    
    m_xToMin = new wxButton(m_scrollWin7112, wxID_ANY, _("Move X Axis to Min"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), 0);
    m_xToMin->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_xToMin->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_xToMin->SetToolTip(_("Moves the X axis to the physical MIN position"));
    
    flexGridSizer2439->Add(m_xToMin, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_xToMin->SetMinSize(wxSize(140,-1));
    
    wxFlexGridSizer* flexGridSizer2440 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2440->SetFlexibleDirection( wxBOTH );
    flexGridSizer2440->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2440, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_yToMax = new wxButton(m_scrollWin7112, wxID_ANY, _("Move Y Axis to Max"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), 0);
    m_yToMax->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_yToMax->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_yToMax->SetToolTip(_("Moves the Y axis to the physical MAX position"));
    
    flexGridSizer2440->Add(m_yToMax, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_yToMax->SetMinSize(wxSize(140,-1));
    
    m_yToMid = new wxButton(m_scrollWin7112, wxID_ANY, _("Move Y Axis to Mid"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), 0);
    m_yToMid->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_yToMid->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_yToMid->SetToolTip(_("Moves the Y axis to the physical MID position"));
    
    flexGridSizer2440->Add(m_yToMid, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_yToMid->SetMinSize(wxSize(140,-1));
    
    m_yToMin = new wxButton(m_scrollWin7112, wxID_ANY, _("Move Y Axis to Min"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), 0);
    m_yToMin->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_yToMin->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_yToMin->SetToolTip(_("Moves the Y axis to the physical MIN position"));
    
    flexGridSizer2440->Add(m_yToMin, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_yToMin->SetMinSize(wxSize(140,-1));
    
    m_staticLine2195 = new wxStaticLine(m_scrollWin7112, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2195, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticLine2197 = new wxStaticLine(m_scrollWin7112, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2197, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticText1175 = new wxStaticText(m_scrollWin7112, wxID_ANY, _("Z Axis:"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), 0);
    m_staticText1175->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText1175Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1175Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1175->SetFont(m_staticText1175Font);
    
    flexGridSizer1165->Add(m_staticText1175, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticText1177 = new wxStaticText(m_scrollWin7112, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(-1,-1)), 0);
    
    flexGridSizer1165->Add(m_staticText1177, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer2434 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2434->SetFlexibleDirection( wxBOTH );
    flexGridSizer2434->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2434, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_zToMax = new wxButton(m_scrollWin7112, wxID_ANY, _("Move Z Axis to Max"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), 0);
    m_zToMax->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_zToMax->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToMax->SetToolTip(_("Moves the Z axis to the physical MAX position"));
    
    flexGridSizer2434->Add(m_zToMax, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_zToMax->SetMinSize(wxSize(140,-1));
    
    m_zToMid = new wxButton(m_scrollWin7112, wxID_ANY, _("Move Z Axis to Mid"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), 0);
    m_zToMid->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_zToMid->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToMid->SetToolTip(_("Moves the Z axis to the physical MID position"));
    
    flexGridSizer2434->Add(m_zToMid, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_zToMid->SetMinSize(wxSize(140,-1));
    
    m_zToMin = new wxButton(m_scrollWin7112, wxID_ANY, _("Move Z Axis to Min"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), 0);
    m_zToMin->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_zToMin->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToMin->SetToolTip(_("Moves the Z axis to the physical MIN position"));
    
    flexGridSizer2434->Add(m_zToMin, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_zToMin->SetMinSize(wxSize(140,-1));
    
    wxFlexGridSizer* flexGridSizer2435 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2435->SetFlexibleDirection( wxBOTH );
    flexGridSizer2435->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2435, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_zToTop = new wxButton(m_scrollWin7112, wxID_ANY, _("Move Z Axis to Top"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), 0);
    m_zToTop->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_zToTop->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToTop->SetToolTip(_("Moves the Z axis to the logical MAX position.\nDepending on the current setup."));
    
    flexGridSizer2435->Add(m_zToTop, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_zToTop->SetMinSize(wxSize(140,-1));
    
    m_staticText2438 = new wxStaticText(m_scrollWin7112, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), wxALIGN_CENTRE);
    
    flexGridSizer2435->Add(m_staticText2438, 0, wxALL, WXC_FROM_DIP(8));
    m_staticText2438->SetMinSize(wxSize(140,-1));
    
    m_zToBottom = new wxButton(m_scrollWin7112, wxID_ANY, _("Move Z Axis to Bottom"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7112, wxSize(140,-1)), 0);
    m_zToBottom->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_zToBottom->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToBottom->SetToolTip(_("Moves the Z axis to the logical MIN position.\nDepending on the current setup."));
    
    flexGridSizer2435->Add(m_zToBottom, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_zToBottom->SetMinSize(wxSize(140,-1));
    m_scrollWin7112->SetMinSize(wxSize(400,-1));
    
    m_panel7172 = new wxPanel(m_predefinedPositions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_predefinedPositions, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    flexGridSizer1152->Add(m_panel7172, 0, wxALL, WXC_FROM_DIP(5));
    
    m_navigator = new wxPanel(m_listbook7170, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_listbook7170, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_navigatorImgIndex;
    m_navigatorImgIndex = m_listbook7170_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("arrow-out")));
    m_listbook7170->AddPage(m_navigator, _("Navigator\nPanel"), true, m_navigatorImgIndex);
    
    wxFlexGridSizer* flexGridSizer5204 = new wxFlexGridSizer(5, 1, 0, 0);
    flexGridSizer5204->SetFlexibleDirection( wxBOTH );
    flexGridSizer5204->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5204->AddGrowableCol(0);
    flexGridSizer5204->AddGrowableRow(0);
    m_navigator->SetSizer(flexGridSizer5204);
    
    wxFlexGridSizer* flexGridSizer6841 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6841->SetFlexibleDirection( wxBOTH );
    flexGridSizer6841->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6841->AddGrowableCol(0);
    flexGridSizer6841->AddGrowableRow(0);
    
    flexGridSizer5204->Add(flexGridSizer6841, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_navigationPanelPlaceholder = new wxPanel(m_navigator, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_navigator, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_navigationPanelPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer6841->Add(m_navigationPanelPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticLine5550 = new wxStaticLine(m_navigator, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_navigator, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer5204->Add(m_staticLine5550, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5206 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5206->SetFlexibleDirection( wxBOTH );
    flexGridSizer5206->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5206->AddGrowableCol(0);
    flexGridSizer5206->AddGrowableRow(1);
    
    flexGridSizer5204->Add(flexGridSizer5206, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer5899 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer5899->SetFlexibleDirection( wxBOTH );
    flexGridSizer5899->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5206->Add(flexGridSizer5899, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_staticBitmap5901 = new wxStaticBitmap(m_navigator, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("playstation-cross-dark-icon16")), wxDefaultPosition, wxDLG_UNIT(m_navigator, wxSize(-1,-1)), 0 );
    
    flexGridSizer5899->Add(m_staticBitmap5901, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer5899->Add(4, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_cbStepSensitivityText = new wxStaticText(m_navigator, wxID_ANY, _("Step Sensitivity:"), wxDefaultPosition, wxDLG_UNIT(m_navigator, wxSize(-1,-1)), 0);
    wxFont m_cbStepSensitivityTextFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_cbStepSensitivityText->SetFont(m_cbStepSensitivityTextFont);
    
    flexGridSizer5899->Add(m_cbStepSensitivityText, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer5834 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer5834->SetFlexibleDirection( wxBOTH );
    flexGridSizer5834->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5206->Add(flexGridSizer5834, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_rbStepSensitivityArr;
    m_rbStepSensitivityArr.Add(_("Finest:"));
    m_rbStepSensitivityArr.Add(_("Fine:"));
    m_rbStepSensitivityArr.Add(_("Medium:"));
    m_rbStepSensitivityArr.Add(_("Rough:"));
    m_rbStepSensitivityArr.Add(_("Roughest:"));
    m_rbStepSensitivity = new wxRadioBox(m_navigator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_navigator, wxSize(-1,-1)), m_rbStepSensitivityArr, 1, 0);
    wxFont m_rbStepSensitivityFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_rbStepSensitivity->SetFont(m_rbStepSensitivityFont);
    m_rbStepSensitivity->SetSelection(1);
    
    flexGridSizer5834->Add(m_rbStepSensitivity, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticLine5552 = new wxStaticLine(m_navigator, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_navigator, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer5204->Add(m_staticLine5552, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5905 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer5905->SetFlexibleDirection( wxBOTH );
    flexGridSizer5905->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5204->Add(flexGridSizer5905, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticBitmap5907 = new wxStaticBitmap(m_navigator, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("playstation-square-dark-icon16")), wxDefaultPosition, wxDLG_UNIT(m_navigator, wxSize(-1,-1)), 0 );
    
    flexGridSizer5905->Add(m_staticBitmap5907, 0, wxALL, WXC_FROM_DIP(1));
    
    flexGridSizer5905->Add(4, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText5909 = new wxStaticText(m_navigator, wxID_ANY, _("Open Reference Position Dialog"), wxDefaultPosition, wxDLG_UNIT(m_navigator, wxSize(-1,-1)), 0);
    
    flexGridSizer5905->Add(m_staticText5909, 0, wxALL, WXC_FROM_DIP(1));
    
    m_mainBookManual = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookManual, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer862 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer862->SetFlexibleDirection( wxBOTH );
    flexGridSizer862->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer862->AddGrowableCol(0);
    flexGridSizer862->AddGrowableRow(0);
    m_mainBookManual->SetSizer(flexGridSizer862);
    
    wxFlexGridSizer* flexGridSizer1169 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1169->SetFlexibleDirection( wxBOTH );
    flexGridSizer1169->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1169->AddGrowableCol(0);
    
    flexGridSizer862->Add(flexGridSizer1169, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer2081 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer2081->SetFlexibleDirection( wxBOTH );
    flexGridSizer2081->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1169->Add(flexGridSizer2081, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText1160 = new wxStaticText(m_mainBookManual, wxID_ANY, _("Manually Move Coordinates / Parameters:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    wxFont m_staticText1160Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1160->SetFont(m_staticText1160Font);
    
    flexGridSizer2081->Add(m_staticText1160, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine1162 = new wxStaticLine(m_mainBookManual, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1169->Add(m_staticLine1162, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer1522 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer1522->SetFlexibleDirection( wxBOTH );
    flexGridSizer1522->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1522->AddGrowableCol(1);
    flexGridSizer1522->AddGrowableRow(0);
    
    flexGridSizer1169->Add(flexGridSizer1522, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxArrayString m_mmRadioCoordinatesArr;
    m_mmRadioCoordinatesArr.Add(_("Absolute"));
    m_mmRadioCoordinatesArr.Add(_("Relative"));
    m_mmRadioCoordinates = new wxRadioBox(m_mainBookManual, wxID_ANY, _("How to use the coordinates . . ."), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), m_mmRadioCoordinatesArr, 1, wxRA_SPECIFY_COLS);
    m_mmRadioCoordinates->SetSelection(1);
    
    flexGridSizer1522->Add(m_mmRadioCoordinates, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5099 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer5099->SetFlexibleDirection( wxBOTH );
    flexGridSizer5099->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5099->AddGrowableCol(0);
    flexGridSizer5099->AddGrowableRow(0);
    flexGridSizer5099->AddGrowableRow(1);
    
    flexGridSizer1522->Add(flexGridSizer5099, 1, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    wxFlexGridSizer* flexGridSizer5114 = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizer5114->SetFlexibleDirection( wxBOTH );
    flexGridSizer5114->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5114->AddGrowableCol(2);
    flexGridSizer5114->AddGrowableRow(0);
    
    flexGridSizer5099->Add(flexGridSizer5114, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText5101 = new wxStaticText(m_mainBookManual, wxID_ANY, _("Tool ID:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer5114->Add(m_staticText5101, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer5114->Add(26, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_manuallyToolIdArr;
    m_manuallyToolIdArr.Add(wxT("-1"));
    m_manuallyToolId = new wxComboBox(m_mainBookManual, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), m_manuallyToolIdArr, wxCB_READONLY);
    m_manuallyToolId->SetSelection(0);
    
    flexGridSizer5114->Add(m_manuallyToolId, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer5114->Add(14, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    m_checkBoxToolEnabled = new wxCheckBox(m_mainBookManual, wxID_ANY, _("Tool Enabled"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxALIGN_RIGHT);
    m_checkBoxToolEnabled->SetValue(false);
    
    flexGridSizer5114->Add(m_checkBoxToolEnabled, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer5111 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer5111->SetFlexibleDirection( wxBOTH );
    flexGridSizer5111->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5111->AddGrowableCol(1);
    flexGridSizer5111->AddGrowableRow(0);
    
    flexGridSizer5099->Add(flexGridSizer5111, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText5105 = new wxStaticText(m_mainBookManual, wxID_ANY, _("Speed Value:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer5111->Add(m_staticText5105, 0, wxALL, WXC_FROM_DIP(5));
    
    m_manuallySpeedSlider = new wxSlider(m_mainBookManual, wxID_ANY, 80, 1, 100, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxSL_HORIZONTAL);
    
    flexGridSizer5111->Add(m_manuallySpeedSlider, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_manuallySpeedValue = new wxTextCtrl(m_mainBookManual, wxID_ANY, wxT("500.0"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    #if wxVERSION_NUMBER >= 3000
    m_manuallySpeedValue->SetHint(wxT(""));
    #endif
    
    flexGridSizer5111->Add(m_manuallySpeedValue, 0, wxALL|wxEXPAND, WXC_FROM_DIP(4));
    m_manuallySpeedValue->SetMinSize(wxSize(50,20));
    
    m_staticText5113 = new wxStaticText(m_mainBookManual, wxID_ANY, _("mm/min"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer5111->Add(m_staticText5113, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine5729 = new wxStaticLine(m_mainBookManual, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer5099->Add(m_staticLine5729, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5723 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5723->SetFlexibleDirection( wxBOTH );
    flexGridSizer5723->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5723->AddGrowableCol(0);
    flexGridSizer5723->AddGrowableCol(1);
    flexGridSizer5723->AddGrowableRow(0);
    
    flexGridSizer5099->Add(flexGridSizer5723, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_manuallyCorrectLimitPos = new wxCheckBox(m_mainBookManual, wxID_ANY, _("Currect Limit Positions"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    m_manuallyCorrectLimitPos->SetValue(true);
    
    flexGridSizer5723->Add(m_manuallyCorrectLimitPos, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_staticLine5109 = new wxStaticLine(m_mainBookManual, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1169->Add(m_staticLine5109, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer1590 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1590->SetFlexibleDirection( wxBOTH );
    flexGridSizer1590->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1590->AddGrowableCol(0);
    flexGridSizer1590->AddGrowableRow(0);
    flexGridSizer1590->AddGrowableRow(1);
    
    flexGridSizer1169->Add(flexGridSizer1590, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer7893 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer7893->SetFlexibleDirection( wxBOTH );
    flexGridSizer7893->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7893->AddGrowableCol(2);
    flexGridSizer7893->AddGrowableRow(0);
    
    flexGridSizer1590->Add(flexGridSizer7893, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText793 = new wxStaticText(m_mainBookManual, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    m_staticText793->SetForegroundColour(wxColour(wxT("rgb(255,0,0)")));
    wxFont m_staticText793Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText793->SetFont(m_staticText793Font);
    
    flexGridSizer7893->Add(m_staticText793, 0, wxALL, WXC_FROM_DIP(5));
    
    m_minManuallyXSlider = new wxButton(m_mainBookManual, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_minManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_minManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_minManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minManuallyXSlider->SetFont(m_minManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_minManuallyXSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_minManuallyXSlider->SetMinSize(wxSize(30,26));
    
    m_metricX = new wxTextCtrl(m_mainBookManual, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxTE_RIGHT);
    m_metricX->SetBackgroundColour(wxColour(wxT("rgb(255,128,128)")));
    #if wxVERSION_NUMBER >= 3000
    m_metricX->SetHint(wxT(""));
    #endif
    
    flexGridSizer7893->Add(m_metricX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_maxManuallyXSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_maxManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_maxManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_maxManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxManuallyXSlider->SetFont(m_maxManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_maxManuallyXSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_maxManuallyXSlider->SetMinSize(wxSize(30,26));
    
    m_zeroManuallyXSlider = new wxButton(m_mainBookManual, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(26,26)), 0);
    m_zeroManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_zeroManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_zeroManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zeroManuallyXSlider->SetFont(m_zeroManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_zeroManuallyXSlider, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    m_zeroManuallyXSlider->SetMinSize(wxSize(26,26));
    
    m_signManuallyXSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+/-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_signManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_signManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_signManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_signManuallyXSlider->SetFont(m_signManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_signManuallyXSlider, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    m_signManuallyXSlider->SetMinSize(wxSize(30,26));
    
    m_mmUnitX = new wxStaticText(m_mainBookManual, wxID_ANY, _("<unit>"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer7893->Add(m_mmUnitX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_xManuallySlider = new wxSlider(m_mainBookManual, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxSL_SELRANGE|wxSL_LABELS|wxSL_HORIZONTAL);
    
    flexGridSizer1590->Add(m_xManuallySlider, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticLine5129 = new wxStaticLine(m_mainBookManual, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1590->Add(m_staticLine5129, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer1591 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1591->SetFlexibleDirection( wxBOTH );
    flexGridSizer1591->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1591->AddGrowableCol(0);
    flexGridSizer1591->AddGrowableRow(0);
    flexGridSizer1591->AddGrowableRow(1);
    
    flexGridSizer1169->Add(flexGridSizer1591, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer7894 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer7894->SetFlexibleDirection( wxBOTH );
    flexGridSizer7894->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7894->AddGrowableCol(2);
    flexGridSizer7894->AddGrowableRow(0);
    
    flexGridSizer1591->Add(flexGridSizer7894, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText797 = new wxStaticText(m_mainBookManual, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    m_staticText797->SetForegroundColour(wxColour(wxT("rgb(0,128,192)")));
    wxFont m_staticText797Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText797->SetFont(m_staticText797Font);
    
    flexGridSizer7894->Add(m_staticText797, 0, wxALL, WXC_FROM_DIP(5));
    
    m_minManuallyYSlider = new wxButton(m_mainBookManual, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_minManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_minManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_minManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minManuallyYSlider->SetFont(m_minManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_minManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_minManuallyYSlider->SetMinSize(wxSize(30,26));
    
    m_metricY = new wxTextCtrl(m_mainBookManual, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(120,-1)), wxTE_RIGHT);
    m_metricY->SetBackgroundColour(wxColour(wxT("rgb(0,128,192)")));
    m_metricY->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    #if wxVERSION_NUMBER >= 3000
    m_metricY->SetHint(wxT(""));
    #endif
    
    flexGridSizer7894->Add(m_metricY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_maxManuallyYSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_maxManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_maxManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_maxManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxManuallyYSlider->SetFont(m_maxManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_maxManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_maxManuallyYSlider->SetMinSize(wxSize(30,26));
    
    m_zeroManuallyYSlider = new wxButton(m_mainBookManual, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(26,26)), 0);
    m_zeroManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_zeroManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_zeroManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zeroManuallyYSlider->SetFont(m_zeroManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_zeroManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_zeroManuallyYSlider->SetMinSize(wxSize(26,26));
    
    m_signManuallyYSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+/-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_signManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_signManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_signManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_signManuallyYSlider->SetFont(m_signManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_signManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_signManuallyYSlider->SetMinSize(wxSize(30,26));
    
    m_mmUnitY = new wxStaticText(m_mainBookManual, wxID_ANY, _("<unit>"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer7894->Add(m_mmUnitY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_yManuallySlider = new wxSlider(m_mainBookManual, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxSL_SELRANGE|wxSL_LABELS|wxSL_HORIZONTAL);
    
    flexGridSizer1591->Add(m_yManuallySlider, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticLine5133 = new wxStaticLine(m_mainBookManual, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1591->Add(m_staticLine5133, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer15911 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer15911->SetFlexibleDirection( wxBOTH );
    flexGridSizer15911->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer15911->AddGrowableCol(0);
    flexGridSizer15911->AddGrowableRow(0);
    flexGridSizer15911->AddGrowableRow(1);
    
    flexGridSizer1169->Add(flexGridSizer15911, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer78942 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer78942->SetFlexibleDirection( wxBOTH );
    flexGridSizer78942->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer78942->AddGrowableCol(2);
    flexGridSizer78942->AddGrowableRow(0);
    
    flexGridSizer15911->Add(flexGridSizer78942, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText7973 = new wxStaticText(m_mainBookManual, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    m_staticText7973->SetForegroundColour(wxColour(wxT("rgb(0,128,0)")));
    wxFont m_staticText7973Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText7973->SetFont(m_staticText7973Font);
    
    flexGridSizer78942->Add(m_staticText7973, 0, wxALL, WXC_FROM_DIP(5));
    
    m_minManuallyZSlider = new wxButton(m_mainBookManual, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_minManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_minManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_minManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minManuallyZSlider->SetFont(m_minManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_minManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_minManuallyZSlider->SetMinSize(wxSize(30,26));
    
    m_metricZ = new wxTextCtrl(m_mainBookManual, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(120,-1)), wxTE_RIGHT);
    m_metricZ->SetBackgroundColour(wxColour(wxT("rgb(0,128,0)")));
    m_metricZ->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    #if wxVERSION_NUMBER >= 3000
    m_metricZ->SetHint(wxT(""));
    #endif
    
    flexGridSizer78942->Add(m_metricZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_maxManuallyZSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_maxManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_maxManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_maxManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxManuallyZSlider->SetFont(m_maxManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_maxManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_maxManuallyZSlider->SetMinSize(wxSize(30,26));
    
    m_zeroManuallyZSlider = new wxButton(m_mainBookManual, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(26,26)), 0);
    m_zeroManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_zeroManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_zeroManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zeroManuallyZSlider->SetFont(m_zeroManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_zeroManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_zeroManuallyZSlider->SetMinSize(wxSize(26,26));
    
    m_signManuallyZSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+/-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_signManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_signManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_signManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_signManuallyZSlider->SetFont(m_signManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_signManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_signManuallyZSlider->SetMinSize(wxSize(30,26));
    
    m_mmUnitZ = new wxStaticText(m_mainBookManual, wxID_ANY, _("<unit>"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer78942->Add(m_mmUnitZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_zManuallySlider = new wxSlider(m_mainBookManual, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxSL_SELRANGE|wxSL_LABELS|wxSL_HORIZONTAL);
    
    flexGridSizer15911->Add(m_zManuallySlider, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticLine5135 = new wxStaticLine(m_mainBookManual, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer15911->Add(m_staticLine5135, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_mainBookTest = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookTest, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer2205 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2205->SetFlexibleDirection( wxBOTH );
    flexGridSizer2205->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2205->AddGrowableCol(0);
    flexGridSizer2205->AddGrowableRow(0);
    m_mainBookTest->SetSizer(flexGridSizer2205);
    
    m_testCaseBook = new wxListbook(m_mainBookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookTest, wxSize(-1,-1)), wxLB_DEFAULT|wxBK_DEFAULT);
    m_testCaseBook->SetName(wxT("m_testCaseBook"));
    wxImageList* m_testCaseBook_il = new wxImageList(16, 16);
    m_testCaseBook->AssignImageList(m_testCaseBook_il);
    
    flexGridSizer2205->Add(m_testCaseBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testIntervalPage = new wxPanel(m_testCaseBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testCaseBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testIntervalPageImgIndex;
    m_testIntervalPageImgIndex = m_testCaseBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_testCaseBook->AddPage(m_testIntervalPage, _("Interval"), false, m_testIntervalPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer2089 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2089->SetFlexibleDirection( wxBOTH );
    flexGridSizer2089->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2089->AddGrowableCol(0);
    m_testIntervalPage->SetSizer(flexGridSizer2089);
    
    wxFlexGridSizer* flexGridSizer2157 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2157->SetFlexibleDirection( wxBOTH );
    flexGridSizer2157->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2157->AddGrowableCol(0);
    
    flexGridSizer2089->Add(flexGridSizer2157, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText2117 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Test::Interval Move:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    wxFont m_staticText2117Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText2117->SetFont(m_staticText2117Font);
    
    flexGridSizer2157->Add(m_staticText2117, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine2253 = new wxStaticLine(m_testIntervalPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2157->Add(m_staticLine2253, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxArrayString m_testIntervalModeArr;
    m_testIntervalModeArr.Add(wxT("A: loop(+/-x), loop(+/-y),loop(+/-z)"));
    m_testIntervalModeArr.Add(wxT("B: loop(+x,+y,+z) loop(-x,-y,-z)"));
    m_testIntervalModeArr.Add(wxT("C: loop(+/-x,y,z)"));
    m_testIntervalMode = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testIntervalModeArr, wxCB_READONLY);
    m_testIntervalMode->SetSelection(0);
    
    flexGridSizer2157->Add(m_testIntervalMode, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer2103 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer2103->SetFlexibleDirection( wxBOTH );
    flexGridSizer2103->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer2103, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText2105 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Axis"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2105, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2105->SetMinSize(wxSize(20,-1));
    
    m_staticText2107 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Count"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(65,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2107, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2107->SetMinSize(wxSize(65,-1));
    
    m_staticText2109 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Distance (+/-)"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(93,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2109, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2109->SetMinSize(wxSize(93,-1));
    
    m_staticText2149 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("First Direction"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(82,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2149, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2149->SetMinSize(wxSize(82,-1));
    
    m_staticText2115 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Mode"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(54,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2115, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2115->SetMinSize(wxSize(54,-1));
    
    m_staticText2165 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Counter"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2165, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine2111 = new wxStaticLine(m_testIntervalPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2089->Add(m_staticLine2111, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer2091 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer2091->SetFlexibleDirection( wxBOTH );
    flexGridSizer2091->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer2091, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testAxisX = new wxStaticText(m_testIntervalPage, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testAxisX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testAxisXFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testAxisXFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testAxisX->SetFont(m_testAxisXFont);
    
    flexGridSizer2091->Add(m_testAxisX, 0, wxALL, WXC_FROM_DIP(5));
    m_testAxisX->SetMinSize(wxSize(20,-1));
    
    m_testCountX = new wxSpinCtrl(m_testIntervalPage, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxSP_ARROW_KEYS);
    m_testCountX->SetRange(0, 100);
    m_testCountX->SetValue(1);
    
    flexGridSizer2091->Add(m_testCountX, 0, wxALL, WXC_FROM_DIP(2));
    m_testCountX->SetMinSize(wxSize(70,-1));
    
    m_testDistanceX = new wxTextCtrl(m_testIntervalPage, wxID_ANY, wxT("10.000"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_testDistanceX->SetHint(wxT(""));
    #endif
    
    flexGridSizer2091->Add(m_testDistanceX, 0, wxALL, WXC_FROM_DIP(2));
    m_testDistanceX->SetMinSize(wxSize(70,-1));
    
    m_staticText2101 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer2091->Add(m_staticText2101, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_testFirstXArr;
    m_testFirstXArr.Add(wxT("First +"));
    m_testFirstXArr.Add(wxT("First -"));
    m_testFirstX = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testFirstXArr, wxCB_READONLY);
    m_testFirstX->SetSelection(0);
    
    flexGridSizer2091->Add(m_testFirstX, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText2151 = new wxStaticText(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(12,-1)), 0);
    
    flexGridSizer2091->Add(m_staticText2151, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testModeX = new wxCheckBox(m_testIntervalPage, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    m_testModeX->SetValue(true);
    
    flexGridSizer2091->Add(m_testModeX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDurationCounterX = new wxStaticText(m_testIntervalPage, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(40,-1)), wxALIGN_RIGHT);
    
    flexGridSizer2091->Add(m_testDurationCounterX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDurationCounterX->SetMinSize(wxSize(40,-1));
    
    wxFlexGridSizer* flexGridSizer209111 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer209111->SetFlexibleDirection( wxBOTH );
    flexGridSizer209111->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer209111, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testAxisY = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testAxisY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testAxisYFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testAxisYFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testAxisY->SetFont(m_testAxisYFont);
    
    flexGridSizer209111->Add(m_testAxisY, 0, wxALL, WXC_FROM_DIP(5));
    m_testAxisY->SetMinSize(wxSize(20,-1));
    
    m_testCountY = new wxSpinCtrl(m_testIntervalPage, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxSP_ARROW_KEYS);
    m_testCountY->SetRange(0, 100);
    m_testCountY->SetValue(1);
    
    flexGridSizer209111->Add(m_testCountY, 0, wxALL, WXC_FROM_DIP(2));
    m_testCountY->SetMinSize(wxSize(70,-1));
    
    m_testDistanceY = new wxTextCtrl(m_testIntervalPage, wxID_ANY, wxT("10.000"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_testDistanceY->SetHint(wxT(""));
    #endif
    
    flexGridSizer209111->Add(m_testDistanceY, 0, wxALL, WXC_FROM_DIP(2));
    m_testDistanceY->SetMinSize(wxSize(70,-1));
    
    m_staticText210115 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer209111->Add(m_staticText210115, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_testFirstYArr;
    m_testFirstYArr.Add(wxT("First +"));
    m_testFirstYArr.Add(wxT("First -"));
    m_testFirstY = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testFirstYArr, wxCB_READONLY);
    m_testFirstY->SetSelection(0);
    
    flexGridSizer209111->Add(m_testFirstY, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText215123 = new wxStaticText(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(12,-1)), 0);
    
    flexGridSizer209111->Add(m_staticText215123, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testModeY = new wxCheckBox(m_testIntervalPage, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    m_testModeY->SetValue(true);
    
    flexGridSizer209111->Add(m_testModeY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDurationCounterY = new wxStaticText(m_testIntervalPage, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(40,-1)), wxALIGN_RIGHT);
    
    flexGridSizer209111->Add(m_testDurationCounterY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDurationCounterY->SetMinSize(wxSize(40,-1));
    
    wxFlexGridSizer* flexGridSizer20911117 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer20911117->SetFlexibleDirection( wxBOTH );
    flexGridSizer20911117->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer20911117, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testAxisZ = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testAxisZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testAxisZFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testAxisZFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testAxisZ->SetFont(m_testAxisZFont);
    
    flexGridSizer20911117->Add(m_testAxisZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testAxisZ->SetMinSize(wxSize(20,-1));
    
    m_testCountZ = new wxSpinCtrl(m_testIntervalPage, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxSP_ARROW_KEYS);
    m_testCountZ->SetRange(0, 100);
    m_testCountZ->SetValue(1);
    
    flexGridSizer20911117->Add(m_testCountZ, 0, wxALL, WXC_FROM_DIP(2));
    m_testCountZ->SetMinSize(wxSize(70,-1));
    
    m_testDistanceZ = new wxTextCtrl(m_testIntervalPage, wxID_ANY, wxT("10.000"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_testDistanceZ->SetHint(wxT(""));
    #endif
    
    flexGridSizer20911117->Add(m_testDistanceZ, 0, wxALL, WXC_FROM_DIP(2));
    m_testDistanceZ->SetMinSize(wxSize(70,-1));
    
    m_staticText21011521 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer20911117->Add(m_staticText21011521, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_testFirstZArr;
    m_testFirstZArr.Add(wxT("First +"));
    m_testFirstZArr.Add(wxT("First -"));
    m_testFirstZ = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testFirstZArr, wxCB_READONLY);
    m_testFirstZ->SetSelection(0);
    
    flexGridSizer20911117->Add(m_testFirstZ, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText215124 = new wxStaticText(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(12,-1)), 0);
    
    flexGridSizer20911117->Add(m_staticText215124, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testModeZ = new wxCheckBox(m_testIntervalPage, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    m_testModeZ->SetValue(true);
    
    flexGridSizer20911117->Add(m_testModeZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDurationCounterZ = new wxStaticText(m_testIntervalPage, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(40,-1)), wxALIGN_RIGHT);
    
    flexGridSizer20911117->Add(m_testDurationCounterZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDurationCounterZ->SetMinSize(wxSize(40,-1));
    
    m_testDimensions = new wxPanel(m_testCaseBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testCaseBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testDimensionsImgIndex;
    m_testDimensionsImgIndex = m_testCaseBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_testCaseBook->AddPage(m_testDimensions, _("Dimensions"), false, m_testDimensionsImgIndex);
    
    wxFlexGridSizer* flexGridSizer2319 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2319->SetFlexibleDirection( wxBOTH );
    flexGridSizer2319->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2319->AddGrowableCol(0);
    m_testDimensions->SetSizer(flexGridSizer2319);
    
    wxFlexGridSizer* flexGridSizer21573 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer21573->SetFlexibleDirection( wxBOTH );
    flexGridSizer21573->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21573->AddGrowableCol(0);
    
    flexGridSizer2319->Add(flexGridSizer21573, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText21174 = new wxStaticText(m_testDimensions, wxID_ANY, _("Test::Meassure max Dimensions:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    wxFont m_staticText21174Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText21174->SetFont(m_staticText21174Font);
    
    flexGridSizer21573->Add(m_staticText21174, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine22535 = new wxStaticLine(m_testDimensions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer21573->Add(m_staticLine22535, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer2375 = new wxFlexGridSizer(0, 6, 0, 0);
    flexGridSizer2375->SetFlexibleDirection( wxBOTH );
    flexGridSizer2375->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2375->AddGrowableCol(5);
    
    flexGridSizer2319->Add(flexGridSizer2375, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText2377 = new wxStaticText(m_testDimensions, wxID_ANY, _("Axis"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2377, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText2418 = new wxStaticText(m_testDimensions, wxID_ANY, _("Mode"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(54,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2418, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2418->SetMinSize(wxSize(54,-1));
    
    m_staticText2381 = new wxStaticText(m_testDimensions, wxID_ANY, _("Min reached"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2381, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2381->SetMinSize(wxSize(90,-1));
    
    m_staticText2379 = new wxStaticText(m_testDimensions, wxID_ANY, _("Max reached"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2379, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2379->SetMinSize(wxSize(90,-1));
    
    m_staticText2383 = new wxStaticText(m_testDimensions, wxID_ANY, _("Result Value"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(120,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2383, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2383->SetMinSize(wxSize(190,-1));
    
    m_staticLine2385 = new wxStaticLine(m_testDimensions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2319->Add(m_staticLine2385, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer2363 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer2363->SetFlexibleDirection( wxBOTH );
    flexGridSizer2363->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2363->AddGrowableCol(7);
    
    flexGridSizer2319->Add(flexGridSizer2363, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimAxisX = new wxStaticText(m_testDimensions, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testDimAxisX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testDimAxisXFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testDimAxisXFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testDimAxisX->SetFont(m_testDimAxisXFont);
    
    flexGridSizer2363->Add(m_testDimAxisX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimAxisX->SetMinSize(wxSize(20,-1));
    
    m_testDimModeX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimModeX->SetValue(true);
    
    flexGridSizer2363->Add(m_testDimModeX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimMinX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMinX->SetValue(false);
    m_testDimMinX->Enable(false);
    
    flexGridSizer2363->Add(m_testDimMinX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMinX->SetMinSize(wxSize(90,-1));
    
    m_testDimMaxX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMaxX->SetValue(false);
    m_testDimMaxX->Enable(false);
    
    flexGridSizer2363->Add(m_testDimMaxX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMaxX->SetMinSize(wxSize(90,-1));
    
    m_testDimResultX = new wxTextCtrl(m_testDimensions, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_testDimResultX->SetHint(wxT(""));
    #endif
    
    flexGridSizer2363->Add(m_testDimResultX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText2431 = new wxStaticText(m_testDimensions, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2363->Add(m_staticText2431, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimResultStateX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimResultStateX->SetValue(false);
    m_testDimResultStateX->Enable(false);
    
    flexGridSizer2363->Add(m_testDimResultStateX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimTakeX = new wxButton(m_testDimensions, wxID_ANY, _("Take over X"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeX->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    m_testDimTakeX->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer2363->Add(m_testDimTakeX, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer23631 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer23631->SetFlexibleDirection( wxBOTH );
    flexGridSizer23631->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer23631->AddGrowableCol(7);
    
    flexGridSizer2319->Add(flexGridSizer23631, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimAxisY = new wxStaticText(m_testDimensions, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testDimAxisY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testDimAxisYFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testDimAxisYFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testDimAxisY->SetFont(m_testDimAxisYFont);
    
    flexGridSizer23631->Add(m_testDimAxisY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimAxisY->SetMinSize(wxSize(20,-1));
    
    m_testDimModeY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimModeY->SetValue(true);
    
    flexGridSizer23631->Add(m_testDimModeY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimMinY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMinY->SetValue(false);
    m_testDimMinY->Enable(false);
    
    flexGridSizer23631->Add(m_testDimMinY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMinY->SetMinSize(wxSize(90,-1));
    
    m_testDimMaxY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMaxY->SetValue(false);
    m_testDimMaxY->Enable(false);
    
    flexGridSizer23631->Add(m_testDimMaxY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMaxY->SetMinSize(wxSize(90,-1));
    
    m_testDimResultY = new wxTextCtrl(m_testDimensions, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_testDimResultY->SetHint(wxT(""));
    #endif
    
    flexGridSizer23631->Add(m_testDimResultY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_testDimUnitX6 = new wxStaticText(m_testDimensions, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer23631->Add(m_testDimUnitX6, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimResultStateY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimResultStateY->SetValue(false);
    m_testDimResultStateY->Enable(false);
    
    flexGridSizer23631->Add(m_testDimResultStateY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimTakeY = new wxButton(m_testDimensions, wxID_ANY, _("Take over Y"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeY->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    m_testDimTakeY->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer23631->Add(m_testDimTakeY, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer23637 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer23637->SetFlexibleDirection( wxBOTH );
    flexGridSizer23637->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer23637->AddGrowableCol(7);
    
    flexGridSizer2319->Add(flexGridSizer23637, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimAxisZ = new wxStaticText(m_testDimensions, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testDimAxisZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testDimAxisZFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testDimAxisZFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testDimAxisZ->SetFont(m_testDimAxisZFont);
    
    flexGridSizer23637->Add(m_testDimAxisZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimAxisZ->SetMinSize(wxSize(20,-1));
    
    m_testDimModeZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimModeZ->SetValue(true);
    
    flexGridSizer23637->Add(m_testDimModeZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimMinZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMinZ->SetValue(false);
    m_testDimMinZ->Enable(false);
    
    flexGridSizer23637->Add(m_testDimMinZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMinZ->SetMinSize(wxSize(90,-1));
    
    m_testDimMaxZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMaxZ->SetValue(false);
    m_testDimMaxZ->Enable(false);
    
    flexGridSizer23637->Add(m_testDimMaxZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMaxZ->SetMinSize(wxSize(90,-1));
    
    m_testDimResultZ = new wxTextCtrl(m_testDimensions, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_testDimResultZ->SetHint(wxT(""));
    #endif
    
    flexGridSizer23637->Add(m_testDimResultZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_testDimUnitX12 = new wxStaticText(m_testDimensions, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer23637->Add(m_testDimUnitX12, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimResultStateZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimResultStateZ->SetValue(false);
    m_testDimResultStateZ->Enable(false);
    
    flexGridSizer23637->Add(m_testDimResultStateZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimTakeZ = new wxButton(m_testDimensions, wxID_ANY, _("Take over Z"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeZ->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    m_testDimTakeZ->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer23637->Add(m_testDimTakeZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticLine2429 = new wxStaticLine(m_testDimensions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2319->Add(m_staticLine2429, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimTakeAll = new wxButton(m_testDimensions, wxID_ANY, _("Take over All"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeAll->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_testDimTakeAll->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_testDimTakeAll->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer2319->Add(m_testDimTakeAll, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_testLimitPage = new wxPanel(m_testCaseBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testCaseBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testLimitPageImgIndex;
    m_testLimitPageImgIndex = m_testCaseBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_testCaseBook->AddPage(m_testLimitPage, _("Limit"), false, m_testLimitPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer2249 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2249->SetFlexibleDirection( wxBOTH );
    flexGridSizer2249->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2249->AddGrowableCol(0);
    flexGridSizer2249->AddGrowableRow(1);
    m_testLimitPage->SetSizer(flexGridSizer2249);
    
    wxFlexGridSizer* flexGridSizer21571 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer21571->SetFlexibleDirection( wxBOTH );
    flexGridSizer21571->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21571->AddGrowableCol(0);
    flexGridSizer21571->AddGrowableRow(0);
    
    flexGridSizer2249->Add(flexGridSizer21571, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText21172 = new wxStaticText(m_testLimitPage, wxID_ANY, _("Test::Evaluate End Switch States:"), wxDefaultPosition, wxDLG_UNIT(m_testLimitPage, wxSize(-1,-1)), 0);
    wxFont m_staticText21172Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText21172->SetFont(m_staticText21172Font);
    
    flexGridSizer21571->Add(m_staticText21172, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine22533 = new wxStaticLine(m_testLimitPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testLimitPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer21571->Add(m_staticLine22533, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer2269 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2269->SetFlexibleDirection( wxBOTH );
    flexGridSizer2269->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2269->AddGrowableCol(0);
    flexGridSizer2269->AddGrowableRow(0);
    
    flexGridSizer2249->Add(flexGridSizer2269, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testToggleEndSwitch = new wxToggleButton(m_testLimitPage, wxID_ANY, _("Start End Switch Evaluation"), wxDefaultPosition, wxDLG_UNIT(m_testLimitPage, wxSize(-1,-1)), 0);
    m_testToggleEndSwitch->SetBackgroundColour(wxColour(wxT("rgb(0,128,0)")));
    m_testToggleEndSwitch->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_testToggleEndSwitchFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_testToggleEndSwitch->SetFont(m_testToggleEndSwitchFont);
    m_testToggleEndSwitch->SetValue(false);
    
    flexGridSizer2269->Add(m_testToggleEndSwitch, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testToolPage = new wxPanel(m_testCaseBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testCaseBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testToolPageImgIndex;
    m_testToolPageImgIndex = m_testCaseBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_testCaseBook->AddPage(m_testToolPage, _("Tool"), false, m_testToolPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer2251 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2251->SetFlexibleDirection( wxBOTH );
    flexGridSizer2251->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2251->AddGrowableCol(0);
    flexGridSizer2251->AddGrowableRow(1);
    m_testToolPage->SetSizer(flexGridSizer2251);
    
    wxFlexGridSizer* flexGridSizer215715 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer215715->SetFlexibleDirection( wxBOTH );
    flexGridSizer215715->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer215715->AddGrowableCol(0);
    
    flexGridSizer2251->Add(flexGridSizer215715, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText211726 = new wxStaticText(m_testToolPage, wxID_ANY, _("Test::Running Tool:"), wxDefaultPosition, wxDLG_UNIT(m_testToolPage, wxSize(-1,-1)), 0);
    wxFont m_staticText211726Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText211726->SetFont(m_staticText211726Font);
    
    flexGridSizer215715->Add(m_staticText211726, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine225337 = new wxStaticLine(m_testToolPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testToolPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer215715->Add(m_staticLine225337, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer2275 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2275->SetFlexibleDirection( wxBOTH );
    flexGridSizer2275->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2275->AddGrowableCol(0);
    flexGridSizer2275->AddGrowableRow(0);
    
    flexGridSizer2251->Add(flexGridSizer2275, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testToggleTool = new wxToggleButton(m_testToolPage, wxID_ANY, _("Switch Tool On"), wxDefaultPosition, wxDLG_UNIT(m_testToolPage, wxSize(-1,-1)), 0);
    m_testToggleTool->SetBackgroundColour(wxColour(wxT("rgb(255,128,128)")));
    m_testToggleTool->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_testToggleToolFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_testToggleTool->SetFont(m_testToggleToolFont);
    m_testToggleTool->SetValue(false);
    
    flexGridSizer2275->Add(m_testToggleTool, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_mainBookPreviewPanel = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookPreviewPanel, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer3892 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3892->SetFlexibleDirection( wxBOTH );
    flexGridSizer3892->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3892->AddGrowableCol(0);
    flexGridSizer3892->AddGrowableRow(0);
    m_mainBookPreviewPanel->SetSizer(flexGridSizer3892);
    
    m_filePreviewPlaceholder = new wxPanel(m_mainBookPreviewPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookPreviewPanel, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_filePreviewPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_filePreviewPlaceholder->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer3892->Add(m_filePreviewPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel4398 = new wxPanel(m_mainBookPreviewPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookPreviewPanel, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panel4398->SetBackgroundColour(wxColour(wxT("rgb(0,64,128)")));
    
    flexGridSizer3892->Add(m_panel4398, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4400 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4400->SetFlexibleDirection( wxBOTH );
    flexGridSizer4400->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4400->AddGrowableCol(1);
    flexGridSizer4400->AddGrowableRow(0);
    m_panel4398->SetSizer(flexGridSizer4400);
    
    m_staticText4402 = new wxStaticText(m_panel4398, wxID_ANY, _("File Manager Preview . . ."), wxDefaultPosition, wxDLG_UNIT(m_panel4398, wxSize(-1,-1)), 0);
    m_staticText4402->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_staticText4402Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText4402->SetFont(m_staticText4402Font);
    
    flexGridSizer4400->Add(m_staticText4402, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer6169 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer6169->SetFlexibleDirection( wxBOTH );
    flexGridSizer6169->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6169->AddGrowableCol(0);
    flexGridSizer6169->AddGrowableCol(1);
    flexGridSizer6169->AddGrowableRow(0);
    
    flexGridSizer4400->Add(flexGridSizer6169, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel6173 = new wxPanel(m_panel4398, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel4398, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    flexGridSizer6169->Add(m_panel6173, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_filePreviewDetails = new wxTextCtrl(m_panel4398, wxID_ANY, wxT("Date\nSize"), wxDefaultPosition, wxDLG_UNIT(m_panel4398, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxTE_MULTILINE|wxBORDER_NONE);
    m_filePreviewDetails->SetBackgroundColour(wxColour(wxT("rgb(0,64,128)")));
    m_filePreviewDetails->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_filePreviewDetailsFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_filePreviewDetails->SetFont(m_filePreviewDetailsFont);
    
    flexGridSizer6169->Add(m_filePreviewDetails, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_currentFileMangerPreviewFileName = new wxTextCtrl(m_mainBookPreviewPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookPreviewPanel, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_currentFileMangerPreviewFileName->SetHint(wxT(""));
    #endif
    
    flexGridSizer3892->Add(m_currentFileMangerPreviewFileName, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelZView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(40,-1)), wxTAB_TRAVERSAL);
    m_panelZView->SetBackgroundColour(wxColour(wxT("rgb(255,128,64)")));
    
    m_auimgrMain->AddPane(m_panelZView, wxAuiPaneInfo().Name(wxT("ZView")).Caption(_("Z Axis")).Direction(wxAUI_DOCK_RIGHT).Layer(0).Row(1).Position(0).BestSize(40,100).MinSize(40,100).MaxSize(40,100).Fixed().CaptionVisible(true).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false));
    
    wxFlexGridSizer* flexGridSizer4571 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4571->SetFlexibleDirection( wxBOTH );
    flexGridSizer4571->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4571->AddGrowableCol(0);
    flexGridSizer4571->AddGrowableRow(0);
    m_panelZView->SetSizer(flexGridSizer4571);
    
    wxFlexGridSizer* flexGridSizer3488 = new wxFlexGridSizer(8, 1, 0, 0);
    flexGridSizer3488->SetFlexibleDirection( wxBOTH );
    flexGridSizer3488->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3488->AddGrowableCol(0);
    flexGridSizer3488->AddGrowableRow(0);
    
    flexGridSizer4571->Add(flexGridSizer3488, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_zView = new CncZView(m_panelZView, wxID_ANY);
    flexGridSizer3488->Add(m_zView, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_zView->SetMinSize(wxSize(32,-1));
    
    m_infoToolDiameter = new wxStaticText(m_panelZView, wxID_ANY, _("0.0"), wxDefaultPosition, wxDLG_UNIT(m_panelZView, wxSize(-1,-1)), 0);
    m_infoToolDiameter->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_infoToolDiameterFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_infoToolDiameter->SetFont(m_infoToolDiameterFont);
    m_infoToolDiameter->SetToolTip(_("Tool Diameter [mm]"));
    
    flexGridSizer3488->Add(m_infoToolDiameter, 0, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(0));
    
    flexGridSizer3488->Add(0, 1, 1, wxALL, WXC_FROM_DIP(0));
    
    m_winFileView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_winFileView, wxAuiPaneInfo().Name(wxT("TemplateManager")).Caption(_("Cnc File Manager")).Direction(wxAUI_DOCK_LEFT).Layer(0).Row(0).Position(0).BestSize(160,100).MinSize(100,100).MaxSize(100,100).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    
    wxFlexGridSizer* flexGridSizer1628 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1628->SetFlexibleDirection( wxBOTH );
    flexGridSizer1628->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1628->AddGrowableCol(0);
    flexGridSizer1628->AddGrowableRow(2);
    m_winFileView->SetSizer(flexGridSizer1628);
    
    wxFlexGridSizer* flexGridSizer6016 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer6016->SetFlexibleDirection( wxBOTH );
    flexGridSizer6016->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6016->AddGrowableCol(1);
    flexGridSizer6016->AddGrowableRow(0);
    
    flexGridSizer1628->Add(flexGridSizer6016, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_keepFileManagerPreview = new wxCheckBox(m_winFileView, wxID_ANY, _("Keep Preview"), wxDefaultPosition, wxDLG_UNIT(m_winFileView, wxSize(-1,-1)), 0);
    m_keepFileManagerPreview->SetValue(false);
    wxFont m_keepFileManagerPreviewFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_keepFileManagerPreview->SetFont(m_keepFileManagerPreviewFont);
    m_keepFileManagerPreview->SetToolTip(_("Keep the Template Manager Preview\nafter the control is leaved"));
    
    flexGridSizer6016->Add(m_keepFileManagerPreview, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticText6018 = new wxStaticText(m_winFileView, wxID_ANY, _(" + CTRL"), wxDefaultPosition, wxDLG_UNIT(m_winFileView, wxSize(-1,-1)), 0);
    m_staticText6018->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText6018Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6018->SetFont(m_staticText6018Font);
    
    flexGridSizer6016->Add(m_staticText6018, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticLine4345 = new wxStaticLine(m_winFileView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_winFileView, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1628->Add(m_staticLine4345, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_splitter6478 = new wxSplitterWindow(m_winFileView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_winFileView, wxSize(-1,-1)), wxSP_3D);
    m_splitter6478->SetSashGravity(0.5);
    m_splitter6478->SetMinimumPaneSize(10);
    
    flexGridSizer1628->Add(m_splitter6478, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitterPage6482 = new wxPanel(m_splitter6478, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter6478, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer6494 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6494->SetFlexibleDirection( wxBOTH );
    flexGridSizer6494->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6494->AddGrowableCol(0);
    flexGridSizer6494->AddGrowableRow(0);
    m_splitterPage6482->SetSizer(flexGridSizer6494);
    
    m_lruList = new wxListCtrl(m_splitterPage6482, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage6482, wxSize(-1,-1)), wxLC_SINGLE_SEL|wxLC_REPORT);
    
    flexGridSizer6494->Add(m_lruList, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_splitterPage6490 = new wxPanel(m_splitter6478, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter6478, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitter6478->SplitHorizontally(m_splitterPage6482, m_splitterPage6490, 0);
    
    wxFlexGridSizer* flexGridSizer6492 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6492->SetFlexibleDirection( wxBOTH );
    flexGridSizer6492->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6492->AddGrowableCol(0);
    flexGridSizer6492->AddGrowableRow(0);
    m_splitterPage6490->SetSizer(flexGridSizer6492);
    
    m_mainFileViewPlaceholder = new wxPanel(m_splitterPage6490, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage6490, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainFileViewPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_mainFileViewPlaceholder->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer6492->Add(m_mainFileViewPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_winMonitorView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_winMonitorView->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    
    m_auimgrMain->AddPane(m_winMonitorView, wxAuiPaneInfo().Name(wxT("Outbound")).Caption(_("CNC Monitor")).Direction(wxAUI_DOCK_CENTER).Layer(0).Row(2).Position(0).BestSize(200,200).MinSize(10,10).MaxSize(200,200).CaptionVisible(true).MaximizeButton(true).CloseButton(false).MinimizeButton(true).PinButton(false));
    
    wxFlexGridSizer* flexGridSizer4348 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4348->SetFlexibleDirection( wxBOTH );
    flexGridSizer4348->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4348->AddGrowableCol(0);
    flexGridSizer4348->AddGrowableRow(1);
    m_winMonitorView->SetSizer(flexGridSizer4348);
    
    wxArrayString m_monitorViewSelectorArr;
    m_monitorViewSelectorArr.Add(wxT("CNC Monitor"));
    m_monitorViewSelectorArr.Add(wxT("Template Preview"));
    m_monitorViewSelector = new wxChoice(m_winMonitorView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_winMonitorView, wxSize(-1,-1)), m_monitorViewSelectorArr, wxBORDER_NONE);
    wxFont m_monitorViewSelectorFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_monitorViewSelector->SetFont(m_monitorViewSelectorFont);
    m_monitorViewSelector->Hide();
    m_monitorViewSelector->SetSelection(0);
    
    flexGridSizer4348->Add(m_monitorViewSelector, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_monitorViewBook = new wxSimplebook(m_winMonitorView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_winMonitorView, wxSize(-1,-1)), wxBK_DEFAULT);
    m_monitorViewBook->SetName(wxT("m_monitorViewBook"));
    m_monitorViewBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer4348->Add(m_monitorViewBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_monitorBookCncPanel = new wxPanel(m_monitorViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_monitorViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_monitorViewBook->AddPage(m_monitorBookCncPanel, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer649 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer649->SetFlexibleDirection( wxBOTH );
    flexGridSizer649->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer649->AddGrowableCol(0);
    flexGridSizer649->AddGrowableRow(0);
    m_monitorBookCncPanel->SetSizer(flexGridSizer649);
    
    m_outboundNotebook = new wxNotebook(m_monitorBookCncPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_monitorBookCncPanel, wxSize(-1,-1)), wxBK_DEFAULT);
    m_outboundNotebook->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_outboundNotebook->SetName(wxT("m_outboundNotebook"));
    wxImageList* m_outboundNotebook_il = new wxImageList(16, 16);
    m_outboundNotebook->AssignImageList(m_outboundNotebook_il);
    
    flexGridSizer649->Add(m_outboundNotebook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_cncParameters = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_cncParametersImgIndex;
    m_cncParametersImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("brick-go1")));
    m_outboundNotebook->AddPage(m_cncParameters, _("CNC Values"), false, m_cncParametersImgIndex);
    
    wxFlexGridSizer* flexGridSizer1076 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer1076->SetFlexibleDirection( wxBOTH );
    flexGridSizer1076->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1076->AddGrowableCol(0);
    flexGridSizer1076->AddGrowableRow(0);
    m_cncParameters->SetSizer(flexGridSizer1076);
    
    m_notebookConfig = new wxListbook(m_cncParameters, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncParameters, wxSize(-1,-1)), wxLB_DEFAULT|wxBK_DEFAULT);
    m_notebookConfig->SetName(wxT("m_notebookConfig"));
    wxImageList* m_notebookConfig_il = new wxImageList(16, 16);
    m_notebookConfig->AssignImageList(m_notebookConfig_il);
    
    flexGridSizer1076->Add(m_notebookConfig, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_cncSummary = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_cncSummaryImgIndex;
    m_cncSummaryImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-database")));
    m_notebookConfig->AddPage(m_cncSummary, _("Summary"), true, m_cncSummaryImgIndex);
    
    wxFlexGridSizer* flexGridSizer2603 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer2603->SetFlexibleDirection( wxBOTH );
    flexGridSizer2603->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2603->AddGrowableCol(0);
    flexGridSizer2603->AddGrowableRow(2);
    m_cncSummary->SetSizer(flexGridSizer2603);
    
    m_staticText11481 = new wxStaticText(m_cncSummary, wxID_ANY, _("Configuration Summary:"), wxDefaultPosition, wxDLG_UNIT(m_cncSummary, wxSize(-1,-1)), 0);
    wxFont m_staticText11481Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText11481->SetFont(m_staticText11481Font);
    
    flexGridSizer2603->Add(m_staticText11481, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer2603->Add(0, 8, 1, wxALL, WXC_FROM_DIP(0));
    
    m_cncSummaryListCtrl = new wxListCtrl(m_cncSummary, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncSummary, wxSize(-1,-1)), wxLC_VIRTUAL|wxLC_REPORT);
    m_cncSummaryListCtrl->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_cncSummaryListCtrl->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer2603->Add(m_cncSummaryListCtrl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer2609 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2609->SetFlexibleDirection( wxBOTH );
    flexGridSizer2609->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2609->AddGrowableCol(0);
    flexGridSizer2609->AddGrowableRow(0);
    
    flexGridSizer2603->Add(flexGridSizer2609, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btCancelRun = new wxButton(m_cncSummary, wxID_ANY, _("Cancel Run"), wxDefaultPosition, wxDLG_UNIT(m_cncSummary, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btCancelRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-execute_stop")), wxLEFT);
    m_btCancelRun->SetBitmapMargins(2,2);
    #endif
    m_btCancelRun->Enable(false);
    
    flexGridSizer2609->Add(m_btCancelRun, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    
    m_btConfirmRun = new wxButton(m_cncSummary, wxID_ANY, _("Confirm Run"), wxDefaultPosition, wxDLG_UNIT(m_cncSummary, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btConfirmRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-ok")), wxLEFT);
    m_btConfirmRun->SetBitmapMargins(2,2);
    #endif
    m_btConfirmRun->Enable(false);
    
    flexGridSizer2609->Add(m_btConfirmRun, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    
    m_cncSetters = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_cncSettersImgIndex;
    m_cncSettersImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-struct")));
    m_notebookConfig->AddPage(m_cncSetters, _("CNC Setter"), false, m_cncSettersImgIndex);
    
    wxFlexGridSizer* flexGridSizer1142 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1142->SetFlexibleDirection( wxBOTH );
    flexGridSizer1142->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1142->AddGrowableCol(0);
    flexGridSizer1142->AddGrowableRow(1);
    m_cncSetters->SetSizer(flexGridSizer1142);
    
    wxFlexGridSizer* flexGridSizer4691 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer4691->SetFlexibleDirection( wxBOTH );
    flexGridSizer4691->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4691->AddGrowableCol(0);
    flexGridSizer4691->AddGrowableRow(0);
    
    flexGridSizer1142->Add(flexGridSizer4691, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1150 = new wxStaticText(m_cncSetters, wxID_ANY, _("Processed Setter Values:"), wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), 0);
    wxFont m_staticText1150Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1150->SetFont(m_staticText1150Font);
    
    flexGridSizer4691->Add(m_staticText1150, 0, wxALL, WXC_FROM_DIP(5));
    
    m_setterListCount = new wxTextCtrl(m_cncSetters, wxID_ANY, wxT("# 0"), wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_setterListCount->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_MENU));
    m_setterListCount->SetForegroundColour(wxColour(wxT("rgb(0,0,64)")));
    wxFont m_setterListCountFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_setterListCount->SetFont(m_setterListCountFont);
    #if wxVERSION_NUMBER >= 3000
    m_setterListCount->SetHint(wxT(""));
    #endif
    
    flexGridSizer4691->Add(m_setterListCount, 0, wxALL, WXC_FROM_DIP(7));
    
    m_btClearSetterList = new wxButton(m_cncSetters, wxID_ANY, _("Clear"), wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClearSetterList->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btClearSetterList->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4691->Add(m_btClearSetterList, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_btRefreshSetterList = new wxButton(m_cncSetters, wxID_ANY, _("Refresh"), wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btRefreshSetterList->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_btRefreshSetterList->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4691->Add(m_btRefreshSetterList, 0, wxALL, WXC_FROM_DIP(1));
    
    m_setterList = new wxListCtrl(m_cncSetters, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), wxLC_REPORT);
    m_setterList->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer1142->Add(m_setterList, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_controllerConfiguration = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_controllerConfigurationImgIndex;
    m_controllerConfigurationImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-member_public")));
    m_notebookConfig->AddPage(m_controllerConfiguration, _("Ctrl Config"), false, m_controllerConfigurationImgIndex);
    
    wxFlexGridSizer* flexGridSizer1306 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1306->SetFlexibleDirection( wxBOTH );
    flexGridSizer1306->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1306->AddGrowableCol(0);
    flexGridSizer1306->AddGrowableRow(1);
    m_controllerConfiguration->SetSizer(flexGridSizer1306);
    
    wxFlexGridSizer* flexGridSizer1311 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer1311->SetFlexibleDirection( wxBOTH );
    flexGridSizer1311->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1311->AddGrowableCol(0);
    flexGridSizer1311->AddGrowableRow(0);
    
    flexGridSizer1306->Add(flexGridSizer1311, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText12831 = new wxStaticText(m_controllerConfiguration, wxID_ANY, _("Requested Controller Config:"), wxDefaultPosition, wxDLG_UNIT(m_controllerConfiguration, wxSize(-1,-1)), 0);
    wxFont m_staticText12831Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText12831->SetFont(m_staticText12831Font);
    
    flexGridSizer1311->Add(m_staticText12831, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btRequestCtlConfig = new wxButton(m_controllerConfiguration, wxID_ANY, _("Request"), wxDefaultPosition, wxDLG_UNIT(m_controllerConfiguration, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btRequestCtlConfig->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_btRequestCtlConfig->SetBitmapMargins(2,2);
    #endif
    m_btRequestCtlConfig->SetToolTip(_("Request Controller Configuration"));
    
    flexGridSizer1311->Add(m_btRequestCtlConfig, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerConfig = new wxDataViewListCtrl(m_controllerConfiguration, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_controllerConfiguration, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlControllerConfig->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_dvListCtrlControllerConfigFont(8, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("wxT(\"Segoe UI\")"));
    m_dvListCtrlControllerConfig->SetFont(m_dvListCtrlControllerConfigFont);
    
    flexGridSizer1306->Add(m_dvListCtrlControllerConfig, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerConfig->AppendTextColumn(_("PID"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_RIGHT);
    m_dvListCtrlControllerConfig->AppendTextColumn(_("Key1"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerConfig->AppendTextColumn(_("Unit"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerConfig->AppendTextColumn(_("Value2"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_controllerPinReport = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    wxFont m_controllerPinReportFont(8, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("wxT(\"Segoe UI\")"));
    m_controllerPinReport->SetFont(m_controllerPinReportFont);
    m_controllerPinReport->SetToolTip(_("Request Controller Pin Report"));
    int m_controllerPinReportImgIndex;
    m_controllerPinReportImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-ToolPin")));
    m_notebookConfig->AddPage(m_controllerPinReport, _("Ctrl Pin Report"), false, m_controllerPinReportImgIndex);
    
    wxFlexGridSizer* flexGridSizer13061 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer13061->SetFlexibleDirection( wxBOTH );
    flexGridSizer13061->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer13061->AddGrowableCol(0);
    flexGridSizer13061->AddGrowableRow(1);
    m_controllerPinReport->SetSizer(flexGridSizer13061);
    
    wxFlexGridSizer* flexGridSizer13112 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer13112->SetFlexibleDirection( wxBOTH );
    flexGridSizer13112->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer13112->AddGrowableCol(0);
    
    flexGridSizer13061->Add(flexGridSizer13112, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText128313 = new wxStaticText(m_controllerPinReport, wxID_ANY, _("Conroller Pin Report:"), wxDefaultPosition, wxDLG_UNIT(m_controllerPinReport, wxSize(-1,-1)), 0);
    wxFont m_staticText128313Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText128313->SetFont(m_staticText128313Font);
    
    flexGridSizer13112->Add(m_staticText128313, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btRequestControllerPins = new wxButton(m_controllerPinReport, wxID_ANY, _("Request"), wxDefaultPosition, wxDLG_UNIT(m_controllerPinReport, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btRequestControllerPins->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_btRequestControllerPins->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer13112->Add(m_btRequestControllerPins, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerPins = new wxDataViewListCtrl(m_controllerPinReport, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_controllerPinReport, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlControllerPins->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer13061->Add(m_dvListCtrlControllerPins, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerPins->AppendTextColumn(_("PIN"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_RIGHT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Description"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Type"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Mode"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Value3"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_conrollerMessages = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_conrollerMessagesImgIndex;
    m_conrollerMessagesImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-archive")));
    m_notebookConfig->AddPage(m_conrollerMessages, _("Ctrl Messages"), false, m_conrollerMessagesImgIndex);
    
    wxFlexGridSizer* flexGridSizer2577 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2577->SetFlexibleDirection( wxBOTH );
    flexGridSizer2577->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2577->AddGrowableCol(0);
    flexGridSizer2577->AddGrowableRow(1);
    m_conrollerMessages->SetSizer(flexGridSizer2577);
    
    wxFlexGridSizer* flexGridSizer2586 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2586->SetFlexibleDirection( wxBOTH );
    flexGridSizer2586->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2586->AddGrowableCol(0);
    
    flexGridSizer2577->Add(flexGridSizer2586, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1283132 = new wxStaticText(m_conrollerMessages, wxID_ANY, _("Controller Message History:"), wxDefaultPosition, wxDLG_UNIT(m_conrollerMessages, wxSize(-1,-1)), 0);
    wxFont m_staticText1283132Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1283132->SetFont(m_staticText1283132Font);
    
    flexGridSizer2586->Add(m_staticText1283132, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btClearMsgHistory = new wxButton(m_conrollerMessages, wxID_ANY, _("Clear List"), wxDefaultPosition, wxDLG_UNIT(m_conrollerMessages, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClearMsgHistory->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btClearMsgHistory->SetBitmapMargins(2,2);
    #endif
    m_btClearMsgHistory->SetToolTip(_("Clear the Message Histroy"));
    
    flexGridSizer2586->Add(m_btClearMsgHistory, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_controllerMsgHistory = new wxTextCtrl(m_conrollerMessages, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_conrollerMessages, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxTE_DONTWRAP|wxHSCROLL|wxVSCROLL);
    m_controllerMsgHistory->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_controllerMsgHistoryFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_controllerMsgHistory->SetFont(m_controllerMsgHistoryFont);
    
    flexGridSizer2577->Add(m_controllerMsgHistory, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_cnc3DPane = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_cnc3DPaneImgIndex;
    m_cnc3DPaneImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("package-x-generic1")));
    m_outboundNotebook->AddPage(m_cnc3DPane, _("CNC Motion Monitor"), false, m_cnc3DPaneImgIndex);
    
    wxFlexGridSizer* flexGridSizer3486 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3486->SetFlexibleDirection( wxBOTH );
    flexGridSizer3486->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3486->AddGrowableCol(0);
    flexGridSizer3486->AddGrowableRow(0);
    m_cnc3DPane->SetSizer(flexGridSizer3486);
    
    wxFlexGridSizer* flexGridSizer3491 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3491->SetFlexibleDirection( wxBOTH );
    flexGridSizer3491->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3491->AddGrowableCol(0);
    flexGridSizer3491->AddGrowableRow(1);
    
    flexGridSizer3486->Add(flexGridSizer3491, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer3497 = new wxFlexGridSizer(1, 30, 0, 0);
    flexGridSizer3497->SetFlexibleDirection( wxBOTH );
    flexGridSizer3497->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3497->AddGrowableCol(0);
    flexGridSizer3497->AddGrowableRow(0);
    
    flexGridSizer3491->Add(flexGridSizer3497, 1, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_btSaveOutboundAsTemplate1 = new wxBitmapToggleButton(m_cnc3DPane, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    m_btSaveOutboundAsTemplate1->SetToolTip(_("Save current outbound as new Template"));
    m_btSaveOutboundAsTemplate1->SetValue(true);
    
    flexGridSizer3497->Add(m_btSaveOutboundAsTemplate1, 0, wxALL, WXC_FROM_DIP(0));
    m_btSaveOutboundAsTemplate1->SetMinSize(wxSize(24,24));
    
    wxFlexGridSizer* flexGridSizer4961 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4961->SetFlexibleDirection( wxBOTH );
    flexGridSizer4961->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4961->AddGrowableCol(0);
    flexGridSizer4961->AddGrowableRow(0);
    
    flexGridSizer3497->Add(flexGridSizer4961, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_placeholderPanel = new wxPanel(m_cnc3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(-1,24)), wxTAB_TRAVERSAL);
    m_placeholderPanel->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    
    flexGridSizer4961->Add(m_placeholderPanel, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(1));
    m_placeholderPanel->SetMinSize(wxSize(-1,24));
    
    flexGridSizer3497->Add(3, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer6853 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer6853->SetFlexibleDirection( wxBOTH );
    flexGridSizer6853->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3497->Add(flexGridSizer6853, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine50163 = new wxStaticLine(m_cnc3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer6853->Add(m_staticLine50163, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_btnOrigin = new wxBitmapToggleButton(m_cnc3DPane, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("snap-orto")), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    m_btnOrigin->SetToolTip(_("Toggle: Show Origin"));
    m_btnOrigin->SetValue(true);
    
    flexGridSizer6853->Add(m_btnOrigin, 0, wxALL, WXC_FROM_DIP(0));
    m_btnOrigin->SetMinSize(wxSize(24,24));
    
    m_btnRuler = new wxBitmapToggleButton(m_cnc3DPane, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ruler2")), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    m_btnRuler->SetToolTip(_("Toggle: Show Ruler"));
    m_btnRuler->SetValue(true);
    
    flexGridSizer6853->Add(m_btnRuler, 0, wxALL, WXC_FROM_DIP(0));
    m_btnRuler->SetMinSize(wxSize(24,24));
    
    m_btnHelpLines = new wxBitmapToggleButton(m_cnc3DPane, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("view-grid")), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    m_btnHelpLines->SetToolTip(_("Toggle: Show HelpLines"));
    m_btnHelpLines->SetValue(true);
    
    flexGridSizer6853->Add(m_btnHelpLines, 0, wxALL, WXC_FROM_DIP(0));
    m_btnHelpLines->SetMinSize(wxSize(24,24));
    
    m_btnBoundBox = new wxBitmapToggleButton(m_cnc3DPane, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("cube_green")), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    m_btnBoundBox->SetToolTip(_("Toggle: Show Boundbox"));
    m_btnBoundBox->SetValue(true);
    
    flexGridSizer6853->Add(m_btnBoundBox, 0, wxALL, WXC_FROM_DIP(0));
    m_btnBoundBox->SetMinSize(wxSize(24,24));
    
    m_btnPosMarker = new wxBitmapToggleButton(m_cnc3DPane, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-marker")), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    m_btnPosMarker->SetToolTip(_("Toggle: Show Position Marker"));
    m_btnPosMarker->SetValue(true);
    
    flexGridSizer6853->Add(m_btnPosMarker, 0, wxALL, WXC_FROM_DIP(0));
    m_btnPosMarker->SetMinSize(wxSize(24,24));
    
    m_btnFlyPath = new wxBitmapToggleButton(m_cnc3DPane, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("link_editor")), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    m_btnFlyPath->SetToolTip(_("Toggle: Show Fly Path"));
    m_btnFlyPath->SetValue(true);
    
    flexGridSizer6853->Add(m_btnFlyPath, 0, wxALL, WXC_FROM_DIP(0));
    m_btnFlyPath->SetMinSize(wxSize(24,24));
    
    flexGridSizer3497->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine5016 = new wxStaticLine(m_cnc3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3497->Add(m_staticLine5016, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_switchMonitoing = new wxBitmapToggleButton(m_cnc3DPane, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    m_switchMonitoing->SetToolTip(_("Switch Monitoring (normal/minimal)"));
    m_switchMonitoing->SetValue(true);
    
    flexGridSizer3497->Add(m_switchMonitoing, 0, wxALL, WXC_FROM_DIP(0));
    m_switchMonitoing->SetMinSize(wxSize(24,24));
    
    m_staticLine3525 = new wxStaticLine(m_cnc3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(-1,-1)), wxLI_VERTICAL|wxLI_HORIZONTAL);
    
    flexGridSizer3497->Add(m_staticLine3525, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_3D_Refreh = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Refreh->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_3D_Refreh->SetBitmapMargins(2,2);
    #endif
    m_3D_Refreh->SetToolTip(_("Refresh Motion Monitor"));
    
    flexGridSizer3497->Add(m_3D_Refreh, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Refreh->SetMinSize(wxSize(24,24));
    
    m_3D_Clear = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Clear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_3D_Clear->SetBitmapMargins(2,2);
    #endif
    m_3D_Clear->SetToolTip(_("Clear Motion Monitor"));
    
    flexGridSizer3497->Add(m_3D_Clear, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Clear->SetMinSize(wxSize(24,24));
    
    flexGridSizer3497->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine47803 = new wxStaticLine(m_cnc3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3497->Add(m_staticLine47803, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer3497->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    flexGridSizer3497->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText32334 = new wxStaticText(m_cnc3DPane, wxID_ANY, _("Display\nInterval [ms]:"), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(-1,-1)), 0);
    wxFont m_staticText32334Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_staticText32334->SetFont(m_staticText32334Font);
    
    flexGridSizer3497->Add(m_staticText32334, 0, wxALL, WXC_FROM_DIP(0));
    
    m_displayInterval = new wxSlider(m_cnc3DPane, wxID_ANY, 50, 0, 1000, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(60,-1)), wxSL_HORIZONTAL);
    
    flexGridSizer3497->Add(m_displayInterval, 0, wxALL, WXC_FROM_DIP(0));
    m_displayInterval->SetMinSize(wxSize(60,-1));
    
    wxFlexGridSizer* flexGridSizer2309 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2309->SetFlexibleDirection( wxBOTH );
    flexGridSizer2309->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2309->AddGrowableCol(0);
    flexGridSizer2309->AddGrowableRow(0);
    
    flexGridSizer3491->Add(flexGridSizer2309, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer7040 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer7040->SetFlexibleDirection( wxBOTH );
    flexGridSizer7040->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7040->AddGrowableCol(0);
    flexGridSizer7040->AddGrowableRow(0);
    
    flexGridSizer2309->Add(flexGridSizer7040, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_3DSplitterPlaceholder = new wxPanel(m_cnc3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_3DSplitterPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    
    flexGridSizer7040->Add(m_3DSplitterPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_3DOutboundStatistics = new wxPanel(m_cnc3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(-1,30)), wxTAB_TRAVERSAL);
    
    flexGridSizer7040->Add(m_3DOutboundStatistics, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4888 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4888->SetFlexibleDirection( wxBOTH );
    flexGridSizer4888->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4888->AddGrowableCol(0);
    flexGridSizer4888->AddGrowableRow(1);
    m_3DOutboundStatistics->SetSizer(flexGridSizer4888);
    
    wxFlexGridSizer* flexGridSizer7089 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer7089->SetFlexibleDirection( wxBOTH );
    flexGridSizer7089->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7089->AddGrowableCol(0);
    flexGridSizer7089->AddGrowableRow(1);
    
    flexGridSizer4888->Add(flexGridSizer7089, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticLine7091 = new wxStaticLine(m_3DOutboundStatistics, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer7089->Add(m_staticLine7091, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer4901 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer4901->SetFlexibleDirection( wxBOTH );
    flexGridSizer4901->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4901->AddGrowableCol(2);
    flexGridSizer4901->AddGrowableRow(0);
    
    flexGridSizer7089->Add(flexGridSizer4901, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4902 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer4902->SetFlexibleDirection( wxBOTH );
    flexGridSizer4902->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer4901->Add(flexGridSizer4902, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btShowHideStatistics = new wxButton(m_3DOutboundStatistics, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(20,20)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btShowHideStatistics->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("table-cell-merge")), wxLEFT);
    m_btShowHideStatistics->SetBitmapMargins(2,2);
    #endif
    m_btShowHideStatistics->SetToolTip(_("Show/Hide Monitor Statistics"));
    
    flexGridSizer4902->Add(m_btShowHideStatistics, 0, wxALL, WXC_FROM_DIP(1));
    m_btShowHideStatistics->SetMinSize(wxSize(20,20));
    
    m_btShowHideReplayPane = new wxButton(m_3DOutboundStatistics, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(20,20)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btShowHideReplayPane->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("system-run-4")), wxLEFT);
    m_btShowHideReplayPane->SetBitmapMargins(2,2);
    #endif
    m_btShowHideReplayPane->SetToolTip(_("Show/Hide Monitor Replay Panel"));
    
    flexGridSizer4902->Add(m_btShowHideReplayPane, 0, wxALL, WXC_FROM_DIP(1));
    m_btShowHideReplayPane->SetMinSize(wxSize(20,20));
    
    flexGridSizer4901->Add(10, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer3520 = new wxFlexGridSizer(1, 6, 0, 0);
    flexGridSizer3520->SetFlexibleDirection( wxBOTH );
    flexGridSizer3520->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer4901->Add(flexGridSizer3520, 1, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_staticLine50051 = new wxStaticLine(m_3DOutboundStatistics, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3520->Add(m_staticLine50051, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText5014 = new wxStaticText(m_3DOutboundStatistics, wxID_ANY, _("Status:"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), 0);
    wxFont m_staticText5014Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5014->SetFont(m_staticText5014Font);
    
    flexGridSizer3520->Add(m_staticText5014, 0, wxALL, WXC_FROM_DIP(5));
    
    m_lableWorkpieceThickness = new wxStaticBitmap(m_3DOutboundStatistics, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("distribute-vertical-equal")), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), 0 );
    m_lableWorkpieceThickness->SetToolTip(_("Workpiece thickness 0.000 mm"));
    
    flexGridSizer3520->Add(m_lableWorkpieceThickness, 0, wxALL, WXC_FROM_DIP(5));
    
    m_toolState = new wxStaticBitmap(m_3DOutboundStatistics, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("circle_red16")), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), 0 );
    m_toolState->SetToolTip(_("Tool State"));
    
    flexGridSizer3520->Add(m_toolState, 1, wxALL, WXC_FROM_DIP(4));
    
    wxFlexGridSizer* flexGridSizer4584 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4584->SetFlexibleDirection( wxBOTH );
    flexGridSizer4584->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3520->Add(flexGridSizer4584, 0, wxALL, WXC_FROM_DIP(0));
    
    flexGridSizer4584->Add(0, 7, 1, wxALL, WXC_FROM_DIP(0));
    
    m_toolId = new wxTextCtrl(m_3DOutboundStatistics, wxID_ANY, wxT("-1"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(12,-1)), wxTE_READONLY|wxBORDER_NONE);
    wxFont m_toolIdFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_toolId->SetFont(m_toolIdFont);
    m_toolId->SetToolTip(_("Last Tool ID"));
    #if wxVERSION_NUMBER >= 3000
    m_toolId->SetHint(wxT(""));
    #endif
    
    flexGridSizer4584->Add(m_toolId, 0, wxALL, WXC_FROM_DIP(0));
    m_toolId->SetMinSize(wxSize(12,-1));
    
    m_staticLine5005 = new wxStaticLine(m_3DOutboundStatistics, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3520->Add(m_staticLine5005, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer2803 = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizer2803->SetFlexibleDirection( wxBOTH );
    flexGridSizer2803->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2803->AddGrowableCol(0);
    flexGridSizer2803->AddGrowableRow(0);
    
    flexGridSizer4901->Add(flexGridSizer2803, 1, wxALL|wxEXPAND|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(0));
    
    m_staticLine5008 = new wxStaticLine(m_3DOutboundStatistics, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer2803->Add(m_staticLine5008, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText1128 = new wxStaticText(m_3DOutboundStatistics, wxID_ANY, _("Crossing:"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), 0);
    wxFont m_staticText1128Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1128->SetFont(m_staticText1128Font);
    
    flexGridSizer2803->Add(m_staticText1128, 0, wxALL, WXC_FROM_DIP(1));
    
    m_crossings = new wxTextCtrl(m_3DOutboundStatistics, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(25,14)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_crossings->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_crossingsFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_crossings->SetFont(m_crossingsFont);
    #if wxVERSION_NUMBER >= 3000
    m_crossings->SetHint(wxT(""));
    #endif
    
    flexGridSizer2803->Add(m_crossings, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    m_crossings->SetMinSize(wxSize(25,14));
    
    m_staticText1966 = new wxStaticText(m_3DOutboundStatistics, wxID_ANY, _("from"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), 0);
    wxFont m_staticText1966Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1966->SetFont(m_staticText1966Font);
    
    flexGridSizer2803->Add(m_staticText1966, 0, wxALL, WXC_FROM_DIP(1));
    
    m_passingCount = new wxTextCtrl(m_3DOutboundStatistics, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(25,14)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_passingCount->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_passingCountFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_passingCount->SetFont(m_passingCountFont);
    m_passingCount->SetToolTip(_("Crossings"));
    #if wxVERSION_NUMBER >= 3000
    m_passingCount->SetHint(wxT(""));
    #endif
    
    flexGridSizer2803->Add(m_passingCount, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(1));
    m_passingCount->SetMinSize(wxSize(25,14));
    m_3DOutboundStatistics->SetMinSize(wxSize(-1,30));
    
    wxFlexGridSizer* flexGridSizer2311 = new wxFlexGridSizer(20, 1, 0, 0);
    flexGridSizer2311->SetFlexibleDirection( wxBOTH );
    flexGridSizer2311->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2311->AddGrowableCol(0);
    
    flexGridSizer2309->Add(flexGridSizer2311, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_motionMonitorOptionDlg = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_motionMonitorOptionDlg->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("tooloptions")), wxLEFT);
    m_motionMonitorOptionDlg->SetBitmapMargins(2,2);
    #endif
    m_motionMonitorOptionDlg->SetToolTip(_("Toggle Option Pane"));
    
    flexGridSizer2311->Add(m_motionMonitorOptionDlg, 0, wxALL, WXC_FROM_DIP(0));
    m_motionMonitorOptionDlg->SetMinSize(wxSize(24,24));
    
    m_staticLine34832 = new wxStaticLine(m_cnc3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2311->Add(m_staticLine34832, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_3D_Top = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Top->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewUp")), wxLEFT);
    m_3D_Top->SetBitmapMargins(2,2);
    #endif
    m_3D_Top->SetToolTip(_("Show from Top"));
    
    flexGridSizer2311->Add(m_3D_Top, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Top->SetMinSize(wxSize(24,24));
    
    m_3D_Bottom = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Bottom->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewDown")), wxLEFT);
    m_3D_Bottom->SetBitmapMargins(2,2);
    #endif
    m_3D_Bottom->SetToolTip(_("Show from Bottom"));
    
    flexGridSizer2311->Add(m_3D_Bottom, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Bottom->SetMinSize(wxSize(24,24));
    
    m_3D_Front = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Front->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewFront")), wxLEFT);
    m_3D_Front->SetBitmapMargins(2,2);
    #endif
    m_3D_Front->SetToolTip(_("Show from Front"));
    
    flexGridSizer2311->Add(m_3D_Front, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Front->SetMinSize(wxSize(24,24));
    
    m_3D_Rear = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Rear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewButtom")), wxLEFT);
    m_3D_Rear->SetBitmapMargins(2,2);
    #endif
    m_3D_Rear->SetToolTip(_("Show from Rear"));
    
    flexGridSizer2311->Add(m_3D_Rear, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Rear->SetMinSize(wxSize(24,24));
    
    m_3D_Left = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Left->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewLeft")), wxLEFT);
    m_3D_Left->SetBitmapMargins(2,2);
    #endif
    m_3D_Left->SetToolTip(_("Show from Left"));
    
    flexGridSizer2311->Add(m_3D_Left, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Left->SetMinSize(wxSize(24,24));
    
    m_3D_Right = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Right->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewRight")), wxLEFT);
    m_3D_Right->SetBitmapMargins(2,2);
    #endif
    m_3D_Right->SetToolTip(_("Show from Right"));
    
    flexGridSizer2311->Add(m_3D_Right, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Right->SetMinSize(wxSize(24,24));
    
    m_staticLine3483 = new wxStaticLine(m_cnc3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2311->Add(m_staticLine3483, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_3D_Perspective1 = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), wxBORDER_THEME);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective1->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso1")), wxLEFT);
    m_3D_Perspective1->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective1->SetToolTip(_("Show 3D - ISO1"));
    
    flexGridSizer2311->Add(m_3D_Perspective1, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective1->SetMinSize(wxSize(24,24));
    
    m_3D_Perspective2 = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective2->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso2")), wxLEFT);
    m_3D_Perspective2->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective2->SetToolTip(_("Show 3D - ISO2"));
    
    flexGridSizer2311->Add(m_3D_Perspective2, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective2->SetMinSize(wxSize(24,24));
    
    m_3D_Perspective3 = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective3->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso3")), wxLEFT);
    m_3D_Perspective3->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective3->SetToolTip(_("Show 3D - ISO3"));
    
    flexGridSizer2311->Add(m_3D_Perspective3, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective3->SetMinSize(wxSize(24,24));
    
    m_3D_Perspective4 = new wxButton(m_cnc3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective4->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso4")), wxLEFT);
    m_3D_Perspective4->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective4->SetToolTip(_("Show 3D - ISO4"));
    
    flexGridSizer2311->Add(m_3D_Perspective4, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective4->SetMinSize(wxSize(24,24));
    
    m_staticLine2341 = new wxStaticLine(m_cnc3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cnc3DPane, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2311->Add(m_staticLine2341, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_cncFile = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_cncFileImgIndex;
    m_cncFileImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("script-code")));
    m_outboundNotebook->AddPage(m_cncFile, _("CNC Serial Source"), false, m_cncFileImgIndex);
    
    wxFlexGridSizer* flexGridSizer6118 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer6118->SetFlexibleDirection( wxBOTH );
    flexGridSizer6118->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6118->AddGrowableCol(0);
    flexGridSizer6118->AddGrowableRow(1);
    m_cncFile->SetSizer(flexGridSizer6118);
    
    wxFlexGridSizer* flexGridSizer6136 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer6136->SetFlexibleDirection( wxBOTH );
    flexGridSizer6136->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6136->AddGrowableCol(1);
    flexGridSizer6136->AddGrowableRow(0);
    
    flexGridSizer6118->Add(flexGridSizer6136, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText6138 = new wxStaticText(m_cncFile, wxID_ANY, _("Serial Outbound File Content:"), wxDefaultPosition, wxDLG_UNIT(m_cncFile, wxSize(-1,-1)), 0);
    wxFont m_staticText6138Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6138->SetFont(m_staticText6138Font);
    
    flexGridSizer6136->Add(m_staticText6138, 0, wxALL, WXC_FROM_DIP(3));
    
    wxFlexGridSizer* flexGridSizer6157 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer6157->SetFlexibleDirection( wxBOTH );
    flexGridSizer6157->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6157->AddGrowableCol(0);
    flexGridSizer6157->AddGrowableRow(0);
    
    flexGridSizer6136->Add(flexGridSizer6157, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btSaveOutboundAsTemplate2 = new wxBitmapToggleButton(m_cncFile, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxDefaultPosition, wxDLG_UNIT(m_cncFile, wxSize(24,24)), 0);
    m_btSaveOutboundAsTemplate2->SetToolTip(_("Save current outbound as new Template"));
    m_btSaveOutboundAsTemplate2->SetValue(true);
    
    flexGridSizer6157->Add(m_btSaveOutboundAsTemplate2, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    m_btSaveOutboundAsTemplate2->SetMinSize(wxSize(24,24));
    
    m_btToggleOutboundEditorWordWrap = new wxBitmapToggleButton(m_cncFile, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-word_wrap")), wxDefaultPosition, wxDLG_UNIT(m_cncFile, wxSize(24,24)), 0);
    m_btToggleOutboundEditorWordWrap->SetToolTip(_("Toggle Word Wrap"));
    m_btToggleOutboundEditorWordWrap->SetValue(true);
    
    flexGridSizer6157->Add(m_btToggleOutboundEditorWordWrap, 0, wxALL, WXC_FROM_DIP(0));
    m_btToggleOutboundEditorWordWrap->SetMinSize(wxSize(24,24));
    
    wxFlexGridSizer* flexGridSizer6204 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6204->SetFlexibleDirection( wxBOTH );
    flexGridSizer6204->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6204->AddGrowableCol(0);
    flexGridSizer6204->AddGrowableRow(0);
    
    flexGridSizer6118->Add(flexGridSizer6204, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_simpleBookOutBoundEditor = new wxSimplebook(m_cncFile, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncFile, wxSize(-1,-1)), wxBK_DEFAULT);
    m_simpleBookOutBoundEditor->SetName(wxT("m_simpleBookOutBoundEditor"));
    m_simpleBookOutBoundEditor->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer6204->Add(m_simpleBookOutBoundEditor, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel6208 = new wxPanel(m_simpleBookOutBoundEditor, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_simpleBookOutBoundEditor, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_simpleBookOutBoundEditor->AddPage(m_panel6208, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer6212 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6212->SetFlexibleDirection( wxBOTH );
    flexGridSizer6212->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6212->AddGrowableCol(0);
    flexGridSizer6212->AddGrowableRow(0);
    m_panel6208->SetSizer(flexGridSizer6212);
    
    m_outboundFileSource = new wxStyledTextCtrl(m_panel6208, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel6208, wxSize(-1,-1)), 0);
    // Configure the fold margin
    m_outboundFileSource->SetMarginType     (4, wxSTC_MARGIN_SYMBOL);
    m_outboundFileSource->SetMarginMask     (4, wxSTC_MASK_FOLDERS);
    m_outboundFileSource->SetMarginSensitive(4, true);
    m_outboundFileSource->SetMarginWidth    (4, 16);
    
    m_outboundFileSource->SetProperty(wxT("fold"),wxT("1"));
    m_outboundFileSource->MarkerDefine(wxSTC_MARKNUM_FOLDEROPEN,    wxSTC_MARK_ARROWDOWN);
    m_outboundFileSource->MarkerDefine(wxSTC_MARKNUM_FOLDER,        wxSTC_MARK_ARROW);
    m_outboundFileSource->MarkerDefine(wxSTC_MARKNUM_FOLDERSUB,     wxSTC_MARK_BACKGROUND);
    m_outboundFileSource->MarkerDefine(wxSTC_MARKNUM_FOLDERTAIL,    wxSTC_MARK_BACKGROUND);
    m_outboundFileSource->MarkerDefine(wxSTC_MARKNUM_FOLDEREND,     wxSTC_MARK_ARROW);
    m_outboundFileSource->MarkerDefine(wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_ARROWDOWN);
    m_outboundFileSource->MarkerDefine(wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_BACKGROUND);
    // Configure the tracker margin
    m_outboundFileSource->SetMarginWidth(1, 0);
    
    // Configure the symbol margin
    m_outboundFileSource->SetMarginType (2, wxSTC_MARGIN_SYMBOL);
    m_outboundFileSource->SetMarginMask (2, ~(wxSTC_MASK_FOLDERS));
    m_outboundFileSource->SetMarginWidth(2, 0);
    m_outboundFileSource->SetMarginSensitive(2, true);
    
    // Configure the line numbers margin
    int m_outboundFileSource_PixelWidth = 4 + 5 *m_outboundFileSource->TextWidth(wxSTC_STYLE_LINENUMBER, wxT("9"));
    m_outboundFileSource->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_outboundFileSource->SetMarginWidth(0,m_outboundFileSource_PixelWidth);
    
    // Configure the line symbol margin
    m_outboundFileSource->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_outboundFileSource->SetMarginMask(3, 0);
    m_outboundFileSource->SetMarginWidth(3,0);
    // Select the lexer
    m_outboundFileSource->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_outboundFileSource->StyleClearAll();
    m_outboundFileSource->SetWrapMode(0);
    m_outboundFileSource->SetIndentationGuides(0);
    m_outboundFileSource->SetKeyWords(0, wxT(""));
    m_outboundFileSource->SetKeyWords(1, wxT(""));
    m_outboundFileSource->SetKeyWords(2, wxT(""));
    m_outboundFileSource->SetKeyWords(3, wxT(""));
    m_outboundFileSource->SetKeyWords(4, wxT(""));
    
    flexGridSizer6212->Add(m_outboundFileSource, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel6210 = new wxPanel(m_simpleBookOutBoundEditor, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_simpleBookOutBoundEditor, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_simpleBookOutBoundEditor->AddPage(m_panel6210, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer6214 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6214->SetFlexibleDirection( wxBOTH );
    flexGridSizer6214->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6214->AddGrowableCol(0);
    flexGridSizer6214->AddGrowableRow(0);
    m_panel6210->SetSizer(flexGridSizer6214);
    
    #if wxUSE_WEBVIEW
    m_outboundEditorWebView = wxWebView::New(m_panel6210, wxID_ANY, _("about:blank"), wxDefaultPosition, wxDLG_UNIT(m_panel6210, wxSize(-1,-1)), wxWebViewBackendDefault, 0);
    
    flexGridSizer6214->Add(m_outboundEditorWebView, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    #endif // wxUSE_WEBVIEW
    
    wxFlexGridSizer* flexGridSizer7131 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer7131->SetFlexibleDirection( wxBOTH );
    flexGridSizer7131->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7131->AddGrowableCol(1);
    
    flexGridSizer6118->Add(flexGridSizer7131, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_outboundPosition = new wxStaticText(m_cncFile, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cncFile, wxSize(100,-1)), 0);
    m_outboundPosition->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_outboundPositionFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_outboundPosition->SetFont(m_outboundPositionFont);
    
    flexGridSizer7131->Add(m_outboundPosition, 0, wxALL, WXC_FROM_DIP(1));
    m_outboundPosition->SetMinSize(wxSize(100,-1));
    
    m_outboundEditStatus = new wxTextCtrl(m_cncFile, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cncFile, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    m_outboundEditStatus->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_outboundEditStatusFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_outboundEditStatus->SetFont(m_outboundEditStatusFont);
    #if wxVERSION_NUMBER >= 3000
    m_outboundEditStatus->SetHint(wxT(""));
    #endif
    
    flexGridSizer7131->Add(m_outboundEditStatus, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_outboundEditMode = new wxStaticText(m_cncFile, wxID_ANY, _("edit mode"), wxDefaultPosition, wxDLG_UNIT(m_cncFile, wxSize(-1,-1)), 0);
    m_outboundEditMode->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_outboundEditModeFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_outboundEditMode->SetFont(m_outboundEditModeFont);
    
    flexGridSizer7131->Add(m_outboundEditMode, 0, wxALL, WXC_FROM_DIP(1));
    
    m_cncPreview = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_cncPreviewImgIndex;
    m_cncPreviewImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("document-print-preview-3")));
    m_outboundNotebook->AddPage(m_cncPreview, _("CNC Serial Preview"), false, m_cncPreviewImgIndex);
    
    wxFlexGridSizer* flexGridSizer6122 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer6122->SetFlexibleDirection( wxBOTH );
    flexGridSizer6122->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6122->AddGrowableCol(0);
    flexGridSizer6122->AddGrowableRow(1);
    m_cncPreview->SetSizer(flexGridSizer6122);
    
    wxFlexGridSizer* flexGridSizer6141 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer6141->SetFlexibleDirection( wxBOTH );
    flexGridSizer6141->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer6122->Add(flexGridSizer6141, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText6140 = new wxStaticText(m_cncPreview, wxID_ANY, _("Serial Outbound File Preview:"), wxDefaultPosition, wxDLG_UNIT(m_cncPreview, wxSize(-1,-1)), 0);
    wxFont m_staticText6140Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6140->SetFont(m_staticText6140Font);
    
    flexGridSizer6141->Add(m_staticText6140, 0, wxALL, WXC_FROM_DIP(3));
    
    m_outboundPreviewPlaceholder = new wxPanel(m_cncPreview, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncPreview, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_outboundPreviewPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer6122->Add(m_outboundPreviewPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText6218 = new wxStaticText(m_cncPreview, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_cncPreview, wxSize(-1,-1)), 0);
    
    flexGridSizer6122->Add(m_staticText6218, 0, wxALL, WXC_FROM_DIP(1));
    
    m_monitorTemplatePanel = new wxPanel(m_monitorViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_monitorViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_monitorViewBook->AddPage(m_monitorTemplatePanel, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer4359 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer4359->SetFlexibleDirection( wxBOTH );
    flexGridSizer4359->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4359->AddGrowableCol(0);
    flexGridSizer4359->AddGrowableRow(0);
    m_monitorTemplatePanel->SetSizer(flexGridSizer4359);
    
    m_monitorTemplatePreviewPlaceHolder = new wxPanel(m_monitorTemplatePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_monitorTemplatePanel, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_monitorTemplatePreviewPlaceHolder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_monitorTemplatePreviewPlaceHolder->SetToolTip(_("only a placeholder"));
    
    flexGridSizer4359->Add(m_monitorTemplatePreviewPlaceHolder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel5144 = new wxPanel(m_monitorTemplatePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_monitorTemplatePanel, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panel5144->SetBackgroundColour(wxColour(wxT("rgb(0,64,128)")));
    
    flexGridSizer4359->Add(m_panel5144, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer5146 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer5146->SetFlexibleDirection( wxBOTH );
    flexGridSizer5146->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_panel5144->SetSizer(flexGridSizer5146);
    
    m_staticText5142 = new wxStaticText(m_panel5144, wxID_ANY, _("Inbound File Preview . . ."), wxDefaultPosition, wxDLG_UNIT(m_panel5144, wxSize(-1,-1)), 0);
    m_staticText5142->SetBackgroundColour(wxColour(wxT("rgb(0,64,128)")));
    m_staticText5142->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_staticText5142Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5142->SetFont(m_staticText5142Font);
    
    flexGridSizer5146->Add(m_staticText5142, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_currentInboundFilePreviewFileName = new wxTextCtrl(m_monitorTemplatePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_monitorTemplatePanel, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_currentInboundFilePreviewFileName->SetHint(wxT(""));
    #endif
    
    flexGridSizer4359->Add(m_currentInboundFilePreviewFileName, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_winLoggerView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_winLoggerView->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));
    
    m_auimgrMain->AddPane(m_winLoggerView, wxAuiPaneInfo().Name(wxT("Logger")).Caption(_("CNC Logger")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(1).Position(0).BestSize(100,140).MinSize(100,140).MaxSize(100,140).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    
    wxFlexGridSizer* flexGridSizer869 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer869->SetFlexibleDirection( wxBOTH );
    flexGridSizer869->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer869->AddGrowableCol(0);
    flexGridSizer869->AddGrowableRow(0);
    m_winLoggerView->SetSizer(flexGridSizer869);
    
    wxFlexGridSizer* flexGridSizer3158 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3158->SetFlexibleDirection( wxBOTH );
    flexGridSizer3158->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3158->AddGrowableCol(0);
    flexGridSizer3158->AddGrowableRow(0);
    
    flexGridSizer869->Add(flexGridSizer3158, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer2520 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2520->SetFlexibleDirection( wxBOTH );
    flexGridSizer2520->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2520->AddGrowableCol(0);
    flexGridSizer2520->AddGrowableRow(0);
    
    flexGridSizer3158->Add(flexGridSizer2520, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_loggerNotebook = new wxNotebook(m_winLoggerView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_winLoggerView, wxSize(-1,-1)), wxNB_NOPAGETHEME|wxBK_LEFT|wxBORDER_NONE);
    wxFont m_loggerNotebookFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_loggerNotebook->SetFont(m_loggerNotebookFont);
    m_loggerNotebook->SetName(wxT("m_loggerNotebook"));
    wxImageList* m_loggerNotebook_il = new wxImageList(16, 16);
    m_loggerNotebook->AssignImageList(m_loggerNotebook_il);
    
    flexGridSizer2520->Add(m_loggerNotebook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelStartupTrace = new wxPanel(m_loggerNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_loggerNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    wxFont m_panelStartupTraceFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_panelStartupTrace->SetFont(m_panelStartupTraceFont);
    int m_panelStartupTraceImgIndex;
    m_panelStartupTraceImgIndex = m_loggerNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("start-here")));
    m_loggerNotebook->AddPage(m_panelStartupTrace, wxT(""), false, m_panelStartupTraceImgIndex);
    
    wxFlexGridSizer* flexGridSizer6474 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6474->SetFlexibleDirection( wxBOTH );
    flexGridSizer6474->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6474->AddGrowableCol(0);
    flexGridSizer6474->AddGrowableRow(0);
    m_panelStartupTrace->SetSizer(flexGridSizer6474);
    
    m_startupTrace = new wxTextCtrl(m_panelStartupTrace, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelStartupTrace, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE);
    m_startupTrace->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    wxFont m_startupTraceFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_startupTrace->SetFont(m_startupTraceFont);
    
    flexGridSizer6474->Add(m_startupTrace, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel5878 = new wxPanel(m_loggerNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_loggerNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panel5878->SetToolTip(_("Cnc Logger"));
    int m_panel5878ImgIndex;
    m_panel5878ImgIndex = m_loggerNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("dialog-information-3 (2)")));
    m_loggerNotebook->AddPage(m_panel5878, wxT(""), true, m_panel5878ImgIndex);
    
    wxFlexGridSizer* flexGridSizer5880 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5880->SetFlexibleDirection( wxBOTH );
    flexGridSizer5880->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5880->AddGrowableCol(0);
    flexGridSizer5880->AddGrowableRow(0);
    m_panel5878->SetSizer(flexGridSizer5880);
    
    m_logger = new wxTextCtrl(m_panel5878, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel5878, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxHSCROLL|wxVSCROLL);
    m_logger->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    wxFont m_loggerFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_logger->SetFont(m_loggerFont);
    m_logger->SetToolTip(_("Logger Output"));
    
    flexGridSizer5880->Add(m_logger, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer1863 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1863->SetFlexibleDirection( wxBOTH );
    flexGridSizer1863->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5880->Add(flexGridSizer1863, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_clearLogger = new wxBitmapButton(m_panel5878, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxDefaultPosition, wxDLG_UNIT(m_panel5878, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_clearLogger->SetToolTip(_("Clear Logger Panel"));
    
    flexGridSizer1863->Add(m_clearLogger, 0, wxALL, WXC_FROM_DIP(1));
    
    m_copyLogger = new wxBitmapButton(m_panel5878, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("edit-copy-7")), wxDefaultPosition, wxDLG_UNIT(m_panel5878, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_copyLogger->SetToolTip(_("Copy Logger Panel"));
    
    flexGridSizer1863->Add(m_copyLogger, 0, wxALL, WXC_FROM_DIP(1));
    
    m_showLoggerOnDemand = new wxCheckBox(m_panel5878, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel5878, wxSize(-1,-1)), 0);
    m_showLoggerOnDemand->SetValue(true);
    m_showLoggerOnDemand->SetToolTip(_("Show on demand"));
    
    flexGridSizer1863->Add(m_showLoggerOnDemand, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panel5882 = new wxPanel(m_loggerNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_loggerNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panel5882->SetToolTip(_("Gamepad"));
    int m_panel5882ImgIndex;
    m_panel5882ImgIndex = m_loggerNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("gamepad-active")));
    m_loggerNotebook->AddPage(m_panel5882, wxT(""), false, m_panel5882ImgIndex);
    
    wxFlexGridSizer* flexGridSizer5886 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer5886->SetFlexibleDirection( wxBOTH );
    flexGridSizer5886->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5886->AddGrowableCol(0);
    flexGridSizer5886->AddGrowableRow(0);
    m_panel5882->SetSizer(flexGridSizer5886);
    
    m_gamepadStateController = new wxPanel(m_panel5882, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel5882, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_gamepadStateController->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer5886->Add(m_gamepadStateController, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer5859 = new wxFlexGridSizer(7, 1, 0, 0);
    flexGridSizer5859->SetFlexibleDirection( wxBOTH );
    flexGridSizer5859->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2520->Add(flexGridSizer5859, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText58651 = new wxStaticText(m_winLoggerView, wxID_ANY, _("Gamepad\nState:"), wxDefaultPosition, wxDLG_UNIT(m_winLoggerView, wxSize(-1,-1)), wxALIGN_CENTRE);
    wxFont m_staticText58651Font(7, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText58651->SetFont(m_staticText58651Font);
    
    flexGridSizer5859->Add(m_staticText58651, 0, wxALL, WXC_FROM_DIP(0));
    
    m_gamepadState = new wxStaticBitmap(m_winLoggerView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("gamepad-active")), wxDefaultPosition, wxDLG_UNIT(m_winLoggerView, wxSize(-1,-1)), 0 );
    m_gamepadState->SetToolTip(_("Gamepad Thread State"));
    
    flexGridSizer5859->Add(m_gamepadState, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_staticText5865 = new wxStaticText(m_winLoggerView, wxID_ANY, _("Position\nMode:"), wxDefaultPosition, wxDLG_UNIT(m_winLoggerView, wxSize(-1,-1)), wxALIGN_CENTRE);
    wxFont m_staticText5865Font(7, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5865->SetFont(m_staticText5865Font);
    
    flexGridSizer5859->Add(m_staticText5865, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(0));
    
    m_gpBmp1 = new wxStaticBitmap(m_winLoggerView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("dpad_none-small")), wxDefaultPosition, wxDLG_UNIT(m_winLoggerView, wxSize(-1,-1)), 0 );
    
    flexGridSizer5859->Add(m_gpBmp1, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(2));
    
    m_gpBmp2 = new wxStaticBitmap(m_winLoggerView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("lstick_all-small")), wxDefaultPosition, wxDLG_UNIT(m_winLoggerView, wxSize(-1,-1)), 0 );
    
    flexGridSizer5859->Add(m_gpBmp2, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(2));
    
    m_gpBmp3 = new wxStaticBitmap(m_winLoggerView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("rstick_updown-small")), wxDefaultPosition, wxDLG_UNIT(m_winLoggerView, wxSize(-1,-1)), 0 );
    
    flexGridSizer5859->Add(m_gpBmp3, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(2));
    
    m_gpBmp4 = new wxStaticBitmap(m_winLoggerView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("rstick_updown-small")), wxDefaultPosition, wxDLG_UNIT(m_winLoggerView, wxSize(-1,-1)), 0 );
    
    flexGridSizer5859->Add(m_gpBmp4, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer5888 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5888->SetFlexibleDirection( wxBOTH );
    flexGridSizer5888->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5888->AddGrowableCol(1);
    flexGridSizer5888->AddGrowableRow(0);
    
    flexGridSizer869->Add(flexGridSizer5888, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticBitmap5890 = new wxStaticBitmap(m_winLoggerView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("dialog-information (2)")), wxDefaultPosition, wxDLG_UNIT(m_winLoggerView, wxSize(-1,-1)), 0 );
    
    flexGridSizer5888->Add(m_staticBitmap5890, 0, wxALL, WXC_FROM_DIP(2));
    
    m_tmpTraceInfo = new wxTextCtrl(m_winLoggerView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_winLoggerView, wxSize(-1,24)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxTE_DONTWRAP);
    m_tmpTraceInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_tmpTraceInfo->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_tmpTraceInfoFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_tmpTraceInfo->SetFont(m_tmpTraceInfoFont);
    m_tmpTraceInfo->SetToolTip(_("Trace Information"));
    
    flexGridSizer5888->Add(m_tmpTraceInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_tmpTraceInfo->SetMinSize(wxSize(-1,24));
    
    m_statusBar = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_statusBar->SetBackgroundColour(wxColour(wxT("rgb(109,109,109)")));
    
    m_auimgrMain->AddPane(m_statusBar, wxAuiPaneInfo().Name(wxT("StatusBar")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(0).Position(0).BestSize(100,26).MinSize(100,26).MaxSize(100,26).Fixed().CaptionVisible(false).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false));
    
    wxFlexGridSizer* flexGridSizer436 = new wxFlexGridSizer(1, 36, 0, 0);
    flexGridSizer436->SetFlexibleDirection( wxBOTH );
    flexGridSizer436->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer436->AddGrowableCol(4);
    flexGridSizer436->AddGrowableRow(0);
    m_statusBar->SetSizer(flexGridSizer436);
    
    wxFlexGridSizer* flexGridSizerImeConsumed = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizerImeConsumed->SetFlexibleDirection( wxBOTH );
    flexGridSizerImeConsumed->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer436->Add(flexGridSizerImeConsumed, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText395 = new wxStaticText(m_statusBar, wxID_ANY, _("Total time consumed:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    m_staticText395->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_staticText395Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText395->SetFont(m_staticText395Font);
    
    flexGridSizerImeConsumed->Add(m_staticText395, 0, wxALL, WXC_FROM_DIP(3));
    m_staticText395->SetMinSize(wxSize(-1,18));
    
    m_cmdDuration = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("00:00:00.000"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(70,18)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_cmdDuration->SetBackgroundColour(wxColour(wxT("rgb(105,105,105)")));
    m_cmdDuration->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_cmdDurationFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cmdDuration->SetFont(m_cmdDurationFont);
    #if wxVERSION_NUMBER >= 3000
    m_cmdDuration->SetHint(wxT(""));
    #endif
    
    flexGridSizerImeConsumed->Add(m_cmdDuration, 0, wxALL, WXC_FROM_DIP(3));
    m_cmdDuration->SetMinSize(wxSize(70,18));
    
    m_staticLine6021 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine6021, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_heartbeatState = new wxStaticBitmap(m_statusBar, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("heart-2")), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0 );
    m_heartbeatState->SetToolTip(_("Heartbeat State"));
    
    flexGridSizer436->Add(m_heartbeatState, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine602 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine602, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizerTemplate = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizerTemplate->SetFlexibleDirection( wxBOTH );
    flexGridSizerTemplate->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerTemplate->AddGrowableCol(0);
    flexGridSizerTemplate->AddGrowableRow(0);
    
    flexGridSizer436->Add(flexGridSizerTemplate, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_inputFileName = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("<Template Name>"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(150,-1)), wxTE_READONLY|wxTE_CENTRE|wxBORDER_NONE);
    m_inputFileName->SetBackgroundColour(wxColour(wxT("rgb(105,105,105)")));
    m_inputFileName->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_inputFileNameFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_inputFileName->SetFont(m_inputFileNameFont);
    #if wxVERSION_NUMBER >= 3000
    m_inputFileName->SetHint(wxT(""));
    #endif
    
    flexGridSizerTemplate->Add(m_inputFileName, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_staticLine6801 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine6801, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizerParseMode = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizerParseMode->SetFlexibleDirection( wxBOTH );
    flexGridSizerParseMode->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizerParseMode->AddGrowableCol(1);
    flexGridSizerParseMode->AddGrowableRow(0);
    
    flexGridSizer436->Add(flexGridSizerParseMode, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_svgParseMode = new wxStaticText(m_statusBar, wxID_ANY, _("pM"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,-1)), wxALIGN_CENTRE);
    m_svgParseMode->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_svgParseModeFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_svgParseMode->SetFont(m_svgParseModeFont);
    m_svgParseMode->SetToolTip(_("SVG Parse Mode"));
    
    flexGridSizerParseMode->Add(m_svgParseMode, 0, wxALL, WXC_FROM_DIP(3));
    m_svgParseMode->SetMinSize(wxSize(50,-1));
    
    m_activityPanel = new wxPanel(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(80,16)), wxTAB_TRAVERSAL);
    m_activityPanel->SetBackgroundColour(wxColour(wxT("rgb(109,109,109)")));
    m_activityPanel->SetToolTip(_("Activity Control"));
    
    flexGridSizerParseMode->Add(m_activityPanel, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_activityPanel->SetMinSize(wxSize(80,16));
    
    m_staticLine680114 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine680114, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizerProbeMode = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizerProbeMode->SetFlexibleDirection( wxBOTH );
    flexGridSizerProbeMode->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer436->Add(flexGridSizerProbeMode, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText5656 = new wxStaticText(m_statusBar, wxID_ANY, _("Probe \nMode"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0);
    m_staticText5656->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_staticText5656Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5656->SetFont(m_staticText5656Font);
    
    flexGridSizerProbeMode->Add(m_staticText5656, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5662 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5662->SetFlexibleDirection( wxBOTH );
    flexGridSizer5662->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerProbeMode->Add(flexGridSizer5662, 0, wxALL, WXC_FROM_DIP(0));
    
    m_probeModeState = new wxStaticBitmap(m_statusBar, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-record")), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0 );
    m_probeModeState->SetToolTip(_("Probe Mode State"));
    
    flexGridSizer5662->Add(m_probeModeState, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_probeModeStateLabel = new wxStaticText(m_statusBar, wxID_ANY, _("OFF"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(17,-1)), wxALIGN_RIGHT);
    m_probeModeStateLabel->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_probeModeStateLabelFont(5, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_probeModeStateLabel->SetFont(m_probeModeStateLabelFont);
    
    flexGridSizer5662->Add(m_probeModeStateLabel, 0, wxALL, WXC_FROM_DIP(0));
    m_probeModeStateLabel->SetMinSize(wxSize(17,-1));
    
    m_staticLine60234112 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine60234112, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizerSpeedControl = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizerSpeedControl->SetFlexibleDirection( wxBOTH );
    flexGridSizerSpeedControl->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer436->Add(flexGridSizerSpeedControl, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText56563 = new wxStaticText(m_statusBar, wxID_ANY, _("Speed\nCtrl."), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0);
    m_staticText56563->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_staticText56563Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText56563->SetFont(m_staticText56563Font);
    
    flexGridSizerSpeedControl->Add(m_staticText56563, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer56624 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer56624->SetFlexibleDirection( wxBOTH );
    flexGridSizer56624->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerSpeedControl->Add(flexGridSizer56624, 0, wxALL, WXC_FROM_DIP(0));
    
    m_speedCtrlState = new wxStaticBitmap(m_statusBar, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-record")), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0 );
    m_speedCtrlState->SetToolTip(_("Speed Control State"));
    
    flexGridSizer56624->Add(m_speedCtrlState, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_speedCtrlStateLabel = new wxStaticText(m_statusBar, wxID_ANY, _("OFF"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(17,-1)), wxALIGN_RIGHT);
    m_speedCtrlStateLabel->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_speedCtrlStateLabelFont(5, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_speedCtrlStateLabel->SetFont(m_speedCtrlStateLabelFont);
    
    flexGridSizer56624->Add(m_speedCtrlStateLabel, 0, wxALL, WXC_FROM_DIP(0));
    m_speedCtrlStateLabel->SetMinSize(wxSize(17,-1));
    
    m_staticLine680 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine680, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizerFeedSpeed = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizerFeedSpeed->SetFlexibleDirection( wxBOTH );
    flexGridSizerFeedSpeed->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer436->Add(flexGridSizerFeedSpeed, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    LableF = new wxStaticText(m_statusBar, wxID_ANY, _("F:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    LableF->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont LableFFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    LableF->SetFont(LableFFont);
    
    flexGridSizerFeedSpeed->Add(LableF, 0, wxALL, WXC_FROM_DIP(4));
    LableF->SetMinSize(wxSize(-1,18));
    
    wxFlexGridSizer* flexGridSizer5648 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5648->SetFlexibleDirection( wxBOTH );
    flexGridSizer5648->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerFeedSpeed->Add(flexGridSizer5648, 0, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer6060 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer6060->SetFlexibleDirection( wxBOTH );
    flexGridSizer6060->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5648->Add(flexGridSizer6060, 0, wxALL, WXC_FROM_DIP(0));
    
    m_configuredFeedSpeed = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,11)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_configuredFeedSpeed->SetBackgroundColour(wxColour(wxT("rgb(105,105,105)")));
    m_configuredFeedSpeed->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_configuredFeedSpeedFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_configuredFeedSpeed->SetFont(m_configuredFeedSpeedFont);
    m_configuredFeedSpeed->SetToolTip(_("Configured Feed Speed"));
    #if wxVERSION_NUMBER >= 3000
    m_configuredFeedSpeed->SetHint(wxT(""));
    #endif
    
    flexGridSizer6060->Add(m_configuredFeedSpeed, 0, wxALL, WXC_FROM_DIP(0));
    m_configuredFeedSpeed->SetMinSize(wxSize(50,11));
    
    m_configuredFeedSpeedMode = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("W"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(12,11)), wxTE_READONLY|wxBORDER_NONE);
    m_configuredFeedSpeedMode->SetBackgroundColour(wxColour(wxT("rgb(105,105,105)")));
    m_configuredFeedSpeedMode->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_configuredFeedSpeedModeFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_configuredFeedSpeedMode->SetFont(m_configuredFeedSpeedModeFont);
    m_configuredFeedSpeedMode->SetToolTip(_("Configured Feed Speed"));
    #if wxVERSION_NUMBER >= 3000
    m_configuredFeedSpeedMode->SetHint(wxT(""));
    #endif
    
    flexGridSizer6060->Add(m_configuredFeedSpeedMode, 0, wxALL, WXC_FROM_DIP(0));
    m_configuredFeedSpeedMode->SetMinSize(wxSize(12,11));
    
    wxFlexGridSizer* flexGridSizer6061 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer6061->SetFlexibleDirection( wxBOTH );
    flexGridSizer6061->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5648->Add(flexGridSizer6061, 0, wxALL, WXC_FROM_DIP(0));
    
    m_realtimeFeedSpeed = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,11)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_realtimeFeedSpeed->SetBackgroundColour(wxColour(wxT("rgb(105,105,105)")));
    m_realtimeFeedSpeed->SetForegroundColour(wxColour(wxT("rgb(255,190,159)")));
    wxFont m_realtimeFeedSpeedFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_realtimeFeedSpeed->SetFont(m_realtimeFeedSpeedFont);
    m_realtimeFeedSpeed->SetToolTip(_("Realtime Feed Speed"));
    #if wxVERSION_NUMBER >= 3000
    m_realtimeFeedSpeed->SetHint(wxT(""));
    #endif
    
    flexGridSizer6061->Add(m_realtimeFeedSpeed, 0, wxALL, WXC_FROM_DIP(0));
    m_realtimeFeedSpeed->SetMinSize(wxSize(50,11));
    
    m_realtimeFeedSpeedMode = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("U"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(12,11)), wxTE_READONLY|wxBORDER_NONE);
    m_realtimeFeedSpeedMode->SetBackgroundColour(wxColour(wxT("rgb(105,105,105)")));
    m_realtimeFeedSpeedMode->SetForegroundColour(wxColour(wxT("rgb(255,190,159)")));
    wxFont m_realtimeFeedSpeedModeFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_realtimeFeedSpeedMode->SetFont(m_realtimeFeedSpeedModeFont);
    m_realtimeFeedSpeedMode->SetToolTip(_("Realtime Feed Speed"));
    #if wxVERSION_NUMBER >= 3000
    m_realtimeFeedSpeedMode->SetHint(wxT(""));
    #endif
    
    flexGridSizer6061->Add(m_realtimeFeedSpeedMode, 0, wxALL, WXC_FROM_DIP(0));
    m_realtimeFeedSpeedMode->SetMinSize(wxSize(12,11));
    
    m_staticLine602341127 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine602341127, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizerRefPosState = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizerRefPosState->SetFlexibleDirection( wxBOTH );
    flexGridSizerRefPosState->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer436->Add(flexGridSizerRefPosState, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText5651 = new wxStaticText(m_statusBar, wxID_ANY, _("Ref.\nState"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0);
    m_staticText5651->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_staticText5651Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5651->SetFont(m_staticText5651Font);
    
    flexGridSizerRefPosState->Add(m_staticText5651, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5652 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer5652->SetFlexibleDirection( wxBOTH );
    flexGridSizer5652->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerRefPosState->Add(flexGridSizer5652, 0, wxALL, WXC_FROM_DIP(0));
    
    m_refPosState = new wxStaticBitmap(m_statusBar, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-record")), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0 );
    m_refPosState->SetToolTip(_("Reference Pos  State"));
    
    flexGridSizer5652->Add(m_refPosState, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine6801222 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine6801222, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizerPositions = new wxFlexGridSizer(1, 12, 0, 0);
    flexGridSizerPositions->SetFlexibleDirection( wxBOTH );
    flexGridSizerPositions->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer436->Add(flexGridSizerPositions, 0, wxALL, WXC_FROM_DIP(1));
    
    LableX = new wxStaticText(m_statusBar, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    LableX->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont LableXFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    LableX->SetFont(LableXFont);
    
    flexGridSizerPositions->Add(LableX, 0, wxALL, WXC_FROM_DIP(4));
    LableX->SetMinSize(wxSize(-1,18));
    
    wxFlexGridSizer* flexGridSizer5638 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5638->SetFlexibleDirection( wxBOTH );
    flexGridSizer5638->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerPositions->Add(flexGridSizer5638, 0, wxALL, WXC_FROM_DIP(0));
    
    m_xAxis = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,11)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_xAxis->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_xAxis->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_xAxisFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_xAxis->SetFont(m_xAxisFont);
    m_xAxis->SetToolTip(_("Application Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_xAxis->SetHint(wxT(""));
    #endif
    
    flexGridSizer5638->Add(m_xAxis, 0, wxALL, WXC_FROM_DIP(0));
    m_xAxis->SetMinSize(wxSize(50,11));
    
    m_xAxisCtl = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,11)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_xAxisCtl->SetBackgroundColour(wxColour(wxT("rgb(105,105,105)")));
    m_xAxisCtl->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_xAxisCtlFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_xAxisCtl->SetFont(m_xAxisCtlFont);
    m_xAxisCtl->SetToolTip(_("Controller Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_xAxisCtl->SetHint(wxT(""));
    #endif
    
    flexGridSizer5638->Add(m_xAxisCtl, 0, wxALL, WXC_FROM_DIP(0));
    m_xAxisCtl->SetMinSize(wxSize(50,11));
    
    m_staticLine602348910 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizerPositions->Add(m_staticLine602348910, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    LabelY = new wxStaticText(m_statusBar, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    LabelY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont LabelYFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    LabelY->SetFont(LabelYFont);
    
    flexGridSizerPositions->Add(LabelY, 0, wxALL, WXC_FROM_DIP(4));
    LabelY->SetMinSize(wxSize(-1,18));
    
    wxFlexGridSizer* flexGridSizer5639 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5639->SetFlexibleDirection( wxBOTH );
    flexGridSizer5639->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerPositions->Add(flexGridSizer5639, 0, wxALL, WXC_FROM_DIP(0));
    
    m_yAxis = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,11)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_yAxis->SetBackgroundColour(wxColour(wxT("rgb(105,105,105)")));
    m_yAxis->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_yAxisFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_yAxis->SetFont(m_yAxisFont);
    m_yAxis->SetToolTip(_("Application Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_yAxis->SetHint(wxT(""));
    #endif
    
    flexGridSizer5639->Add(m_yAxis, 0, wxALL, WXC_FROM_DIP(0));
    m_yAxis->SetMinSize(wxSize(50,11));
    
    m_yAxisCtl = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_yAxisCtl->SetBackgroundColour(wxColour(wxT("rgb(105,105,105)")));
    m_yAxisCtl->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_yAxisCtlFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_yAxisCtl->SetFont(m_yAxisCtlFont);
    m_yAxisCtl->SetToolTip(_("Controller Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_yAxisCtl->SetHint(wxT(""));
    #endif
    
    flexGridSizer5639->Add(m_yAxisCtl, 0, wxALL, WXC_FROM_DIP(0));
    m_yAxisCtl->SetMinSize(wxSize(50,20));
    
    m_staticLine6023489 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizerPositions->Add(m_staticLine6023489, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    LableZ = new wxStaticText(m_statusBar, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    LableZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont LableZFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    LableZ->SetFont(LableZFont);
    
    flexGridSizerPositions->Add(LableZ, 0, wxALL, WXC_FROM_DIP(4));
    LableZ->SetMinSize(wxSize(-1,18));
    
    wxFlexGridSizer* flexGridSizer5640 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5640->SetFlexibleDirection( wxBOTH );
    flexGridSizer5640->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerPositions->Add(flexGridSizer5640, 0, wxALL, WXC_FROM_DIP(0));
    
    m_zAxis = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,11)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_zAxis->SetBackgroundColour(wxColour(wxT("rgb(105,105,105)")));
    m_zAxis->SetForegroundColour(wxColour(wxT("rgb(255,255,255)")));
    wxFont m_zAxisFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zAxis->SetFont(m_zAxisFont);
    m_zAxis->SetToolTip(_("Application Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_zAxis->SetHint(wxT(""));
    #endif
    
    flexGridSizer5640->Add(m_zAxis, 0, wxALL, WXC_FROM_DIP(0));
    m_zAxis->SetMinSize(wxSize(50,11));
    
    m_zAxisCtl = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,11)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_zAxisCtl->SetBackgroundColour(wxColour(wxT("rgb(105,105,105)")));
    m_zAxisCtl->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_zAxisCtlFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zAxisCtl->SetFont(m_zAxisCtlFont);
    m_zAxisCtl->SetToolTip(_("Controller Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_zAxisCtl->SetHint(wxT(""));
    #endif
    
    flexGridSizer5640->Add(m_zAxisCtl, 0, wxALL, WXC_FROM_DIP(0));
    m_zAxisCtl->SetMinSize(wxSize(50,11));
    
    m_staticLine602348 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizerPositions->Add(m_staticLine602348, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxArrayString m_unitArr;
    m_unitArr.Add(wxT("mm"));
    m_unitArr.Add(wxT("steps"));
    m_unit = new wxComboBox(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,19)), m_unitArr, wxCB_SORT|wxCB_READONLY);
    m_unit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_unitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_unit->SetFont(m_unitFont);
    m_unit->SetToolTip(_("Select the Display Unit"));
    m_unit->SetSelection(0);
    
    flexGridSizer436->Add(m_unit, 0, wxALL, WXC_FROM_DIP(3));
    m_unit->SetMinSize(wxSize(-1,19));
    
    m_staticLine60234 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine60234, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizerLimit = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizerLimit->SetFlexibleDirection( wxBOTH );
    flexGridSizerLimit->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer436->Add(flexGridSizerLimit, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText1196 = new wxStaticText(m_statusBar, wxID_ANY, _("Limit:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0);
    m_staticText1196->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_staticText1196Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText1196->SetFont(m_staticText1196Font);
    
    flexGridSizerLimit->Add(m_staticText1196, 0, wxALL, WXC_FROM_DIP(3));
    
    wxFlexGridSizer* flexGridSizer5621 = new wxFlexGridSizer(3, 3, 0, 0);
    flexGridSizer5621->SetFlexibleDirection( wxBOTH );
    flexGridSizer5621->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerLimit->Add(flexGridSizer5621, 0, wxALL, WXC_FROM_DIP(0));
    
    m_xMinLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,7)), wxALIGN_CENTRE);
    m_xMinLimit->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    wxFont m_xMinLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_xMinLimit->SetFont(m_xMinLimitFont);
    m_xMinLimit->SetToolTip(_("X Min Limit"));
    
    flexGridSizer5621->Add(m_xMinLimit, 0, wxALL, WXC_FROM_DIP(2));
    m_xMinLimit->SetMinSize(wxSize(10,7));
    
    m_yMinLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,7)), wxALIGN_CENTRE);
    m_yMinLimit->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    wxFont m_yMinLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_yMinLimit->SetFont(m_yMinLimitFont);
    m_yMinLimit->SetToolTip(_("Y Min Limit"));
    
    flexGridSizer5621->Add(m_yMinLimit, 0, wxALL, WXC_FROM_DIP(2));
    m_yMinLimit->SetMinSize(wxSize(10,7));
    
    m_zMinLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,7)), wxALIGN_CENTRE);
    m_zMinLimit->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    wxFont m_zMinLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_zMinLimit->SetFont(m_zMinLimitFont);
    m_zMinLimit->SetToolTip(_("Z Min Limit"));
    
    flexGridSizer5621->Add(m_zMinLimit, 0, wxALL, WXC_FROM_DIP(2));
    m_zMinLimit->SetMinSize(wxSize(10,7));
    
    m_xMaxLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,7)), wxALIGN_CENTRE);
    m_xMaxLimit->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    wxFont m_xMaxLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_xMaxLimit->SetFont(m_xMaxLimitFont);
    m_xMaxLimit->SetToolTip(_("X Max Limit"));
    
    flexGridSizer5621->Add(m_xMaxLimit, 0, wxALL, WXC_FROM_DIP(2));
    m_xMaxLimit->SetMinSize(wxSize(10,7));
    
    m_yMaxLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,7)), wxALIGN_CENTRE);
    m_yMaxLimit->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    wxFont m_yMaxLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_yMaxLimit->SetFont(m_yMaxLimitFont);
    m_yMaxLimit->SetToolTip(_("Y Max Limit"));
    
    flexGridSizer5621->Add(m_yMaxLimit, 0, wxALL, WXC_FROM_DIP(2));
    m_yMaxLimit->SetMinSize(wxSize(10,7));
    
    m_zMaxLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,7)), wxALIGN_CENTRE);
    m_zMaxLimit->SetBackgroundColour(wxColour(wxT("rgb(0,0,0)")));
    wxFont m_zMaxLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_zMaxLimit->SetFont(m_zMaxLimitFont);
    m_zMaxLimit->SetToolTip(_("Z Max Limit"));
    
    flexGridSizer5621->Add(m_zMaxLimit, 0, wxALL, WXC_FROM_DIP(2));
    m_zMaxLimit->SetMinSize(wxSize(10,7));
    
    m_staticLine602341 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine602341, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5635 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5635->SetFlexibleDirection( wxBOTH );
    flexGridSizer5635->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer436->Add(flexGridSizer5635, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText5637 = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0);
    m_staticText5637->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_staticText5637Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5637->SetFont(m_staticText5637Font);
    m_staticText5637->Hide();
    
    flexGridSizer5635->Add(m_staticText5637, 0, wxALL, WXC_FROM_DIP(3));
    
    wxFlexGridSizer* flexGridSizerSupport = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizerSupport->SetFlexibleDirection( wxBOTH );
    flexGridSizerSupport->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5635->Add(flexGridSizerSupport, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_supportButton1State = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(4,17)), 0);
    m_supportButton1State->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_supportButton1State->SetToolTip(_("State Support Button 1"));
    
    flexGridSizerSupport->Add(m_supportButton1State, 0, wxALL, WXC_FROM_DIP(2));
    m_supportButton1State->SetMinSize(wxSize(4,17));
    
    m_supportButton2State = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(4,17)), 0);
    m_supportButton2State->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_supportButton2State->SetToolTip(_("State Support Button 2"));
    
    flexGridSizerSupport->Add(m_supportButton2State, 0, wxALL, WXC_FROM_DIP(2));
    m_supportButton2State->SetMinSize(wxSize(4,17));
    
    m_supportButton3State = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(4,17)), 0);
    m_supportButton3State->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_supportButton3State->SetToolTip(_("State Support Button 3"));
    
    flexGridSizerSupport->Add(m_supportButton3State, 0, wxALL, WXC_FROM_DIP(2));
    m_supportButton3State->SetMinSize(wxSize(4,17));
    
    m_cableConnectedState = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(4,17)), 0);
    m_cableConnectedState->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_cableConnectedState->SetToolTip(_("Stated Cabel Connected"));
    
    flexGridSizerSupport->Add(m_cableConnectedState, 0, wxALL, WXC_FROM_DIP(2));
    m_cableConnectedState->SetMinSize(wxSize(4,17));
    
    m_toolPowerObserverState = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(4,17)), 0);
    m_toolPowerObserverState->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_toolPowerObserverState->SetToolTip(_("State Tool Power Observer"));
    
    flexGridSizerSupport->Add(m_toolPowerObserverState, 0, wxALL, WXC_FROM_DIP(2));
    m_toolPowerObserverState->SetMinSize(wxSize(4,17));
    
    m_staticLine6023412 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine6023412, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_updateManagerUpdate = new wxStaticBitmap(m_statusBar, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("bookmark-2")), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0 );
    m_updateManagerUpdate->SetToolTip(_("Update Manager Thread Heartbeat"));
    
    flexGridSizer436->Add(m_updateManagerUpdate, 0, wxALL, WXC_FROM_DIP(5));
    
    m_svgUnitCalulator = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    wxFont m_svgUnitCalulatorFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_svgUnitCalulator->SetFont(m_svgUnitCalulatorFont);
    
    m_auimgrMain->AddPane(m_svgUnitCalulator, wxAuiPaneInfo().Name(wxT("UnitCalculator")).Direction(wxAUI_DOCK_TOP).Layer(0).Row(1).Position(0).BestSize(100,24).MinSize(100,24).MaxSize(100,24).Fixed().CaptionVisible(false).MaximizeButton(false).CloseButton(true).MinimizeButton(false).PinButton(true));
    
    wxFlexGridSizer* flexGridSizer3251 = new wxFlexGridSizer(1, 8, 0, 0);
    flexGridSizer3251->SetFlexibleDirection( wxBOTH );
    flexGridSizer3251->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3251->AddGrowableCol(4);
    flexGridSizer3251->AddGrowableRow(0);
    m_svgUnitCalulator->SetSizer(flexGridSizer3251);
    
    m_staticText3261 = new wxStaticText(m_svgUnitCalulator, wxID_ANY, _("From"), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,-1)), 0);
    m_staticText3261->SetToolTip(_("SVG Unit Calculator"));
    
    flexGridSizer3251->Add(m_staticText3261, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbUCUnitFromArr;
    m_cbUCUnitFromArr.Add(wxT("px"));
    m_cbUCUnitFromArr.Add(wxT("pc"));
    m_cbUCUnitFromArr.Add(wxT("pt"));
    m_cbUCUnitFromArr.Add(wxT("mm"));
    m_cbUCUnitFromArr.Add(wxT("cm"));
    m_cbUCUnitFromArr.Add(wxT("m"));
    m_cbUCUnitFromArr.Add(wxT("in"));
    m_cbUCUnitFromArr.Add(wxT("ft"));
    m_cbUCUnitFrom = new wxComboBox(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,20)), m_cbUCUnitFromArr, wxCB_READONLY);
    wxFont m_cbUCUnitFromFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbUCUnitFrom->SetFont(m_cbUCUnitFromFont);
    m_cbUCUnitFrom->SetToolTip(_("SVG Unit Calculator - Unit from"));
    m_cbUCUnitFrom->SetSelection(0);
    
    flexGridSizer3251->Add(m_cbUCUnitFrom, 0, wxALL, WXC_FROM_DIP(2));
    m_cbUCUnitFrom->SetMinSize(wxSize(-1,20));
    
    m_staticText3259 = new wxStaticText(m_svgUnitCalulator, wxID_ANY, _("to"), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,-1)), 0);
    wxFont m_staticText3259Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText3259->SetFont(m_staticText3259Font);
    m_staticText3259->SetToolTip(_("SVG Unit Calculator"));
    
    flexGridSizer3251->Add(m_staticText3259, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbUCUnitToArr;
    m_cbUCUnitToArr.Add(wxT("px"));
    m_cbUCUnitToArr.Add(wxT("pc"));
    m_cbUCUnitToArr.Add(wxT("pt"));
    m_cbUCUnitToArr.Add(wxT("mm"));
    m_cbUCUnitToArr.Add(wxT("cm"));
    m_cbUCUnitToArr.Add(wxT("m"));
    m_cbUCUnitToArr.Add(wxT("in"));
    m_cbUCUnitToArr.Add(wxT("ft"));
    m_cbUCUnitTo = new wxComboBox(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,20)), m_cbUCUnitToArr, wxCB_READONLY);
    wxFont m_cbUCUnitToFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbUCUnitTo->SetFont(m_cbUCUnitToFont);
    m_cbUCUnitTo->SetToolTip(_("SVG Unit Calculator - Unit To"));
    m_cbUCUnitTo->SetSelection(3);
    
    flexGridSizer3251->Add(m_cbUCUnitTo, 0, wxALL, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer3266 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3266->SetFlexibleDirection( wxBOTH );
    flexGridSizer3266->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3266->AddGrowableCol(0);
    flexGridSizer3266->AddGrowableCol(1);
    
    flexGridSizer3251->Add(flexGridSizer3266, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_cbUCValueFrom = new wxTextCtrl(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,20)), 0);
    wxFont m_cbUCValueFromFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbUCValueFrom->SetFont(m_cbUCValueFromFont);
    m_cbUCValueFrom->SetToolTip(_("SVG Unit Calculator - Value From"));
    #if wxVERSION_NUMBER >= 3000
    m_cbUCValueFrom->SetHint(wxT(""));
    #endif
    
    flexGridSizer3266->Add(m_cbUCValueFrom, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_cbUCValueFrom->SetMinSize(wxSize(-1,20));
    
    m_cbUCValueTo = new wxTextCtrl(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,-1)), wxTE_READONLY);
    wxFont m_cbUCValueToFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbUCValueTo->SetFont(m_cbUCValueToFont);
    m_cbUCValueTo->SetToolTip(_("SVG Unit Calculator - Value to"));
    #if wxVERSION_NUMBER >= 3000
    m_cbUCValueTo->SetHint(wxT(""));
    #endif
    
    flexGridSizer3266->Add(m_cbUCValueTo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine6549 = new wxStaticLine(m_svgUnitCalulator, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3251->Add(m_staticLine6549, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    wxFlexGridSizer* flexGridSizer6539 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer6539->SetFlexibleDirection( wxBOTH );
    flexGridSizer6539->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6539->AddGrowableRow(0);
    
    flexGridSizer3251->Add(flexGridSizer6539, 1, wxALL, WXC_FROM_DIP(0));
    
    wxArrayString m_cbMetricUnitFromArr;
    m_cbMetricUnitFromArr.Add(wxT("mm"));
    m_cbMetricUnitFromArr.Add(wxT("stepsX"));
    m_cbMetricUnitFromArr.Add(wxT("stepsY"));
    m_cbMetricUnitFromArr.Add(wxT("stepsZ"));
    m_cbMetricUnitFrom = new wxComboBox(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,20)), m_cbMetricUnitFromArr, wxCB_READONLY);
    wxFont m_cbMetricUnitFromFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbMetricUnitFrom->SetFont(m_cbMetricUnitFromFont);
    m_cbMetricUnitFrom->SetSelection(1);
    
    flexGridSizer6539->Add(m_cbMetricUnitFrom, 0, wxALL, WXC_FROM_DIP(2));
    
    m_metricValueFrom = new wxTextCtrl(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,20)), 0);
    wxFont m_metricValueFromFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_metricValueFrom->SetFont(m_metricValueFromFont);
    #if wxVERSION_NUMBER >= 3000
    m_metricValueFrom->SetHint(wxT(""));
    #endif
    
    flexGridSizer6539->Add(m_metricValueFrom, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxArrayString m_cbMetricUnitToArr;
    m_cbMetricUnitToArr.Add(wxT("mm"));
    m_cbMetricUnitToArr.Add(wxT("stepsX"));
    m_cbMetricUnitToArr.Add(wxT("stepsY"));
    m_cbMetricUnitToArr.Add(wxT("stepsZ"));
    m_cbMetricUnitTo = new wxComboBox(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,20)), m_cbMetricUnitToArr, wxCB_READONLY);
    wxFont m_cbMetricUnitToFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbMetricUnitTo->SetFont(m_cbMetricUnitToFont);
    m_cbMetricUnitTo->SetSelection(0);
    
    flexGridSizer6539->Add(m_cbMetricUnitTo, 0, wxALL, WXC_FROM_DIP(2));
    
    m_metricValueTo = new wxTextCtrl(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,20)), wxTE_READONLY);
    wxFont m_metricValueToFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_metricValueTo->SetFont(m_metricValueToFont);
    #if wxVERSION_NUMBER >= 3000
    m_metricValueTo->SetHint(wxT(""));
    #endif
    
    flexGridSizer6539->Add(m_metricValueTo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_btUCClose = new wxButton(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(20,20)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btUCClose->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("window-close-3")), wxLEFT);
    m_btUCClose->SetBitmapMargins(2,2);
    #endif
    m_btUCClose->SetToolTip(_("SVG Unit Calculator - Close"));
    
    flexGridSizer3251->Add(m_btUCClose, 0, wxALL, WXC_FROM_DIP(2));
    m_btUCClose->SetMinSize(wxSize(20,20));
    
    m_serialSpyView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_serialSpyView, wxAuiPaneInfo().Name(wxT("SerialSpy")).Caption(_("CNC Serial Spy")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(1).Position(0).BestSize(100,100).MinSize(100,100).MaxSize(100,100).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    
    wxFlexGridSizer* flexGridSizer27261 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer27261->SetFlexibleDirection( wxBOTH );
    flexGridSizer27261->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer27261->AddGrowableCol(0);
    flexGridSizer27261->AddGrowableRow(1);
    m_serialSpyView->SetSizer(flexGridSizer27261);
    
    wxFlexGridSizer* flexGridSizer27302 = new wxFlexGridSizer(1, 10, 0, 0);
    flexGridSizer27302->SetFlexibleDirection( wxBOTH );
    flexGridSizer27302->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer27261->Add(flexGridSizer27302, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_enableSerialSpy = new wxButton(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_enableSerialSpy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-connected")), wxLEFT);
    m_enableSerialSpy->SetBitmapMargins(2,2);
    #endif
    m_enableSerialSpy->SetToolTip(_("Enable Serial Spy"));
    
    flexGridSizer27302->Add(m_enableSerialSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_enableSerialSpy->SetMinSize(wxSize(24,24));
    
    m_MarkSerialSpy = new wxButton(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_MarkSerialSpy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("book-add")), wxLEFT);
    m_MarkSerialSpy->SetBitmapMargins(2,2);
    #endif
    m_MarkSerialSpy->SetToolTip(_("Add a Marker"));
    
    flexGridSizer27302->Add(m_MarkSerialSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_MarkSerialSpy->SetMinSize(wxSize(24,24));
    
    m_clearSerialSpy = new wxButton(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_clearSerialSpy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_clearSerialSpy->SetBitmapMargins(2,2);
    #endif
    m_clearSerialSpy->SetToolTip(_("Clear the Spy Trace"));
    
    flexGridSizer27302->Add(m_clearSerialSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_clearSerialSpy->SetMinSize(wxSize(24,24));
    
    wxArrayString m_cbSerialSpyModeArr;
    m_cbSerialSpyModeArr.Add(wxT("Spy - In"));
    m_cbSerialSpyModeArr.Add(wxT("Spy - Out"));
    m_cbSerialSpyModeArr.Add(wxT("Spy - In/Out"));
    m_cbSerialSpyMode = new wxComboBox(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(-1,24)), m_cbSerialSpyModeArr, wxCB_READONLY);
    wxFont m_cbSerialSpyModeFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbSerialSpyMode->SetFont(m_cbSerialSpyModeFont);
    m_cbSerialSpyMode->SetSelection(2);
    
    flexGridSizer27302->Add(m_cbSerialSpyMode, 0, wxALL, WXC_FROM_DIP(1));
    m_cbSerialSpyMode->SetMinSize(wxSize(-1,24));
    
    wxFlexGridSizer* flexGridSizer4704 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4704->SetFlexibleDirection( wxBOTH );
    flexGridSizer4704->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4704->AddGrowableCol(0);
    flexGridSizer4704->AddGrowableRow(0);
    
    flexGridSizer27261->Add(flexGridSizer4704, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer3833 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3833->SetFlexibleDirection( wxBOTH );
    flexGridSizer3833->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3833->AddGrowableCol(0);
    flexGridSizer3833->AddGrowableRow(0);
    
    flexGridSizer4704->Add(flexGridSizer3833, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitter4728 = new wxSplitterWindow(m_serialSpyView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(-1,-1)), wxSP_3D);
    m_splitter4728->SetSashGravity(0.7);
    m_splitter4728->SetMinimumPaneSize(10);
    
    flexGridSizer3833->Add(m_splitter4728, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_splitterPage4732 = new wxPanel(m_splitter4728, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter4728, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer4740 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4740->SetFlexibleDirection( wxBOTH );
    flexGridSizer4740->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4740->AddGrowableCol(0);
    flexGridSizer4740->AddGrowableRow(0);
    m_splitterPage4732->SetSizer(flexGridSizer4740);
    
    m_serialSpy = new wxTextCtrl(m_splitterPage4732, wxID_ANY, wxT("Only a placeholder;Dont install any events similar the drawPane3D"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage4732, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxALWAYS_SHOW_SB);
    wxFont m_serialSpyFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_serialSpy->SetFont(m_serialSpyFont);
    
    flexGridSizer4740->Add(m_serialSpy, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_splitterPage4736 = new wxPanel(m_splitter4728, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter4728, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitter4728->SplitHorizontally(m_splitterPage4732, m_splitterPage4736, 0);
    
    wxFlexGridSizer* flexGridSizer4738 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4738->SetFlexibleDirection( wxBOTH );
    flexGridSizer4738->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4738->AddGrowableCol(0);
    flexGridSizer4738->AddGrowableRow(0);
    m_splitterPage4736->SetSizer(flexGridSizer4738);
    
    m_serialSpyDetails = new wxTextCtrl(m_splitterPage4736, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage4736, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxALWAYS_SHOW_SB|wxHSCROLL|wxVSCROLL);
    m_serialSpyDetails->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_serialSpyDetails->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_serialSpyDetailsFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_serialSpyDetails->SetFont(m_serialSpyDetailsFont);
    
    flexGridSizer4738->Add(m_serialSpyDetails, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer4706 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer4706->SetFlexibleDirection( wxBOTH );
    flexGridSizer4706->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer4704->Add(flexGridSizer4706, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_clearSerialSpyOnConnect = new wxCheckBox(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(-1,-1)), 0);
    m_clearSerialSpyOnConnect->SetValue(true);
    m_clearSerialSpyOnConnect->SetToolTip(_("Clear on Connect"));
    
    flexGridSizer4706->Add(m_clearSerialSpyOnConnect, 0, wxALL, WXC_FROM_DIP(0));
    
    m_clearSerialSpyBeforNextRun = new wxCheckBox(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(-1,-1)), 0);
    m_clearSerialSpyBeforNextRun->SetValue(true);
    m_clearSerialSpyBeforNextRun->SetToolTip(_("Clear before next Run"));
    
    flexGridSizer4706->Add(m_clearSerialSpyBeforNextRun, 0, wxALL, WXC_FROM_DIP(0));
    
    m_debuggerView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_debuggerView, wxAuiPaneInfo().Name(wxT("Debugger")).Caption(_("CNC Debugger")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(1).Position(0).BestSize(100,100).MinSize(100,100).MaxSize(100,100).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    
    wxFlexGridSizer* flexGridSizer4502 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4502->SetFlexibleDirection( wxBOTH );
    flexGridSizer4502->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4502->AddGrowableCol(0);
    flexGridSizer4502->AddGrowableRow(0);
    m_debuggerView->SetSizer(flexGridSizer4502);
    
    wxArrayString m_debuggerPropertyManagerGridArr;
    wxUnusedVar(m_debuggerPropertyManagerGridArr);
    wxArrayInt m_debuggerPropertyManagerGridIntArr;
    wxUnusedVar(m_debuggerPropertyManagerGridIntArr);
    m_debuggerPropertyManagerGrid = new wxPropertyGridManager(m_debuggerView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_debuggerView, wxSize(-1,-1)), wxPG_TOOLBAR|wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED|wxHSCROLL|wxVSCROLL);
    
    flexGridSizer4502->Add(m_debuggerPropertyManagerGrid, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_positionMonitorView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(284,140)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_positionMonitorView, wxAuiPaneInfo().Name(wxT("PositionMonitor")).Caption(_("CNC Position Monitor")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(1).Position(0).BestSize(384,40).MinSize(384,40).MaxSize(384,40).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    m_auimgrMain->Update();
    
    wxFlexGridSizer* flexGridSizer4480 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer4480->SetFlexibleDirection( wxBOTH );
    flexGridSizer4480->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4480->AddGrowableCol(0);
    flexGridSizer4480->AddGrowableRow(1);
    m_positionMonitorView->SetSizer(flexGridSizer4480);
    
    wxFlexGridSizer* flexGridSizer4485 = new wxFlexGridSizer(1, 6, 0, 0);
    flexGridSizer4485->SetFlexibleDirection( wxBOTH );
    flexGridSizer4485->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4485->AddGrowableCol(5);
    flexGridSizer4485->AddGrowableRow(0);
    
    flexGridSizer4480->Add(flexGridSizer4485, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btTogglePosSpy = new wxBitmapToggleButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-connected")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), 0);
    m_btTogglePosSpy->SetToolTip(_("Disable Position Spy"));
    m_btTogglePosSpy->SetValue(true);
    
    flexGridSizer4485->Add(m_btTogglePosSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_btTogglePosSpy->SetMinSize(wxSize(24,24));
    
    m_btCopyPosSpy = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("edit-copy-7")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_btCopyPosSpy->SetToolTip(_("Copy PositionSpy"));
    
    flexGridSizer4485->Add(m_btCopyPosSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_btCopyPosSpy->SetMinSize(wxSize(24,24));
    
    m_btSearchPosSpy = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("system-search-2")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSearchPosSpy->SetToolTip(_("Search Reference"));
    
    flexGridSizer4485->Add(m_btSearchPosSpy, 0, wxALL, WXC_FROM_DIP(0));
    
    m_btClearPositionSpy = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_btClearPositionSpy->SetToolTip(_("Clear Position Spy"));
    
    flexGridSizer4485->Add(m_btClearPositionSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_btClearPositionSpy->SetMinSize(wxSize(24,24));
    
    wxArrayString m_cbContentPosSpyArr;
    m_cbContentPosSpyArr.Add(wxT("Content - App Pos"));
    m_cbContentPosSpyArr.Add(wxT("Content - Ctl Pos"));
    m_cbContentPosSpy = new wxComboBox(m_positionMonitorView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,-1)), m_cbContentPosSpyArr, wxCB_READONLY);
    wxFont m_cbContentPosSpyFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbContentPosSpy->SetFont(m_cbContentPosSpyFont);
    m_cbContentPosSpy->SetSelection(1);
    
    flexGridSizer4485->Add(m_cbContentPosSpy, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer4524 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4524->SetFlexibleDirection( wxBOTH );
    flexGridSizer4524->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4524->AddGrowableCol(0);
    flexGridSizer4524->AddGrowableRow(0);
    
    flexGridSizer4485->Add(flexGridSizer4524, 1, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4660 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4660->SetFlexibleDirection( wxBOTH );
    flexGridSizer4660->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4660->AddGrowableCol(0);
    flexGridSizer4660->AddGrowableRow(0);
    flexGridSizer4660->AddGrowableRow(1);
    
    flexGridSizer4524->Add(flexGridSizer4660, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_staticText4526 = new wxStaticText(m_positionMonitorView, wxID_ANY, _("(lightly async)"), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,12)), 0);
    wxFont m_staticText4526Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_ITALIC, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText4526->SetFont(m_staticText4526Font);
    
    flexGridSizer4660->Add(m_staticText4526, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    m_staticText4526->SetMinSize(wxSize(-1,12));
    
    m_positionSpyCount = new wxTextCtrl(m_positionMonitorView, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,12)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_positionSpyCount->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_MENU));
    m_positionSpyCount->SetForegroundColour(wxColour(wxT("rgb(0,0,128)")));
    wxFont m_positionSpyCountFont(7, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Courier New"));
    m_positionSpyCount->SetFont(m_positionSpyCountFont);
    #if wxVERSION_NUMBER >= 3000
    m_positionSpyCount->SetHint(wxT(""));
    #endif
    
    flexGridSizer4660->Add(m_positionSpyCount, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_positionSpyCount->SetMinSize(wxSize(-1,12));
    
    flexGridSizer4524->Add(3, 0, 1, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer4714 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4714->SetFlexibleDirection( wxBOTH );
    flexGridSizer4714->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4714->AddGrowableCol(0);
    flexGridSizer4714->AddGrowableRow(0);
    
    flexGridSizer4480->Add(flexGridSizer4714, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4711 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4711->SetFlexibleDirection( wxBOTH );
    flexGridSizer4711->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4711->AddGrowableCol(0);
    flexGridSizer4711->AddGrowableRow(0);
    
    flexGridSizer4714->Add(flexGridSizer4711, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_positionSpy = new wxListCtrl(m_positionMonitorView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,-1)), wxLC_VIRTUAL|wxLC_REPORT);
    m_positionSpy->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer4711->Add(m_positionSpy, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_speedPanel = new wxPanel(m_positionMonitorView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,5)), wxTAB_TRAVERSAL);
    m_speedPanel->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_speedPanel->SetToolTip(_("Feed Speed"));
    
    flexGridSizer4711->Add(m_speedPanel, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_speedPanel->SetMinSize(wxSize(-1,5));
    
    wxFlexGridSizer* flexGridSizer4716 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer4716->SetFlexibleDirection( wxBOTH );
    flexGridSizer4716->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer4714->Add(flexGridSizer4716, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_bmpButton47181 = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-first-view")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_bmpButton47181->SetToolTip(_("Goto - First Ref"));
    
    flexGridSizer4716->Add(m_bmpButton47181, 0, wxALL, WXC_FROM_DIP(0));
    m_bmpButton47181->SetMinSize(wxSize(24,24));
    
    m_bmpButton4718 = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-last-view")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_bmpButton4718->SetToolTip(_("Goto - First Ref"));
    
    flexGridSizer4716->Add(m_bmpButton4718, 0, wxALL, WXC_FROM_DIP(0));
    m_bmpButton4718->SetMinSize(wxSize(24,24));
    
    m_bmpButton47182 = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-up-7")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_bmpButton47182->SetToolTip(_("Goto - Prev Ref"));
    
    flexGridSizer4716->Add(m_bmpButton47182, 0, wxALL, WXC_FROM_DIP(0));
    m_bmpButton47182->SetMinSize(wxSize(24,24));
    
    m_bmpButton47183 = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-down-7")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_bmpButton47183->SetToolTip(_("Goto - Next Ref"));
    
    flexGridSizer4716->Add(m_bmpButton47183, 0, wxALL, WXC_FROM_DIP(0));
    m_bmpButton47183->SetMinSize(wxSize(24,24));
    
    m_menuBar = new wxMenuBar(wxMB_DOCKABLE);
    this->SetMenuBar(m_menuBar);
    
    m_menuFile = new wxMenu();
    m_menuBar->Append(m_menuFile, _("&File"));
    
    m_miNewTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("New Template"), wxT(""), wxITEM_NORMAL);
    m_miNewTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-new-3")));
    m_menuFile->Append(m_miNewTemplate);
    
    m_miOpenTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("Open Template"), wxT(""), wxITEM_NORMAL);
    m_miOpenTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-open-5")));
    m_menuFile->Append(m_miOpenTemplate);
    
    m_miReloadTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("Reload Template"), wxT(""), wxITEM_NORMAL);
    m_miReloadTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_reload")));
    m_menuFile->Append(m_miReloadTemplate);
    
    m_miSaveTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("Save Template"), wxT(""), wxITEM_NORMAL);
    m_miSaveTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-save-6")));
    m_menuFile->Append(m_miSaveTemplate);
    
    m_miSaveTemplateAs = new wxMenuItem(m_menuFile, wxID_ANY, _("Save Template as"), wxT(""), wxITEM_NORMAL);
    m_miSaveTemplateAs->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-save-as (2)")));
    m_menuFile->Append(m_miSaveTemplateAs);
    
    m_miSaveEmuOutput = new wxMenuItem(m_menuFile, wxID_ANY, _("Save current outbound as new Template"), wxT(""), wxITEM_NORMAL);
    m_miSaveEmuOutput->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-export")));
    m_menuFile->Append(m_miSaveEmuOutput);
    
    m_menuFile->AppendSeparator();
    
    m_miExit = new wxMenuItem(m_menuFile, wxID_ANY, _("Exit"), wxT(""), wxITEM_NORMAL);
    m_miExit->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("application-exit-4")));
    m_menuFile->Append(m_miExit);
    
    m_menuView = new wxMenu();
    m_menuBar->Append(m_menuView, _("View"));
    
    m_miToolbar = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Toolbar"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miToolbar);
    
    m_miViewStatusbar = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Statusbar"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewStatusbar);
    
    m_miViewTemplateManager = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Template Manager"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewTemplateManager);
    
    m_miViewMainView = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Source View"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewMainView);
    
    m_miViewMonitor = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Motion Monitor"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewMonitor);
    
    m_miViewZAxis = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Z Axis"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewZAxis);
    
    m_miViewPosMonitor = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Position Monitor"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewPosMonitor);
    
    m_miViewDebugger = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Debugger"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewDebugger);
    
    m_miViewSpy = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Serial Spy"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewSpy);
    
    m_miViewLogger = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Logger"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewLogger);
    
    m_miViewUnitCalculator = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Unit Caluclator"), wxT(""), wxITEM_CHECK);
    m_menuView->Append(m_miViewUnitCalculator);
    
    m_menuView->AppendSeparator();
    
    m_miViewAll = new wxMenuItem(m_menuView, wxID_ANY, _("View all Panes"), wxT(""), wxITEM_NORMAL);
    m_miViewAll->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-choose-3")));
    m_menuView->Append(m_miViewAll);
    
    m_miHideAll = new wxMenuItem(m_menuView, wxID_ANY, _("Hide all Panes"), wxT(""), wxITEM_NORMAL);
    m_miHideAll->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-close")));
    m_menuView->Append(m_miHideAll);
    
    m_menuPerspective = new wxMenu();
    m_menuBar->Append(m_menuPerspective, _("Perspective"));
    
    m_miPerspectiveDefault = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Perspective - 'Default'"), wxT(""), wxITEM_NORMAL);
    m_miPerspectiveDefault->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-choose")));
    m_menuPerspective->Append(m_miPerspectiveDefault);
    
    m_miPerspectiveRun = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Perspective - 'Run'"), wxT(""), wxITEM_NORMAL);
    m_miPerspectiveRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-choose")));
    m_menuPerspective->Append(m_miPerspectiveRun);
    
    m_miPerspectiveDebug = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Perspective - 'Debug'"), wxT(""), wxITEM_NORMAL);
    m_miPerspectiveDebug->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-choose")));
    m_menuPerspective->Append(m_miPerspectiveDebug);
    
    m_miPerspectiveSource = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Perspective - 'Source'"), wxT(""), wxITEM_NORMAL);
    m_miPerspectiveSource->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-choose")));
    m_menuPerspective->Append(m_miPerspectiveSource);
    
    m_menuPerspective->AppendSeparator();
    
    m_menuSavePerspectiveDefault = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Save Perspective as 'Default'"), wxT(""), wxITEM_NORMAL);
    m_menuSavePerspectiveDefault->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-save-3")));
    m_menuPerspective->Append(m_menuSavePerspectiveDefault);
    
    m_menuSavePerspectiveRun = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Save Perspective as 'Run'"), wxT(""), wxITEM_NORMAL);
    m_menuSavePerspectiveRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-save-3")));
    m_menuPerspective->Append(m_menuSavePerspectiveRun);
    
    m_menuSavePerspectiveDebug = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Save Perspective as 'Debug'"), wxT(""), wxITEM_NORMAL);
    m_menuSavePerspectiveDebug->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-save-3")));
    m_menuPerspective->Append(m_menuSavePerspectiveDebug);
    
    m_menuSavePerspectiveSource = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Save Perspective as 'Source'"), wxT(""), wxITEM_NORMAL);
    m_menuSavePerspectiveSource->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-save-3")));
    m_menuPerspective->Append(m_menuSavePerspectiveSource);
    
    m_menuPerspective->AppendSeparator();
    
    m_menuAddUserPerspective = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Add User Perspective"), wxT(""), wxITEM_NORMAL);
    m_menuAddUserPerspective->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-plus")));
    m_menuPerspective->Append(m_menuAddUserPerspective);
    
    m_menuRenameUserPerspective = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Rename User Perspective"), wxT(""), wxITEM_NORMAL);
    m_menuRenameUserPerspective->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("edit-rename")));
    m_menuPerspective->Append(m_menuRenameUserPerspective);
    
    m_menuRemoveUserPerspective = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Remove User Perspective"), wxT(""), wxITEM_NORMAL);
    m_menuRemoveUserPerspective->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-execute_stop")));
    m_menuPerspective->Append(m_menuRemoveUserPerspective);
    
    m_menuMonitoring = new wxMenu();
    m_menuBar->Append(m_menuMonitoring, _("Monitoring"));
    
    m_menuItemUpdCoors = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Update Coordinates"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemUpdCoors);
    m_menuItemUpdCoors->Check();
    
    m_menuItemUpdDraw = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Online Preview"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemUpdDraw);
    m_menuItemUpdDraw->Check();
    
    m_menuItemAllowEvents = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Allow Events"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemAllowEvents);
    m_menuItemAllowEvents->Check();
    
    m_menuItemDisplayUserAgent = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Display User Agent Content"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemDisplayUserAgent);
    m_menuItemDisplayUserAgent->Check();
    
    m_menuItemToolControls = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Update Tool-/Speed-Controls"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemToolControls);
    m_menuItemToolControls->Check();
    
    m_menuMonitoring->AppendSeparator();
    
    m_menuItemDebugSerial = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Spy Serial (very slow)"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemDebugSerial);
    
    m_menuItemFreezeLogger = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Unfreeze Logger"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemFreezeLogger);
    m_menuItemFreezeLogger->Check();
    
    m_menuMonitoring->AppendSeparator();
    
    m_menuItemMinMonitoring = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Setup Minimal Monitoring"), wxT(""), wxITEM_NORMAL);
    m_menuItemMinMonitoring->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("network-wireless-low (2)")));
    m_menuMonitoring->Append(m_menuItemMinMonitoring);
    
    m_menuItemNormalMonitoring = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Setup Standard Monitoring"), wxT(""), wxITEM_NORMAL);
    m_menuItemNormalMonitoring->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("network-wireless-full (2)")));
    m_menuMonitoring->Append(m_menuItemNormalMonitoring);
    
    m_menuRequestor = new wxMenu();
    m_menuBar->Append(m_menuRequestor, _("Controller Requests"));
    
    m_miRqtIdleMessages = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Request Idle Messages"), wxT(""), wxITEM_CHECK);
    m_menuRequestor->Append(m_miRqtIdleMessages);
    m_miRqtIdleMessages->Check();
    
    m_menuRequestor->AppendSeparator();
    
    m_miRqtVersion = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Software Version"), wxT(""), wxITEM_NORMAL);
    m_miRqtVersion->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("enumerator")));
    m_menuRequestor->Append(m_miRqtVersion);
    
    m_miRqtHeartbeat = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Heartbeat"), wxT(""), wxITEM_NORMAL);
    m_miRqtHeartbeat->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("heart-2")));
    m_menuRequestor->Append(m_miRqtHeartbeat);
    
    m_miRqtConfig = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Current Config"), wxT(""), wxITEM_NORMAL);
    m_miRqtConfig->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("system-settings")));
    m_menuRequestor->Append(m_miRqtConfig);
    
    m_miRqtPins = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Pin Report"), wxT(""), wxITEM_NORMAL);
    m_miRqtPins->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("messagebox_info")));
    m_menuRequestor->Append(m_miRqtPins);
    
    m_menuRequestor->AppendSeparator();
    
    m_menuItemInfoMessage = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Test - Info Message"), wxT(""), wxITEM_NORMAL);
    m_menuItemInfoMessage->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-information (2)")));
    m_menuRequestor->Append(m_menuItemInfoMessage);
    
    m_menuItemWarningMessage = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Test - Warning Message"), wxT(""), wxITEM_NORMAL);
    m_menuItemWarningMessage->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-warning-3 (2)")));
    m_menuRequestor->Append(m_menuItemWarningMessage);
    
    m_menuItemErrorMessage = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Test - Error Message"), wxT(""), wxITEM_NORMAL);
    m_menuItemErrorMessage->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-error-5 (2)")));
    m_menuRequestor->Append(m_menuItemErrorMessage);
    
    m_menuRequestor->AppendSeparator();
    
    m_miMotorEnableState = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Enable stepper motors"), wxT(""), wxITEM_CHECK);
    m_menuRequestor->Append(m_miMotorEnableState);
    
    m_menuRequestor->AppendSeparator();
    
    m_miRqtCurPos = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Current Position"), wxT(""), wxITEM_NORMAL);
    m_miRqtCurPos->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("messagebox_info")));
    m_menuRequestor->Append(m_miRqtCurPos);
    
    m_miRqtLimit = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Current Limit State"), wxT(""), wxITEM_NORMAL);
    m_miRqtLimit->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("messagebox_info")));
    m_menuRequestor->Append(m_miRqtLimit);
    
    m_menuRequestor->AppendSeparator();
    
    m_miRqtReset = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Reset Controller"), wxT(""), wxITEM_NORMAL);
    m_miRqtReset->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("git-reset")));
    m_menuRequestor->Append(m_miRqtReset);
    
    m_menuRequestor->AppendSeparator();
    
    m_miRqtSendInterrupt = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Interrupt"), _("wewe"), wxITEM_NORMAL);
    m_miRqtSendInterrupt->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("weather-lightning (2)")));
    m_menuRequestor->Append(m_miRqtSendInterrupt);
    
    m_menuRequestor->AppendSeparator();
    
    m_miRqtWarmstart = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Warmstart"), wxT(""), wxITEM_NORMAL);
    m_miRqtWarmstart->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("system-run-4")));
    m_menuRequestor->Append(m_miRqtWarmstart);
    
    m_menuTools = new wxMenu();
    m_menuBar->Append(m_menuTools, _("Tools"));
    
    m_miPathGenerator = new wxMenuItem(m_menuTools, wxID_ANY, _("SVG Path Generator"), wxT(""), wxITEM_NORMAL);
    m_miPathGenerator->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("executable")));
    m_menuTools->Append(m_miPathGenerator);
    
    m_miIniFile = new wxMenuItem(m_menuTools, wxID_ANY, _("Configuration File"), wxT(""), wxITEM_NORMAL);
    m_miIniFile->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("executable")));
    m_menuTools->Append(m_miIniFile);
    
    m_miExternalEditor = new wxMenuItem(m_menuTools, wxID_ANY, _("External Editor"), wxT(""), wxITEM_NORMAL);
    m_miExternalEditor->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("executable")));
    m_menuTools->Append(m_miExternalEditor);
    
    m_miCalculator = new wxMenuItem(m_menuTools, wxID_ANY, _("Calculator"), wxT(""), wxITEM_NORMAL);
    m_miCalculator->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("executable")));
    m_menuTools->Append(m_miCalculator);
    
    m_miPyCam = new wxMenuItem(m_menuTools, wxID_ANY, _("PyCAM"), wxT(""), wxITEM_NORMAL);
    m_miPyCam->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("executable")));
    m_menuTools->Append(m_miPyCam);
    
    m_menuTest = new wxMenu();
    m_menuBar->Append(m_menuTest, _("Test"));
    
    m_miUnitTestFramework = new wxMenuItem(m_menuTest, wxID_ANY, _("Unit Test Framework . . ."), wxT(""), wxITEM_NORMAL);
    m_miUnitTestFramework->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-available-3 (2)")));
    m_menuTest->Append(m_miUnitTestFramework);
    
    m_menuTest->AppendSeparator();
    
    m_miLoopRepeatTest = new wxMenuItem(m_menuTest, wxID_ANY, _("Loop Repeat Test [Run]"), wxT(""), wxITEM_NORMAL);
    m_miLoopRepeatTest->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-available-3 (2)")));
    m_menuTest->Append(m_miLoopRepeatTest);
    
    m_menuTest->AppendSeparator();
    
    m_miTest1 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test Function 1"), wxT(""), wxITEM_NORMAL);
    m_miTest1->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-inactive (2)")));
    m_menuTest->Append(m_miTest1);
    
    m_miTest2 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test Function 2"), wxT(""), wxITEM_NORMAL);
    m_miTest2->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-inactive (2)")));
    m_menuTest->Append(m_miTest2);
    
    m_miTest3 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test Function 3"), wxT(""), wxITEM_NORMAL);
    m_miTest3->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-inactive (2)")));
    m_menuTest->Append(m_miTest3);
    
    m_miTest4 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test Function 4"), wxT(""), wxITEM_NORMAL);
    m_miTest4->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-inactive (2)")));
    m_menuTest->Append(m_miTest4);
    
    m_menuAbout = new wxMenu();
    m_menuBar->Append(m_menuAbout, _("Help"));
    
    m_menuItem5965 = new wxMenuItem(m_menuAbout, wxID_ANY, _("Trace Session ID"), wxT(""), wxITEM_NORMAL);
    m_menuItem5965->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("database-key")));
    m_menuAbout->Append(m_menuItem5965);
    
    m_miOpenSessionDlg = new wxMenuItem(m_menuAbout, wxID_ANY, _("Open Session Directory"), wxT(""), wxITEM_NORMAL);
    m_miOpenSessionDlg->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("folder-development")));
    m_menuAbout->Append(m_miOpenSessionDlg);
    
    m_menuAbout->AppendSeparator();
    
    m_menuItem309 = new wxMenuItem(m_menuAbout, wxID_ANY, _("About"), wxT(""), wxITEM_NORMAL);
    m_menuItem309->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("help-about")));
    m_menuAbout->Append(m_menuItem309);
    
    m_startupTimer = new wxTimer;
    m_startupTimer->Start(100, true);
    
    m_serialTimer = new wxTimer;
    m_serialTimer->Start(500, false);
    
    m_traceTimer = new wxTimer;
    m_traceTimer->Start(500, false);
    
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_mainViewBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_mainViewBook);
    } else {
        wxPersistenceManager::Get().Restore(m_mainViewBook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_templateNotebook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_templateNotebook);
    } else {
        wxPersistenceManager::Get().Restore(m_templateNotebook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_editorToolBox)){
        wxPersistenceManager::Get().RegisterAndRestore(m_editorToolBox);
    } else {
        wxPersistenceManager::Get().Restore(m_editorToolBox);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_simpleBookSourceExt)){
        wxPersistenceManager::Get().RegisterAndRestore(m_simpleBookSourceExt);
    } else {
        wxPersistenceManager::Get().Restore(m_simpleBookSourceExt);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook4561)){
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook4561);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook4561);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_configurationToolbook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_configurationToolbook);
    } else {
        wxPersistenceManager::Get().Restore(m_configurationToolbook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook5687)){
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook5687);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook5687);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_listbook7170)){
        wxPersistenceManager::Get().RegisterAndRestore(m_listbook7170);
    } else {
        wxPersistenceManager::Get().Restore(m_listbook7170);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_testCaseBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_testCaseBook);
    } else {
        wxPersistenceManager::Get().Restore(m_testCaseBook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_monitorViewBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_monitorViewBook);
    } else {
        wxPersistenceManager::Get().Restore(m_monitorViewBook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_outboundNotebook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_outboundNotebook);
    } else {
        wxPersistenceManager::Get().Restore(m_outboundNotebook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebookConfig)){
        wxPersistenceManager::Get().RegisterAndRestore(m_notebookConfig);
    } else {
        wxPersistenceManager::Get().Restore(m_notebookConfig);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_simpleBookOutBoundEditor)){
        wxPersistenceManager::Get().RegisterAndRestore(m_simpleBookOutBoundEditor);
    } else {
        wxPersistenceManager::Get().Restore(m_simpleBookOutBoundEditor);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_loggerNotebook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_loggerNotebook);
    } else {
        wxPersistenceManager::Get().Restore(m_loggerNotebook);
    }
    #endif
    
    SetName(wxT("MainFrameBClass"));
    SetSize(1600,1000);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_ACTIVATE, wxActivateEventHandler(MainFrameBClass::activateMainWindow), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_CLOSE, wxAuiManagerEventHandler(MainFrameBClass::closeAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_MAXIMIZE, wxAuiManagerEventHandler(MainFrameBClass::maximizeAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_RESTORE, wxAuiManagerEventHandler(MainFrameBClass::restoreAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_RENDER, wxAuiManagerEventHandler(MainFrameBClass::renderAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_BUTTON, wxAuiManagerEventHandler(MainFrameBClass::buttonAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_ACTIVATED, wxAuiManagerEventHandler(MainFrameBClass::activateAuiPane), NULL, this);
    m_bmpButton4490->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleTemplateManager), NULL, this);
    m_searchConnections->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::searchAvailiablePorts), NULL, this);
    m_portSelector->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectPort), NULL, this);
    m_connect->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::connect), NULL, this);
    m_refPosition->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::setReferencePosition), NULL, this);
    m_btSelectSetup->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectSetup), NULL, this);
    m_btSelectReferences->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectReferences), NULL, this);
    m_btSelectManuallyMove->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectManuallyMove), NULL, this);
    m_btSelectTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectTemplate), NULL, this);
    m_btSelectInboundTest->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectTestPage), NULL, this);
    m_btSelectInboundPreview->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectInboundPreview), NULL, this);
    m_btSelectCncPreview->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectCncMonitor), NULL, this);
    m_btSelectTemplatePreview->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectTemplatePreview), NULL, this);
    this->Connect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBClass::cfgStepDelayDropDown), NULL, this);
    this->Connect(m_miCfgStepDelayMin->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayMin), NULL, this);
    this->Connect(m_miCfgStepDelayMax->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayMax), NULL, this);
    this->Connect(m_miCfgSimulateArduino->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayArduino), NULL, this);
    m_stepDelay->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::stepDelayChanged), NULL, this);
    m_stepDelay->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::stepDelayThumbtrack), NULL, this);
    m_cbRenderResolution->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateRenderResolution), NULL, this);
    m_rcReset->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcReset), NULL, this);
    m_btProbeMode->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clickProbeMode), NULL, this);
    m_btSpeedControl->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clickSpeedControl), NULL, this);
    m_rcDebugConfig->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcDebugConfig), NULL, this);
    m_rcDebug->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcDebug), NULL, this);
    m_rcNextBreakpoint->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextBreakpoint), NULL, this);
    m_rcNextStep->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextStep), NULL, this);
    m_rcFinish->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcFinish), NULL, this);
    m_rcSecureDlg->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcSecureDlg), NULL, this);
    m_rcRun->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcRun), NULL, this);
    m_rcPause->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcPause), NULL, this);
    m_rcStop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcStop), NULL, this);
    m_btnEmergenyStop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::emergencyStop), NULL, this);
    m_mainViewSelector->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(MainFrameBClass::mainViewSelectorSelected), NULL, this);
    m_mainViewBook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(MainFrameBClass::cncMainViewChanged), NULL, this);
    m_openSourceExtern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSourceExtern), NULL, this);
    m_openSvgExtern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSvgExtern), NULL, this);
    m_saveTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveTemplateFromButton), NULL, this);
    m_reloadTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::reloadTemplateFromButton), NULL, this);
    m_renameTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::renameTemplateFromButton), NULL, this);
    m_removeTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::removeTemplateFromButton), NULL, this);
    m_btSvgToggleWordWrap->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleTemplateWordWrapMode), NULL, this);
    m_btPathGenerator->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openSVGPathGenerator), NULL, this);
    m_tbCaseSensitive->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbRegEx->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbHighLight->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_sourceEditSearch->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::svgEditSearchTextChanged), NULL, this);
    m_sourceEditSearch->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::svgEditSelected), NULL, this);
    m_svgEditFind->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFind), NULL, this);
    m_svgEditFindPrev->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFindPrev), NULL, this);
    m_cbBinaryViewMode->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectBinaryEditorViewMode), NULL, this);
    m_btExtractSourceAsNewTpl->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::extractSourceAsNewTpl), NULL, this);
    m_dvListCtrlSvgUAInboundPathList->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAInboundPathList), NULL, this);
    m_dvListCtrlSvgUAUseDirective->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAUseDirectiveList), NULL, this);
    m_dvListCtrlSvgUADetailInfo->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUADetailInfo), NULL, this);
    m_loadConfiguration->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::loadConfiguration), NULL, this);
    m_saveConfiguration->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveConfiguration), NULL, this);
    m_configurationToolbook->Connect(wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED, wxToolbookEventHandler(MainFrameBClass::changeConfigToolbook), NULL, this);
    m_pgMgrSetup->Connect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(MainFrameBClass::setupGridChanged), NULL, this);
    m_pgMgrSetup->Connect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(MainFrameBClass::setupGridChanging), NULL, this);
    m_pgMgrSetup->Connect(wxEVT_PG_SELECTED, wxPropertyGridEventHandler(MainFrameBClass::setupGridSelected), NULL, this);
    m_pgMgrSetup->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::setupGridCommandButton), NULL, this);
    m_speedConfigSlider->Connect(wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler(MainFrameBClass::changeSpeedConfigSlider), NULL, this);
    m_speedConfigSlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeSpeedConfigSlider), NULL, this);
    m_speedConfigSlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::changeSpeedConfigSlider), NULL, this);
    m_speedConfigStepsX->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updatedSpeedConfigSteps), NULL, this);
    m_speedConfigStepsY->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updatedSpeedConfigSteps), NULL, this);
    m_speedConfigStepsZ->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updatedSpeedConfigSteps), NULL, this);
    m_speedConfigAccelAxis->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updatedSpeedConfigAccelAxis), NULL, this);
    m_moveHome->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveHome), NULL, this);
    m_moveXYtoZero->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXY), NULL, this);
    m_moveXYZtoZero->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXYZ), NULL, this);
    m_moveZtoZero->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroZ), NULL, this);
    m_xToMax->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMax), NULL, this);
    m_xToMid->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMid), NULL, this);
    m_xToMin->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMin), NULL, this);
    m_yToMax->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMax), NULL, this);
    m_yToMid->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMid), NULL, this);
    m_yToMin->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMin), NULL, this);
    m_zToMax->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMax), NULL, this);
    m_zToMid->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMid), NULL, this);
    m_zToMin->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMin), NULL, this);
    m_zToTop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToTop), NULL, this);
    m_zToBottom->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToBottom), NULL, this);
    m_manuallyToolId->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectManuallyToolId), NULL, this);
    m_manuallySpeedSlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySpeedSlider), NULL, this);
    m_manuallySpeedSlider->Connect(wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler(MainFrameBClass::changeManuallySpeedSlider), NULL, this);
    m_manuallySpeedSlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::changeManuallySpeedSlider), NULL, this);
    m_minManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyXSlider), NULL, this);
    m_metricX->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricX), NULL, this);
    m_maxManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyXSlider), NULL, this);
    m_zeroManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyXSlider), NULL, this);
    m_signManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyXSlider), NULL, this);
    m_xManuallySlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderX), NULL, this);
    m_xManuallySlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderX), NULL, this);
    m_minManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyYSlider), NULL, this);
    m_metricY->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricY), NULL, this);
    m_maxManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyYSlider), NULL, this);
    m_zeroManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyYSlider), NULL, this);
    m_signManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyYSlider), NULL, this);
    m_yManuallySlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderY), NULL, this);
    m_yManuallySlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderY), NULL, this);
    m_minManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyZSlider), NULL, this);
    m_metricZ->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricZ), NULL, this);
    m_maxManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyZSlider), NULL, this);
    m_zeroManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyZSlider), NULL, this);
    m_signManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyZSlider), NULL, this);
    m_zManuallySlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderZ), NULL, this);
    m_zManuallySlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderZ), NULL, this);
    m_testCaseBook->Connect(wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, wxListbookEventHandler(MainFrameBClass::testCaseBookChanged), NULL, this);
    m_testIntervalMode->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectTestIntervalMode), NULL, this);
    m_testCountX->Connect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::testCountXSpinCtl), NULL, this);
    m_testCountX->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::testCountXUpdated), NULL, this);
    m_testDimTakeX->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverX), NULL, this);
    m_testDimTakeY->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverY), NULL, this);
    m_testDimTakeZ->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverZ), NULL, this);
    m_testDimTakeAll->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverAll), NULL, this);
    m_testToggleEndSwitch->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testEndSwitchEvaluation), NULL, this);
    m_testToggleTool->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testSwitchToolOnOff), NULL, this);
    m_lruList->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBClass::lruListItemSelected), NULL, this);
    m_lruList->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBClass::lruListItemActivated), NULL, this);
    m_lruList->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::lruListItemLeave), NULL, this);
    m_lruList->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownLruList), NULL, this);
    m_monitorViewSelector->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(MainFrameBClass::monitorViewSelectorSelected), NULL, this);
    m_outboundNotebook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(MainFrameBClass::outboundBookChanged), NULL, this);
    m_outboundNotebook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, wxNotebookEventHandler(MainFrameBClass::outboundBookChanging), NULL, this);
    m_notebookConfig->Connect(wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, wxListbookEventHandler(MainFrameBClass::nootebookConfigChanged), NULL, this);
    m_btCancelRun->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::cancelRun), NULL, this);
    m_btConfirmRun->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::confirmRun), NULL, this);
    m_btClearSetterList->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearSetterList), NULL, this);
    m_btRefreshSetterList->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::refreshSetterList), NULL, this);
    m_btRequestCtlConfig->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerConfigFromButton), NULL, this);
    m_btRequestControllerPins->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerPinsFromButton), NULL, this);
    m_btClearMsgHistory->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearControllerMsgHistory), NULL, this);
    m_btSaveOutboundAsTemplate1->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveOutboundAsNewTplFromButton), NULL, this);
    m_btnOrigin->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorOrigin), NULL, this);
    m_btnRuler->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorRuler), NULL, this);
    m_btnHelpLines->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorHelpLines), NULL, this);
    m_btnBoundBox->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorBoundBox), NULL, this);
    m_btnPosMarker->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorPostionMarker), NULL, this);
    m_btnFlyPath->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorFlyPath), NULL, this);
    m_switchMonitoing->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::switchMonitoring), NULL, this);
    m_3D_Refreh->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::refreshMotionMonitor), NULL, this);
    m_3D_Clear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearMotionMonitor), NULL, this);
    m_displayInterval->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::displayIntervalThumbtrack), NULL, this);
    m_displayInterval->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::displayIntervalChanged), NULL, this);
    m_displayInterval->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::displayIntervalKeyDown), NULL, this);
    m_btShowHideStatistics->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleMotionMonitorStatisticPane), NULL, this);
    m_btShowHideReplayPane->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleMotionMonitorReplayPane), NULL, this);
    m_motionMonitorOptionDlg->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleMotionMonitorOptionPane), NULL, this);
    m_3D_Top->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromTop3D), NULL, this);
    m_3D_Bottom->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromBottom3D), NULL, this);
    m_3D_Front->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromFront3D), NULL, this);
    m_3D_Rear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRear3D), NULL, this);
    m_3D_Left->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromLeft3D), NULL, this);
    m_3D_Right->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRight3D), NULL, this);
    m_3D_Perspective1->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective2->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective3->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective4->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_btSaveOutboundAsTemplate2->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveOutboundAsNewTplFromButton), NULL, this);
    m_btToggleOutboundEditorWordWrap->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleOutboundEditorWordWrap), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_logger->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::UpdateLogger), NULL, this);
    m_logger->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownLogger), NULL, this);
    m_logger->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickLogger), NULL, this);
    m_clearLogger->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearLogger), NULL, this);
    m_copyLogger->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyLogger), NULL, this);
    m_gamepadState->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickUpdateManagerThreadSymbol), NULL, this);
    m_tmpTraceInfo->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::traceTextUpdated), NULL, this);
    m_cmdDuration->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickDurationCount), NULL, this);
    m_unit->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUnit), NULL, this);
    m_xMinLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMinLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMinLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_xMaxLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMaxLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMaxLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_updateManagerUpdate->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickUpdateManagerThreadSymbol), NULL, this);
    m_cbUCUnitFrom->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUCUnitFrom), NULL, this);
    m_cbUCUnitTo->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUCUnitTo), NULL, this);
    m_cbUCValueFrom->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::selectUCChangeFrom), NULL, this);
    m_cbMetricUnitFrom->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectMetricUnitFrom), NULL, this);
    m_metricValueFrom->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::selectMetricUnitFromValue), NULL, this);
    m_cbMetricUnitTo->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectMetricUnitTo), NULL, this);
    m_btUCClose->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::closeUnitCalculator), NULL, this);
    m_serialSpyView->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveSerialSpy), NULL, this);
    m_serialSpyView->Connect(wxEVT_MOUSE_CAPTURE_LOST, wxMouseCaptureLostEventHandler(MainFrameBClass::leaveSerialSpy), NULL, this);
    m_enableSerialSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::enableSerialSpy), NULL, this);
    m_MarkSerialSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::markSerialSpy), NULL, this);
    m_clearSerialSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearSerialSpy), NULL, this);
    m_cbSerialSpyMode->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectSerialSpyMode), NULL, this);
    m_btTogglePosSpy->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::togglePositionSpy), NULL, this);
    m_btCopyPosSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyPositionSpy), NULL, this);
    m_btSearchPosSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::searchPosSpy), NULL, this);
    m_btClearPositionSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearPositionSpy), NULL, this);
    m_cbContentPosSpy->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectPositionSpyContent), NULL, this);
    m_speedPanel->Connect(wxEVT_PAINT, wxPaintEventHandler(MainFrameBClass::onPaintSpeedPanel), NULL, this);
    m_bmpButton47181->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypFirstId), NULL, this);
    m_bmpButton4718->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypLastId), NULL, this);
    m_bmpButton47182->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypPrevId), NULL, this);
    m_bmpButton47183->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypNextId), NULL, this);
    this->Connect(m_miNewTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::newTemplate), NULL, this);
    this->Connect(m_miOpenTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openTemplate), NULL, this);
    this->Connect(m_miReloadTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::reloadTemplate), NULL, this);
    this->Connect(m_miSaveTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplate), NULL, this);
    this->Connect(m_miSaveTemplateAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplateAs), NULL, this);
    this->Connect(m_miSaveEmuOutput->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveOutboundAsNewTplFromMenu), NULL, this);
    this->Connect(m_miExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnExit), NULL, this);
    this->Connect(m_miToolbar->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewToolbar), NULL, this);
    this->Connect(m_miViewStatusbar->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewStatusbar), NULL, this);
    this->Connect(m_miViewTemplateManager->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewTemplateManager), NULL, this);
    this->Connect(m_miViewMainView->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMainView), NULL, this);
    this->Connect(m_miViewMonitor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMonitor), NULL, this);
    this->Connect(m_miViewZAxis->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewZAxis), NULL, this);
    this->Connect(m_miViewPosMonitor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewPosistionMonitor), NULL, this);
    this->Connect(m_miViewDebugger->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewDebugger), NULL, this);
    this->Connect(m_miViewSpy->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewSpy), NULL, this);
    this->Connect(m_miViewLogger->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewLogger), NULL, this);
    this->Connect(m_miViewUnitCalculator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewUnitCalculator), NULL, this);
    this->Connect(m_miViewAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewAllAuiPanes), NULL, this);
    this->Connect(m_miHideAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::hideAllAuiPanes), NULL, this);
    this->Connect(m_miPerspectiveDefault->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspective), NULL, this);
    this->Connect(m_miPerspectiveRun->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspective), NULL, this);
    this->Connect(m_miPerspectiveDebug->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspective), NULL, this);
    this->Connect(m_miPerspectiveSource->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspective), NULL, this);
    this->Connect(m_menuSavePerspectiveDefault->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspective), NULL, this);
    this->Connect(m_menuSavePerspectiveRun->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspective), NULL, this);
    this->Connect(m_menuSavePerspectiveDebug->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspective), NULL, this);
    this->Connect(m_menuSavePerspectiveSource->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspective), NULL, this);
    this->Connect(m_menuAddUserPerspective->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::addUserPerspective), NULL, this);
    this->Connect(m_menuRenameUserPerspective->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::renameUserPerspective), NULL, this);
    this->Connect(m_menuRemoveUserPerspective->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::removeUserPerspective), NULL, this);
    this->Connect(m_menuItemUpdCoors->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineUpdateCoordinates), NULL, this);
    this->Connect(m_menuItemUpdDraw->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineOnlineDrawing), NULL, this);
    this->Connect(m_menuItemAllowEvents->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineAllowEvents), NULL, this);
    this->Connect(m_menuItemDisplayUserAgent->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::displayUserAgent), NULL, this);
    this->Connect(m_menuItemToolControls->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::updateToolControls), NULL, this);
    this->Connect(m_menuItemDebugSerial->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineDebugSerial), NULL, this);
    this->Connect(m_menuItemMinMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineMinMonitoring), NULL, this);
    this->Connect(m_menuItemNormalMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineNormalMonitoring), NULL, this);
    this->Connect(m_miRqtIdleMessages->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::toggleIdleRequests), NULL, this);
    this->Connect(m_miRqtVersion->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestVersion), NULL, this);
    this->Connect(m_miRqtHeartbeat->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestHeartbeat), NULL, this);
    this->Connect(m_miRqtConfig->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestConfig), NULL, this);
    this->Connect(m_miRqtPins->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestPins), NULL, this);
    this->Connect(m_menuItemInfoMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestInfoMessage), NULL, this);
    this->Connect(m_menuItemWarningMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestWarningMessage), NULL, this);
    this->Connect(m_menuItemErrorMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestErrorMessage), NULL, this);
    this->Connect(m_miMotorEnableState->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestEnableStepperMotors), NULL, this);
    this->Connect(m_miRqtCurPos->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentPos), NULL, this);
    this->Connect(m_miRqtLimit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentLimitState), NULL, this);
    this->Connect(m_miRqtReset->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestReset), NULL, this);
    this->Connect(m_miRqtSendInterrupt->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestInterrupt), NULL, this);
    this->Connect(m_miRqtWarmstart->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::warmStartController), NULL, this);
    this->Connect(m_miPathGenerator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openSVGPathGenerator), NULL, this);
    this->Connect(m_miIniFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openConfigurationFile), NULL, this);
    this->Connect(m_miExternalEditor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openExternalEditor), NULL, this);
    this->Connect(m_miCalculator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openCalculator), NULL, this);
    this->Connect(m_miPyCam->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openPyCam), NULL, this);
    this->Connect(m_miUnitTestFramework->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::unitTestFramework), NULL, this);
    this->Connect(m_miLoopRepeatTest->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loopRepeatTest), NULL, this);
    this->Connect(m_miTest1->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction1), NULL, this);
    this->Connect(m_miTest2->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction2), NULL, this);
    this->Connect(m_miTest3->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction3), NULL, this);
    this->Connect(m_miTest4->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction4), NULL, this);
    this->Connect(m_menuItem5965->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::traceSessionId), NULL, this);
    this->Connect(m_miOpenSessionDlg->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openSessionDialog), NULL, this);
    this->Connect(m_menuItem309->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnAbout), NULL, this);
    m_startupTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::startupTimer), NULL, this);
    m_serialTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::serialTimer), NULL, this);
    m_traceTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::traceTimer), NULL, this);
    
    this->Connect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBClass::ShowAuiToolMenu), NULL, this);
}

MainFrameBClass::~MainFrameBClass()
{
    this->Disconnect(wxEVT_ACTIVATE, wxActivateEventHandler(MainFrameBClass::activateMainWindow), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_CLOSE, wxAuiManagerEventHandler(MainFrameBClass::closeAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_MAXIMIZE, wxAuiManagerEventHandler(MainFrameBClass::maximizeAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_RESTORE, wxAuiManagerEventHandler(MainFrameBClass::restoreAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_RENDER, wxAuiManagerEventHandler(MainFrameBClass::renderAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_BUTTON, wxAuiManagerEventHandler(MainFrameBClass::buttonAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_ACTIVATED, wxAuiManagerEventHandler(MainFrameBClass::activateAuiPane), NULL, this);
    m_bmpButton4490->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleTemplateManager), NULL, this);
    m_searchConnections->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::searchAvailiablePorts), NULL, this);
    m_portSelector->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectPort), NULL, this);
    m_connect->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::connect), NULL, this);
    m_refPosition->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::setReferencePosition), NULL, this);
    m_btSelectSetup->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectSetup), NULL, this);
    m_btSelectReferences->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectReferences), NULL, this);
    m_btSelectManuallyMove->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectManuallyMove), NULL, this);
    m_btSelectTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectTemplate), NULL, this);
    m_btSelectInboundTest->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectTestPage), NULL, this);
    m_btSelectInboundPreview->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectInboundPreview), NULL, this);
    m_btSelectCncPreview->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectCncMonitor), NULL, this);
    m_btSelectTemplatePreview->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectTemplatePreview), NULL, this);
    this->Disconnect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBClass::cfgStepDelayDropDown), NULL, this);
    this->Disconnect(m_miCfgStepDelayMin->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayMin), NULL, this);
    this->Disconnect(m_miCfgStepDelayMax->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayMax), NULL, this);
    this->Disconnect(m_miCfgSimulateArduino->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayArduino), NULL, this);
    m_stepDelay->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::stepDelayChanged), NULL, this);
    m_stepDelay->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::stepDelayThumbtrack), NULL, this);
    m_cbRenderResolution->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateRenderResolution), NULL, this);
    m_rcReset->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcReset), NULL, this);
    m_btProbeMode->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clickProbeMode), NULL, this);
    m_btSpeedControl->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clickSpeedControl), NULL, this);
    m_rcDebugConfig->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcDebugConfig), NULL, this);
    m_rcDebug->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcDebug), NULL, this);
    m_rcNextBreakpoint->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextBreakpoint), NULL, this);
    m_rcNextStep->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextStep), NULL, this);
    m_rcFinish->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcFinish), NULL, this);
    m_rcSecureDlg->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcSecureDlg), NULL, this);
    m_rcRun->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcRun), NULL, this);
    m_rcPause->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcPause), NULL, this);
    m_rcStop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcStop), NULL, this);
    m_btnEmergenyStop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::emergencyStop), NULL, this);
    m_mainViewSelector->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(MainFrameBClass::mainViewSelectorSelected), NULL, this);
    m_mainViewBook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(MainFrameBClass::cncMainViewChanged), NULL, this);
    m_openSourceExtern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSourceExtern), NULL, this);
    m_openSvgExtern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSvgExtern), NULL, this);
    m_saveTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveTemplateFromButton), NULL, this);
    m_reloadTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::reloadTemplateFromButton), NULL, this);
    m_renameTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::renameTemplateFromButton), NULL, this);
    m_removeTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::removeTemplateFromButton), NULL, this);
    m_btSvgToggleWordWrap->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleTemplateWordWrapMode), NULL, this);
    m_btPathGenerator->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openSVGPathGenerator), NULL, this);
    m_tbCaseSensitive->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbRegEx->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbHighLight->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_sourceEditSearch->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::svgEditSearchTextChanged), NULL, this);
    m_sourceEditSearch->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::svgEditSelected), NULL, this);
    m_svgEditFind->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFind), NULL, this);
    m_svgEditFindPrev->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFindPrev), NULL, this);
    m_cbBinaryViewMode->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectBinaryEditorViewMode), NULL, this);
    m_btExtractSourceAsNewTpl->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::extractSourceAsNewTpl), NULL, this);
    m_dvListCtrlSvgUAInboundPathList->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAInboundPathList), NULL, this);
    m_dvListCtrlSvgUAUseDirective->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAUseDirectiveList), NULL, this);
    m_dvListCtrlSvgUADetailInfo->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUADetailInfo), NULL, this);
    m_loadConfiguration->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::loadConfiguration), NULL, this);
    m_saveConfiguration->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveConfiguration), NULL, this);
    m_configurationToolbook->Disconnect(wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED, wxToolbookEventHandler(MainFrameBClass::changeConfigToolbook), NULL, this);
    m_pgMgrSetup->Disconnect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(MainFrameBClass::setupGridChanged), NULL, this);
    m_pgMgrSetup->Disconnect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(MainFrameBClass::setupGridChanging), NULL, this);
    m_pgMgrSetup->Disconnect(wxEVT_PG_SELECTED, wxPropertyGridEventHandler(MainFrameBClass::setupGridSelected), NULL, this);
    m_pgMgrSetup->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::setupGridCommandButton), NULL, this);
    m_speedConfigSlider->Disconnect(wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler(MainFrameBClass::changeSpeedConfigSlider), NULL, this);
    m_speedConfigSlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeSpeedConfigSlider), NULL, this);
    m_speedConfigSlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::changeSpeedConfigSlider), NULL, this);
    m_speedConfigStepsX->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updatedSpeedConfigSteps), NULL, this);
    m_speedConfigStepsY->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updatedSpeedConfigSteps), NULL, this);
    m_speedConfigStepsZ->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updatedSpeedConfigSteps), NULL, this);
    m_speedConfigAccelAxis->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updatedSpeedConfigAccelAxis), NULL, this);
    m_moveHome->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveHome), NULL, this);
    m_moveXYtoZero->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXY), NULL, this);
    m_moveXYZtoZero->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXYZ), NULL, this);
    m_moveZtoZero->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroZ), NULL, this);
    m_xToMax->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMax), NULL, this);
    m_xToMid->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMid), NULL, this);
    m_xToMin->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMin), NULL, this);
    m_yToMax->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMax), NULL, this);
    m_yToMid->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMid), NULL, this);
    m_yToMin->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMin), NULL, this);
    m_zToMax->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMax), NULL, this);
    m_zToMid->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMid), NULL, this);
    m_zToMin->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMin), NULL, this);
    m_zToTop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToTop), NULL, this);
    m_zToBottom->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToBottom), NULL, this);
    m_manuallyToolId->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectManuallyToolId), NULL, this);
    m_manuallySpeedSlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySpeedSlider), NULL, this);
    m_manuallySpeedSlider->Disconnect(wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler(MainFrameBClass::changeManuallySpeedSlider), NULL, this);
    m_manuallySpeedSlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::changeManuallySpeedSlider), NULL, this);
    m_minManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyXSlider), NULL, this);
    m_metricX->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricX), NULL, this);
    m_maxManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyXSlider), NULL, this);
    m_zeroManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyXSlider), NULL, this);
    m_signManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyXSlider), NULL, this);
    m_xManuallySlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderX), NULL, this);
    m_xManuallySlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderX), NULL, this);
    m_minManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyYSlider), NULL, this);
    m_metricY->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricY), NULL, this);
    m_maxManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyYSlider), NULL, this);
    m_zeroManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyYSlider), NULL, this);
    m_signManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyYSlider), NULL, this);
    m_yManuallySlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderY), NULL, this);
    m_yManuallySlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderY), NULL, this);
    m_minManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyZSlider), NULL, this);
    m_metricZ->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricZ), NULL, this);
    m_maxManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyZSlider), NULL, this);
    m_zeroManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyZSlider), NULL, this);
    m_signManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyZSlider), NULL, this);
    m_zManuallySlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderZ), NULL, this);
    m_zManuallySlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderZ), NULL, this);
    m_testCaseBook->Disconnect(wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, wxListbookEventHandler(MainFrameBClass::testCaseBookChanged), NULL, this);
    m_testIntervalMode->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectTestIntervalMode), NULL, this);
    m_testCountX->Disconnect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::testCountXSpinCtl), NULL, this);
    m_testCountX->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::testCountXUpdated), NULL, this);
    m_testDimTakeX->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverX), NULL, this);
    m_testDimTakeY->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverY), NULL, this);
    m_testDimTakeZ->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverZ), NULL, this);
    m_testDimTakeAll->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverAll), NULL, this);
    m_testToggleEndSwitch->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testEndSwitchEvaluation), NULL, this);
    m_testToggleTool->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testSwitchToolOnOff), NULL, this);
    m_lruList->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBClass::lruListItemSelected), NULL, this);
    m_lruList->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBClass::lruListItemActivated), NULL, this);
    m_lruList->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::lruListItemLeave), NULL, this);
    m_lruList->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownLruList), NULL, this);
    m_monitorViewSelector->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(MainFrameBClass::monitorViewSelectorSelected), NULL, this);
    m_outboundNotebook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(MainFrameBClass::outboundBookChanged), NULL, this);
    m_outboundNotebook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, wxNotebookEventHandler(MainFrameBClass::outboundBookChanging), NULL, this);
    m_notebookConfig->Disconnect(wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, wxListbookEventHandler(MainFrameBClass::nootebookConfigChanged), NULL, this);
    m_btCancelRun->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::cancelRun), NULL, this);
    m_btConfirmRun->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::confirmRun), NULL, this);
    m_btClearSetterList->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearSetterList), NULL, this);
    m_btRefreshSetterList->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::refreshSetterList), NULL, this);
    m_btRequestCtlConfig->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerConfigFromButton), NULL, this);
    m_btRequestControllerPins->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerPinsFromButton), NULL, this);
    m_btClearMsgHistory->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearControllerMsgHistory), NULL, this);
    m_btSaveOutboundAsTemplate1->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveOutboundAsNewTplFromButton), NULL, this);
    m_btnOrigin->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorOrigin), NULL, this);
    m_btnRuler->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorRuler), NULL, this);
    m_btnHelpLines->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorHelpLines), NULL, this);
    m_btnBoundBox->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorBoundBox), NULL, this);
    m_btnPosMarker->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorPostionMarker), NULL, this);
    m_btnFlyPath->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::motionMonitorFlyPath), NULL, this);
    m_switchMonitoing->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::switchMonitoring), NULL, this);
    m_3D_Refreh->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::refreshMotionMonitor), NULL, this);
    m_3D_Clear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearMotionMonitor), NULL, this);
    m_displayInterval->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::displayIntervalThumbtrack), NULL, this);
    m_displayInterval->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::displayIntervalChanged), NULL, this);
    m_displayInterval->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::displayIntervalKeyDown), NULL, this);
    m_btShowHideStatistics->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleMotionMonitorStatisticPane), NULL, this);
    m_btShowHideReplayPane->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleMotionMonitorReplayPane), NULL, this);
    m_motionMonitorOptionDlg->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleMotionMonitorOptionPane), NULL, this);
    m_3D_Top->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromTop3D), NULL, this);
    m_3D_Bottom->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromBottom3D), NULL, this);
    m_3D_Front->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromFront3D), NULL, this);
    m_3D_Rear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRear3D), NULL, this);
    m_3D_Left->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromLeft3D), NULL, this);
    m_3D_Right->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRight3D), NULL, this);
    m_3D_Perspective1->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective2->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective3->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective4->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_btSaveOutboundAsTemplate2->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveOutboundAsNewTplFromButton), NULL, this);
    m_btToggleOutboundEditorWordWrap->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleOutboundEditorWordWrap), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_logger->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::UpdateLogger), NULL, this);
    m_logger->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownLogger), NULL, this);
    m_logger->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickLogger), NULL, this);
    m_clearLogger->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearLogger), NULL, this);
    m_copyLogger->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyLogger), NULL, this);
    m_gamepadState->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickUpdateManagerThreadSymbol), NULL, this);
    m_tmpTraceInfo->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::traceTextUpdated), NULL, this);
    m_cmdDuration->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickDurationCount), NULL, this);
    m_unit->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUnit), NULL, this);
    m_xMinLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMinLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMinLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_xMaxLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMaxLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMaxLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_updateManagerUpdate->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickUpdateManagerThreadSymbol), NULL, this);
    m_cbUCUnitFrom->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUCUnitFrom), NULL, this);
    m_cbUCUnitTo->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUCUnitTo), NULL, this);
    m_cbUCValueFrom->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::selectUCChangeFrom), NULL, this);
    m_cbMetricUnitFrom->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectMetricUnitFrom), NULL, this);
    m_metricValueFrom->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::selectMetricUnitFromValue), NULL, this);
    m_cbMetricUnitTo->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectMetricUnitTo), NULL, this);
    m_btUCClose->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::closeUnitCalculator), NULL, this);
    m_serialSpyView->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::leaveSerialSpy), NULL, this);
    m_serialSpyView->Disconnect(wxEVT_MOUSE_CAPTURE_LOST, wxMouseCaptureLostEventHandler(MainFrameBClass::leaveSerialSpy), NULL, this);
    m_enableSerialSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::enableSerialSpy), NULL, this);
    m_MarkSerialSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::markSerialSpy), NULL, this);
    m_clearSerialSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearSerialSpy), NULL, this);
    m_cbSerialSpyMode->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectSerialSpyMode), NULL, this);
    m_btTogglePosSpy->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::togglePositionSpy), NULL, this);
    m_btCopyPosSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyPositionSpy), NULL, this);
    m_btSearchPosSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::searchPosSpy), NULL, this);
    m_btClearPositionSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearPositionSpy), NULL, this);
    m_cbContentPosSpy->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectPositionSpyContent), NULL, this);
    m_speedPanel->Disconnect(wxEVT_PAINT, wxPaintEventHandler(MainFrameBClass::onPaintSpeedPanel), NULL, this);
    m_bmpButton47181->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypFirstId), NULL, this);
    m_bmpButton4718->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypLastId), NULL, this);
    m_bmpButton47182->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypPrevId), NULL, this);
    m_bmpButton47183->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypNextId), NULL, this);
    this->Disconnect(m_miNewTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::newTemplate), NULL, this);
    this->Disconnect(m_miOpenTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openTemplate), NULL, this);
    this->Disconnect(m_miReloadTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::reloadTemplate), NULL, this);
    this->Disconnect(m_miSaveTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplate), NULL, this);
    this->Disconnect(m_miSaveTemplateAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplateAs), NULL, this);
    this->Disconnect(m_miSaveEmuOutput->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveOutboundAsNewTplFromMenu), NULL, this);
    this->Disconnect(m_miExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnExit), NULL, this);
    this->Disconnect(m_miToolbar->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewToolbar), NULL, this);
    this->Disconnect(m_miViewStatusbar->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewStatusbar), NULL, this);
    this->Disconnect(m_miViewTemplateManager->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewTemplateManager), NULL, this);
    this->Disconnect(m_miViewMainView->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMainView), NULL, this);
    this->Disconnect(m_miViewMonitor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMonitor), NULL, this);
    this->Disconnect(m_miViewZAxis->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewZAxis), NULL, this);
    this->Disconnect(m_miViewPosMonitor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewPosistionMonitor), NULL, this);
    this->Disconnect(m_miViewDebugger->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewDebugger), NULL, this);
    this->Disconnect(m_miViewSpy->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewSpy), NULL, this);
    this->Disconnect(m_miViewLogger->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewLogger), NULL, this);
    this->Disconnect(m_miViewUnitCalculator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewUnitCalculator), NULL, this);
    this->Disconnect(m_miViewAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewAllAuiPanes), NULL, this);
    this->Disconnect(m_miHideAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::hideAllAuiPanes), NULL, this);
    this->Disconnect(m_miPerspectiveDefault->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspective), NULL, this);
    this->Disconnect(m_miPerspectiveRun->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspective), NULL, this);
    this->Disconnect(m_miPerspectiveDebug->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspective), NULL, this);
    this->Disconnect(m_miPerspectiveSource->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspective), NULL, this);
    this->Disconnect(m_menuSavePerspectiveDefault->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspective), NULL, this);
    this->Disconnect(m_menuSavePerspectiveRun->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspective), NULL, this);
    this->Disconnect(m_menuSavePerspectiveDebug->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspective), NULL, this);
    this->Disconnect(m_menuSavePerspectiveSource->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspective), NULL, this);
    this->Disconnect(m_menuAddUserPerspective->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::addUserPerspective), NULL, this);
    this->Disconnect(m_menuRenameUserPerspective->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::renameUserPerspective), NULL, this);
    this->Disconnect(m_menuRemoveUserPerspective->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::removeUserPerspective), NULL, this);
    this->Disconnect(m_menuItemUpdCoors->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineUpdateCoordinates), NULL, this);
    this->Disconnect(m_menuItemUpdDraw->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineOnlineDrawing), NULL, this);
    this->Disconnect(m_menuItemAllowEvents->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineAllowEvents), NULL, this);
    this->Disconnect(m_menuItemDisplayUserAgent->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::displayUserAgent), NULL, this);
    this->Disconnect(m_menuItemToolControls->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::updateToolControls), NULL, this);
    this->Disconnect(m_menuItemDebugSerial->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineDebugSerial), NULL, this);
    this->Disconnect(m_menuItemMinMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineMinMonitoring), NULL, this);
    this->Disconnect(m_menuItemNormalMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineNormalMonitoring), NULL, this);
    this->Disconnect(m_miRqtIdleMessages->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::toggleIdleRequests), NULL, this);
    this->Disconnect(m_miRqtVersion->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestVersion), NULL, this);
    this->Disconnect(m_miRqtHeartbeat->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestHeartbeat), NULL, this);
    this->Disconnect(m_miRqtConfig->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestConfig), NULL, this);
    this->Disconnect(m_miRqtPins->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestPins), NULL, this);
    this->Disconnect(m_menuItemInfoMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestInfoMessage), NULL, this);
    this->Disconnect(m_menuItemWarningMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestWarningMessage), NULL, this);
    this->Disconnect(m_menuItemErrorMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestErrorMessage), NULL, this);
    this->Disconnect(m_miMotorEnableState->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestEnableStepperMotors), NULL, this);
    this->Disconnect(m_miRqtCurPos->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentPos), NULL, this);
    this->Disconnect(m_miRqtLimit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentLimitState), NULL, this);
    this->Disconnect(m_miRqtReset->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestReset), NULL, this);
    this->Disconnect(m_miRqtSendInterrupt->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestInterrupt), NULL, this);
    this->Disconnect(m_miRqtWarmstart->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::warmStartController), NULL, this);
    this->Disconnect(m_miPathGenerator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openSVGPathGenerator), NULL, this);
    this->Disconnect(m_miIniFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openConfigurationFile), NULL, this);
    this->Disconnect(m_miExternalEditor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openExternalEditor), NULL, this);
    this->Disconnect(m_miCalculator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openCalculator), NULL, this);
    this->Disconnect(m_miPyCam->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openPyCam), NULL, this);
    this->Disconnect(m_miUnitTestFramework->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::unitTestFramework), NULL, this);
    this->Disconnect(m_miLoopRepeatTest->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loopRepeatTest), NULL, this);
    this->Disconnect(m_miTest1->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction1), NULL, this);
    this->Disconnect(m_miTest2->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction2), NULL, this);
    this->Disconnect(m_miTest3->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction3), NULL, this);
    this->Disconnect(m_miTest4->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction4), NULL, this);
    this->Disconnect(m_menuItem5965->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::traceSessionId), NULL, this);
    this->Disconnect(m_miOpenSessionDlg->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openSessionDialog), NULL, this);
    this->Disconnect(m_menuItem309->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnAbout), NULL, this);
    m_startupTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::startupTimer), NULL, this);
    m_serialTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::serialTimer), NULL, this);
    m_traceTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::traceTimer), NULL, this);
    
    m_auimgrMain->UnInit();
    delete m_auimgrMain;

    std::map<int, wxMenu*>::iterator menuIter = m_dropdownMenus.begin();
    for( ; menuIter != m_dropdownMenus.end(); ++menuIter ) {
        wxDELETE( menuIter->second );
    }
    m_dropdownMenus.clear();

    m_startupTimer->Stop();
    wxDELETE( m_startupTimer );

    m_serialTimer->Stop();
    wxDELETE( m_serialTimer );

    m_traceTimer->Stop();
    wxDELETE( m_traceTimer );

    this->Disconnect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBClass::ShowAuiToolMenu), NULL, this);
}


void MainFrameBClass::ShowAuiToolMenu(wxAuiToolBarEvent& event)
{
    event.Skip();
    if (event.IsDropDownClicked()) {
        wxAuiToolBar* toolbar = wxDynamicCast(event.GetEventObject(), wxAuiToolBar);
        if (toolbar) {
            wxAuiToolBarItem* item = toolbar->FindTool(event.GetId());
            if (item) {
                std::map<int, wxMenu*>::iterator iter = m_dropdownMenus.find(item->GetId());
                if (iter != m_dropdownMenus.end()) {
                    event.Skip(false);
                    wxPoint pt = event.GetItemRect().GetBottomLeft();
                    pt.y++;
                    toolbar->PopupMenu(iter->second, pt);
                }
            }
        }
    }
}
PathGeneratorFrameBase::PathGeneratorFrameBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("16-archive"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer980 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer980->SetFlexibleDirection( wxBOTH );
    flexGridSizer980->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer980->AddGrowableCol(0);
    flexGridSizer980->AddGrowableRow(0);
    this->SetSizer(flexGridSizer980);
    
    m_mainSplitter = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_3D);
    m_mainSplitter->SetSashGravity(0.2);
    m_mainSplitter->SetMinimumPaneSize(24);
    
    flexGridSizer980->Add(m_mainSplitter, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_leftMainSplitterPage = new wxPanel(m_mainSplitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainSplitter, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer3302 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3302->SetFlexibleDirection( wxBOTH );
    flexGridSizer3302->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3302->AddGrowableCol(0);
    flexGridSizer3302->AddGrowableRow(2);
    m_leftMainSplitterPage->SetSizer(flexGridSizer3302);
    
    wxFlexGridSizer* flexGridSizer3315 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer3315->SetFlexibleDirection( wxBOTH );
    flexGridSizer3315->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3315->AddGrowableCol(1);
    
    flexGridSizer3302->Add(flexGridSizer3315, 1, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_btPGMinimizeTree = new wxButton(m_leftMainSplitterPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_leftMainSplitterPage, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGMinimizeTree->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-minus")), wxLEFT);
    m_btPGMinimizeTree->SetBitmapMargins(2,2);
    #endif
    m_btPGMinimizeTree->SetToolTip(_("Minimize Tree"));
    
    flexGridSizer3315->Add(m_btPGMinimizeTree, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGMinimizeTree->SetMinSize(wxSize(24,24));
    
    m_treeSearchText = new wxTextCtrl(m_leftMainSplitterPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_leftMainSplitterPage, wxSize(-1,22)), wxTE_MULTILINE);
    m_treeSearchText->SetToolTip(_("Search First in Tree"));
    
    flexGridSizer3315->Add(m_treeSearchText, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_treeSearchText->SetMinSize(wxSize(-1,22));
    
    m_btSearchTree = new wxButton(m_leftMainSplitterPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_leftMainSplitterPage, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btSearchTree->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-cscope")), wxLEFT);
    m_btSearchTree->SetBitmapMargins(2,2);
    #endif
    m_btSearchTree->SetToolTip(_("Search Next in Tree"));
    
    flexGridSizer3315->Add(m_btSearchTree, 0, wxALL, WXC_FROM_DIP(1));
    m_btSearchTree->SetMinSize(wxSize(24,24));
    
    flexGridSizer3302->Add(0, 3, 1, wxALL, WXC_FROM_DIP(0));
    
    m_templateTree = new wxTreeCtrl(m_leftMainSplitterPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_leftMainSplitterPage, wxSize(-1,-1)), wxTR_DEFAULT_STYLE);
    m_templateTree->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    
    flexGridSizer3302->Add(m_templateTree, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_rightMainSplitterPage = new wxPanel(m_mainSplitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainSplitter, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainSplitter->SplitVertically(m_leftMainSplitterPage, m_rightMainSplitterPage, 0);
    
    wxFlexGridSizer* flexGridSizer3296 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3296->SetFlexibleDirection( wxBOTH );
    flexGridSizer3296->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3296->AddGrowableCol(0);
    flexGridSizer3296->AddGrowableRow(0);
    m_rightMainSplitterPage->SetSizer(flexGridSizer3296);
    
    m_splitter3185 = new wxSplitterWindow(m_rightMainSplitterPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rightMainSplitterPage, wxSize(-1,-1)), wxSP_3D);
    m_splitter3185->SetSashGravity(0.65);
    m_splitter3185->SetMinimumPaneSize(6);
    
    flexGridSizer3296->Add(m_splitter3185, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitterPage3189 = new wxPanel(m_splitter3185, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter3185, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer973 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer973->SetFlexibleDirection( wxBOTH );
    flexGridSizer973->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer973->AddGrowableCol(0);
    flexGridSizer973->AddGrowableRow(1);
    m_splitterPage3189->SetSizer(flexGridSizer973);
    
    wxFlexGridSizer* flexGridSizer3093 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3093->SetFlexibleDirection( wxBOTH );
    flexGridSizer3093->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3093->AddGrowableCol(0);
    flexGridSizer3093->AddGrowableRow(0);
    
    flexGridSizer973->Add(flexGridSizer3093, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxArrayString m_pgPathSelectorArr;
    m_pgPathSelector = new wxComboBox(m_splitterPage3189, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3189, wxSize(-1,-1)), m_pgPathSelectorArr, wxCB_SORT|wxCB_READONLY);
    m_pgPathSelector->SetToolTip(_("Path Selector"));
    m_pgPathSelector->Hide();
    m_pgPathSelector->Enable(false);
    
    flexGridSizer3093->Add(m_pgPathSelector, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer2825 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2825->SetFlexibleDirection( wxBOTH );
    flexGridSizer2825->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2825->AddGrowableCol(0);
    flexGridSizer2825->AddGrowableRow(0);
    
    flexGridSizer973->Add(flexGridSizer2825, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_splitter2932 = new wxSplitterWindow(m_splitterPage3189, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage3189, wxSize(-1,-1)), wxSP_3D);
    m_splitter2932->SetSashGravity(0.7);
    m_splitter2932->SetMinimumPaneSize(10);
    
    flexGridSizer2825->Add(m_splitter2932, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitterPage2936 = new wxPanel(m_splitter2932, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter2932, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer2942 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2942->SetFlexibleDirection( wxBOTH );
    flexGridSizer2942->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2942->AddGrowableCol(0);
    flexGridSizer2942->AddGrowableRow(0);
    m_splitterPage2936->SetSizer(flexGridSizer2942);
    
    m_pgMainBook = new wxNotebook(m_splitterPage2936, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage2936, wxSize(-1,-1)), wxBK_DEFAULT);
    m_pgMainBook->SetName(wxT("m_pgMainBook"));
    wxImageList* m_pgMainBook_il = new wxImageList(16, 16);
    m_pgMainBook->AssignImageList(m_pgMainBook_il);
    
    flexGridSizer2942->Add(m_pgMainBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_pgPreviewPage = new wxPanel(m_pgMainBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgMainBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_pgPreviewPageImgIndex;
    m_pgPreviewPageImgIndex = m_pgMainBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-gtk")));
    m_pgMainBook->AddPage(m_pgPreviewPage, _("Preview"), false, m_pgPreviewPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer3332 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3332->SetFlexibleDirection( wxBOTH );
    flexGridSizer3332->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3332->AddGrowableCol(0);
    flexGridSizer3332->AddGrowableRow(0);
    m_pgPreviewPage->SetSizer(flexGridSizer3332);
    
    #if wxUSE_WEBVIEW
    m_pgPreview = wxWebView::New(m_pgPreviewPage, wxID_ANY, _("about:blank"), wxDefaultPosition, wxDLG_UNIT(m_pgPreviewPage, wxSize(-1,-1)), wxWebViewBackendDefault, 0);
    
    flexGridSizer3332->Add(m_pgPreview, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    #endif // wxUSE_WEBVIEW
    
    m_pgAdditionalCodePage = new wxPanel(m_pgMainBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgMainBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_pgAdditionalCodePageImgIndex;
    m_pgAdditionalCodePageImgIndex = m_pgMainBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-archive")));
    m_pgMainBook->AddPage(m_pgAdditionalCodePage, _("Additional Code"), false, m_pgAdditionalCodePageImgIndex);
    
    wxFlexGridSizer* flexGridSizer3414 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3414->SetFlexibleDirection( wxBOTH );
    flexGridSizer3414->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3414->AddGrowableCol(0);
    flexGridSizer3414->AddGrowableRow(0);
    m_pgAdditionalCodePage->SetSizer(flexGridSizer3414);
    
    m_aditionalCode = new wxTextCtrl(m_pgAdditionalCodePage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_pgAdditionalCodePage, wxSize(-1,-1)), wxTE_RICH|wxTE_MULTILINE|wxTE_DONTWRAP);
    m_aditionalCode->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_aditionalCode->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK));
    wxFont m_aditionalCodeFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_aditionalCode->SetFont(m_aditionalCodeFont);
    
    flexGridSizer3414->Add(m_aditionalCode, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_pgAdditionalInfoPage = new wxPanel(m_pgMainBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgMainBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_pgAdditionalInfoPageImgIndex;
    m_pgAdditionalInfoPageImgIndex = m_pgMainBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-info")));
    m_pgMainBook->AddPage(m_pgAdditionalInfoPage, _("Build Info"), false, m_pgAdditionalInfoPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer3336 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3336->SetFlexibleDirection( wxBOTH );
    flexGridSizer3336->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3336->AddGrowableCol(0);
    flexGridSizer3336->AddGrowableRow(0);
    m_pgAdditionalInfoPage->SetSizer(flexGridSizer3336);
    
    m_additionalInfo = new wxTextCtrl(m_pgAdditionalInfoPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_pgAdditionalInfoPage, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxHSCROLL|wxVSCROLL);
    m_additionalInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_additionalInfo->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_additionalInfoFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_additionalInfo->SetFont(m_additionalInfoFont);
    
    flexGridSizer3336->Add(m_additionalInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_splitterPage2940 = new wxPanel(m_splitter2932, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter2932, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitterPage2940->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_splitter2932->SplitHorizontally(m_splitterPage2936, m_splitterPage2940, 0);
    
    wxFlexGridSizer* flexGridSizer2944 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2944->SetFlexibleDirection( wxBOTH );
    flexGridSizer2944->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2944->AddGrowableCol(0);
    flexGridSizer2944->AddGrowableRow(1);
    m_splitterPage2940->SetSizer(flexGridSizer2944);
    
    wxFlexGridSizer* flexGridSizer3395 = new wxFlexGridSizer(0, 5, 0, 0);
    flexGridSizer3395->SetFlexibleDirection( wxBOTH );
    flexGridSizer3395->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3395->AddGrowableCol(2);
    
    flexGridSizer2944->Add(flexGridSizer3395, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText3401 = new wxStaticText(m_splitterPage2940, wxID_ANY, _("Template:"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), 0);
    m_staticText3401->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText3401Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText3401->SetFont(m_staticText3401Font);
    
    flexGridSizer3395->Add(m_staticText3401, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer3395->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer3406 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3406->SetFlexibleDirection( wxBOTH );
    flexGridSizer3406->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3406->AddGrowableCol(0);
    flexGridSizer3406->AddGrowableRow(1);
    
    flexGridSizer3395->Add(flexGridSizer3406, 0, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    flexGridSizer3406->Add(0, 5, 1, wxALL, WXC_FROM_DIP(0));
    
    m_currentTemplate = new wxTextCtrl(m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    m_currentTemplate->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_currentTemplate->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_currentTemplateFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_currentTemplate->SetFont(m_currentTemplateFont);
    m_currentTemplate->SetToolTip(_("Current Template"));
    #if wxVERSION_NUMBER >= 3000
    m_currentTemplate->SetHint(wxT(""));
    #endif
    
    flexGridSizer3406->Add(m_currentTemplate, 0, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    flexGridSizer3406->Add(0, 2, 1, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer33851 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer33851->SetFlexibleDirection( wxBOTH );
    flexGridSizer33851->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3395->Add(flexGridSizer33851, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_staticText33892 = new wxStaticText(m_splitterPage2940, wxID_ANY, _("Edit mode:"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), 0);
    m_staticText33892->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText33892Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText33892->SetFont(m_staticText33892Font);
    
    flexGridSizer33851->Add(m_staticText33892, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbEditModeArr;
    m_cbEditModeArr.Add(wxT("Readonly"));
    m_cbEditModeArr.Add(wxT("Writable"));
    m_cbEditMode = new wxComboBox(m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), m_cbEditModeArr, wxCB_READONLY);
    wxFont m_cbEditModeFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_cbEditMode->SetFont(m_cbEditModeFont);
    m_cbEditMode->SetSelection(0);
    
    flexGridSizer33851->Add(m_cbEditMode, 0, wxALL, WXC_FROM_DIP(1));
    
    m_updatePreview = new wxButton(m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(22,22)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_updatePreview->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-show_current_line")), wxLEFT);
    m_updatePreview->SetBitmapMargins(2,2);
    #endif
    m_updatePreview->SetToolTip(_("Update Preview without Generate"));
    
    flexGridSizer33851->Add(m_updatePreview, 0, wxALL, WXC_FROM_DIP(0));
    m_updatePreview->SetMinSize(wxSize(22,22));
    
    wxFlexGridSizer* flexGridSizer3385 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer3385->SetFlexibleDirection( wxBOTH );
    flexGridSizer3385->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3395->Add(flexGridSizer3385, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_staticText3389 = new wxStaticText(m_splitterPage2940, wxID_ANY, _("Display mode:"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), 0);
    m_staticText3389->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText3389Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText3389->SetFont(m_staticText3389Font);
    
    flexGridSizer3385->Add(m_staticText3389, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbDisplayModeArr;
    m_cbDisplayModeArr.Add(wxT("Preview"));
    m_cbDisplayModeArr.Add(wxT("Result"));
    m_cbDisplayMode = new wxComboBox(m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), m_cbDisplayModeArr, wxCB_READONLY);
    wxFont m_cbDisplayModeFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_cbDisplayMode->SetFont(m_cbDisplayModeFont);
    m_cbDisplayMode->SetSelection(0);
    
    flexGridSizer3385->Add(m_cbDisplayMode, 0, wxALL, WXC_FROM_DIP(1));
    
    m_tbOutput = new wxToolbook(m_splitterPage2940, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), wxTBK_BUTTONBAR|wxBK_LEFT);
    m_tbOutput->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_tbOutput->SetName(wxT("m_tbOutput"));
    wxImageList* m_tbOutput_il = new wxImageList(16, 16);
    m_tbOutput->AssignImageList(m_tbOutput_il);
    
    flexGridSizer2944->Add(m_tbOutput, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelPreview = new wxPanel(m_tbOutput, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_tbOutput, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelPreview->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    int m_panelPreviewImgIndex;
    m_panelPreviewImgIndex = m_tbOutput_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-fold")));
    m_tbOutput->AddPage(m_panelPreview, _("Preview"), true, m_panelPreviewImgIndex);
    
    wxFlexGridSizer* flexGridSizer3233 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3233->SetFlexibleDirection( wxBOTH );
    flexGridSizer3233->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3233->AddGrowableCol(0);
    flexGridSizer3233->AddGrowableRow(0);
    m_panelPreview->SetSizer(flexGridSizer3233);
    
    m_generatedPreview = new wxTextCtrl(m_panelPreview, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelPreview, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxBORDER_NONE|wxALWAYS_SHOW_SB|wxHSCROLL|wxVSCROLL);
    m_generatedPreview->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_generatedPreview->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK));
    wxFont m_generatedPreviewFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_generatedPreview->SetFont(m_generatedPreviewFont);
    
    flexGridSizer3233->Add(m_generatedPreview, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelResult = new wxPanel(m_tbOutput, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_tbOutput, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelResult->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    int m_panelResultImgIndex;
    m_panelResultImgIndex = m_tbOutput_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-globals")));
    m_tbOutput->AddPage(m_panelResult, _("Result"), false, m_panelResultImgIndex);
    
    wxFlexGridSizer* flexGridSizer3235 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3235->SetFlexibleDirection( wxBOTH );
    flexGridSizer3235->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3235->AddGrowableCol(0);
    flexGridSizer3235->AddGrowableRow(0);
    m_panelResult->SetSizer(flexGridSizer3235);
    
    m_generatedResult = new wxTextCtrl(m_panelResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelResult, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxBORDER_NONE|wxALWAYS_SHOW_SB|wxHSCROLL|wxVSCROLL);
    m_generatedResult->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_generatedResult->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_generatedResultFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_generatedResult->SetFont(m_generatedResultFont);
    
    flexGridSizer3235->Add(m_generatedResult, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelInfo = new wxPanel(m_tbOutput, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_tbOutput, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    int m_panelInfoImgIndex;
    m_panelInfoImgIndex = m_tbOutput_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-info")));
    m_tbOutput->AddPage(m_panelInfo, _("Info"), false, m_panelInfoImgIndex);
    
    wxFlexGridSizer* flexGridSizer3286 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3286->SetFlexibleDirection( wxBOTH );
    flexGridSizer3286->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3286->AddGrowableCol(0);
    flexGridSizer3286->AddGrowableRow(0);
    m_panelInfo->SetSizer(flexGridSizer3286);
    
    m_processInfo = new wxTextCtrl(m_panelInfo, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelInfo, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxBORDER_NONE);
    m_processInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_processInfoFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_processInfo->SetFont(m_processInfoFont);
    
    flexGridSizer3286->Add(m_processInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_splitterPage3193 = new wxPanel(m_splitter3185, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter3185, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitter3185->SplitVertically(m_splitterPage3189, m_splitterPage3193, 0);
    
    wxFlexGridSizer* flexGridSizer986 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer986->SetFlexibleDirection( wxBOTH );
    flexGridSizer986->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer986->AddGrowableCol(0);
    flexGridSizer986->AddGrowableRow(1);
    m_splitterPage3193->SetSizer(flexGridSizer986);
    
    wxFlexGridSizer* flexGridSizer2874 = new wxFlexGridSizer(1, 6, 0, 0);
    flexGridSizer2874->SetFlexibleDirection( wxBOTH );
    flexGridSizer2874->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2874->AddGrowableCol(4);
    flexGridSizer2874->AddGrowableRow(0);
    
    flexGridSizer986->Add(flexGridSizer2874, 0, wxALL|wxEXPAND|wxALIGN_BOTTOM, WXC_FROM_DIP(1));
    
    m_btPGGenerate = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGGenerate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-cog")), wxLEFT);
    m_btPGGenerate->SetBitmapMargins(2,2);
    #endif
    m_btPGGenerate->SetToolTip(_("Generate"));
    
    flexGridSizer2874->Add(m_btPGGenerate, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGGenerate->SetMinSize(wxSize(24,24));
    
    m_btPGClear = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGClear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btPGClear->SetBitmapMargins(2,2);
    #endif
    m_btPGClear->SetToolTip(_("Clear"));
    
    flexGridSizer2874->Add(m_btPGClear, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGClear->SetMinSize(wxSize(24,24));
    
    m_btPGReplaceEdit = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGReplaceEdit->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-marker")), wxLEFT);
    m_btPGReplaceEdit->SetBitmapMargins(2,2);
    #endif
    m_btPGReplaceEdit->SetToolTip(_("Replace at Edit Control"));
    
    flexGridSizer2874->Add(m_btPGReplaceEdit, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGReplaceEdit->SetMinSize(wxSize(24,24));
    
    m_btPGCopy = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGCopy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-copy")), wxLEFT);
    m_btPGCopy->SetBitmapMargins(2,2);
    #endif
    m_btPGCopy->SetToolTip(_("Copy"));
    
    flexGridSizer2874->Add(m_btPGCopy, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGCopy->SetMinSize(wxSize(24,24));
    
    m_btPGSave = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGSave->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxLEFT);
    m_btPGSave->SetBitmapMargins(2,2);
    #endif
    m_btPGSave->SetToolTip(_("Save Template"));
    
    flexGridSizer2874->Add(m_btPGSave, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGSave->SetMinSize(wxSize(24,24));
    
    wxFlexGridSizer* flexGridSizer3225 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer3225->SetFlexibleDirection( wxBOTH );
    flexGridSizer3225->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2874->Add(flexGridSizer3225, 0, wxALL|wxALIGN_RIGHT|wxALIGN_BOTTOM, WXC_FROM_DIP(0));
    
    m_btPGMinimize = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGMinimize->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-minus")), wxLEFT);
    m_btPGMinimize->SetBitmapMargins(2,2);
    #endif
    m_btPGMinimize->SetToolTip(_("Toggle Size"));
    
    flexGridSizer3225->Add(m_btPGMinimize, 0, wxALL|wxALIGN_BOTTOM, WXC_FROM_DIP(1));
    m_btPGMinimize->SetMinSize(wxSize(24,24));
    
    m_btPGClose = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGClose->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_close")), wxLEFT);
    m_btPGClose->SetBitmapMargins(2,2);
    #endif
    m_btPGClose->SetToolTip(_("Close"));
    
    flexGridSizer3225->Add(m_btPGClose, 0, wxALL|wxALIGN_BOTTOM, WXC_FROM_DIP(1));
    m_btPGClose->SetMinSize(wxSize(24,24));
    
    wxFlexGridSizer* flexGridSizer2972 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2972->SetFlexibleDirection( wxBOTH );
    flexGridSizer2972->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2972->AddGrowableCol(0);
    flexGridSizer2972->AddGrowableRow(0);
    
    flexGridSizer986->Add(flexGridSizer2972, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxArrayString m_pgParameterMgrArr;
    wxUnusedVar(m_pgParameterMgrArr);
    wxArrayInt m_pgParameterMgrIntArr;
    wxUnusedVar(m_pgParameterMgrIntArr);
    m_pgParameterMgr = new wxPropertyGridManager(m_splitterPage3193, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(-1,-1)), wxPG_DESCRIPTION|wxPG_LIMITED_EDITING|wxPG_TOOLTIPS|wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    wxFont m_pgParameterMgrFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_pgParameterMgr->SetFont(m_pgParameterMgrFont);
    
    flexGridSizer2972->Add(m_pgParameterMgr, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_pgCatCommon = m_pgParameterMgr->Append(  new wxPropertyCategory( _("Common Path Parameters:") ) );
    m_pgCatCommon->SetHelpString(wxT(""));
    
    m_pgPropToolDiameter = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxStringProperty( _("Tool Diameter [mm]"), wxPG_LABEL, _("3.125")) );
    m_pgPropToolDiameter->SetHelpString(wxT(""));
    
    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("none"));
    m_pgParameterMgrArr.Add(_("inner"));
    m_pgParameterMgrArr.Add(_("outer"));
    m_pgPropCorrectionMode = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxEnumProperty( _("Tool Correction"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0) );
    m_pgPropCorrectionMode->SetHelpString(wxT(""));
    
    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("Round"));
    m_pgParameterMgrArr.Add(_("Square"));
    m_pgParameterMgrArr.Add(_("Miter"));
    m_pgPropCorrectionJointType = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxEnumProperty( _("Tool Correction Joint Type"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0) );
    m_pgPropCorrectionJointType->SetHelpString(wxT(""));
    
    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("0.001"));
    m_pgParameterMgrArr.Add(_("0.002"));
    m_pgParameterMgrArr.Add(_("0.003"));
    m_pgParameterMgrArr.Add(_("0.004"));
    m_pgParameterMgrArr.Add(_("0.005"));
    m_pgParameterMgrArr.Add(_("0.006"));
    m_pgParameterMgrArr.Add(_("0.007"));
    m_pgParameterMgrArr.Add(_("0.008"));
    m_pgParameterMgrArr.Add(_("0.009"));
    m_pgParameterMgrArr.Add(_("0.010"));
    m_pgParameterMgrArr.Add(_("0.020"));
    m_pgParameterMgrArr.Add(_("0.030"));
    m_pgParameterMgrArr.Add(_("0.050"));
    m_pgParameterMgrArr.Add(_("0.060"));
    m_pgParameterMgrArr.Add(_("0.070"));
    m_pgParameterMgrArr.Add(_("0.080"));
    m_pgParameterMgrArr.Add(_("0.090"));
    m_pgParameterMgrArr.Add(_("0.100"));
    m_pgPropCLResolution = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxEnumProperty( _("Curve Lib Resolution"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0) );
    m_pgPropCLResolution->SetHelpString(wxT(""));
    
    m_pgPropPathColour = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxSystemColourProperty( _("Colour"), wxPG_LABEL, wxColour(wxT("rgb(0,0,0)"))) );
    m_pgPropPathColour->SetHelpString(wxT(""));
    m_pgPropPathColour->SetEditor( wxT("ChoiceAndButton") );
    
    m_pgPropConfigBlock = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxBoolProperty( _("Config Block"), wxPG_LABEL, 1) );
    m_pgPropConfigBlock->SetHelpString(wxT(""));
    
    m_pgCatPath = m_pgParameterMgr->Append(  new wxPropertyCategory( _("Path Template Parameters") ) );
    m_pgCatPath->SetHelpString(wxT(""));
    
    m_pgProp01 = m_pgParameterMgr->AppendIn( m_pgCatPath,  new wxStringProperty( _("Dummy Para"), wxPG_LABEL, _("0")) );
    m_pgProp01->SetHelpString(wxT(""));
    
    m_pgCatGrid = m_pgParameterMgr->Append(  new wxPropertyCategory( _("Grid") ) );
    m_pgCatGrid->SetHelpString(wxT(""));
    
    m_pgPropRefCross = m_pgParameterMgr->AppendIn( m_pgCatGrid,  new wxBoolProperty( _("Reference Cross"), wxPG_LABEL, 1) );
    m_pgPropRefCross->SetHelpString(wxT(""));
    
    m_pgPropGridHelpConstructs = m_pgParameterMgr->AppendIn( m_pgCatGrid,  new wxBoolProperty( _("Help Constructs"), wxPG_LABEL, 1) );
    m_pgPropGridHelpConstructs->SetHelpString(wxT(""));
    
    m_pgPropGridDisplay = m_pgParameterMgr->AppendIn( m_pgCatGrid,  new wxBoolProperty( _("Display Grid"), wxPG_LABEL, 1) );
    m_pgPropGridDisplay->SetHelpString(wxT(""));
    
    m_pgPropGridSize = m_pgParameterMgr->AppendIn( m_pgCatGrid,  new wxStringProperty( _("Size [mm]"), wxPG_LABEL, wxT("")) );
    m_pgPropGridSize->SetHelpString(wxT(""));
    
    m_pgCatCncBlock = m_pgParameterMgr->Append(  new wxPropertyCategory( _("Cnc Block") ) );
    m_pgCatCncBlock->SetHelpString(wxT(""));
    
    m_pgPropCncInclude = m_pgParameterMgr->AppendIn( m_pgCatCncBlock,  new wxBoolProperty( _("Include"), wxPG_LABEL, 1) );
    m_pgPropCncInclude->SetHelpString(wxT(""));
    
    m_pgCatCncParameter = m_pgParameterMgr->AppendIn( m_pgCatCncBlock,  new wxPropertyCategory( _("Parameter") ) );
    m_pgCatCncParameter->SetHelpString(wxT(""));
    
    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("z - relative"));
    m_pgParameterMgrArr.Add(_("Z - absolute"));
    m_pgPropCncZDepthMode = m_pgParameterMgr->AppendIn( m_pgCatCncParameter,  new wxEnumProperty( _("Z Depth Mode"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0) );
    m_pgPropCncZDepthMode->SetHelpString(wxT(""));
    
    m_pgPropCncZDepth = m_pgParameterMgr->AppendIn( m_pgCatCncParameter,  new wxStringProperty( _("Z Depth"), wxPG_LABEL, _("0")) );
    m_pgPropCncZDepth->SetHelpString(wxT(""));
    
    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("none"));
    m_pgParameterMgrArr.Add(_("inner"));
    m_pgParameterMgrArr.Add(_("outer"));
    m_pgPropCncToolCorrection = m_pgParameterMgr->AppendIn( m_pgCatCncParameter,  new wxEnumProperty( _("Tool Correction Flag"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0) );
    m_pgPropCncToolCorrection->SetHelpString(wxT(""));
    
    m_pgPropCncReversePath = m_pgParameterMgr->AppendIn( m_pgCatCncParameter,  new wxBoolProperty( _("Reverse Path"), wxPG_LABEL, 0) );
    m_pgPropCncReversePath->SetHelpString(wxT(""));
    
    m_pgCatSvg = m_pgParameterMgr->Append(  new wxPropertyCategory( _("<SVG/>") ) );
    m_pgCatSvg->SetHelpString(wxT(""));
    
    m_pgPropSvgWidth = m_pgParameterMgr->AppendIn( m_pgCatSvg,  new wxStringProperty( _("Width [mm]"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgWidth->SetHelpString(wxT(""));
    m_pgPropSvgWidth->SetEditor( wxT("TextCtrl") );
    
    m_pgPropSvgHeight = m_pgParameterMgr->AppendIn( m_pgCatSvg,  new wxStringProperty( _("Height [mm]"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgHeight->SetHelpString(wxT(""));
    m_pgPropSvgHeight->SetEditor( wxT("TextCtrl") );
    
    m_pgCatViewBox = m_pgParameterMgr->AppendIn( m_pgCatSvg,  new wxPropertyCategory( _("ViewBox") ) );
    m_pgCatViewBox->SetHelpString(wxT(""));
    
    m_pgPropSvgVbX = m_pgParameterMgr->AppendIn( m_pgCatViewBox,  new wxStringProperty( _("X"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgVbX->SetHelpString(wxT(""));
    
    m_pgPropSvgVbY = m_pgParameterMgr->AppendIn( m_pgCatViewBox,  new wxStringProperty( _("Y"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgVbY->SetHelpString(wxT(""));
    
    m_pgPropSvgVbW = m_pgParameterMgr->AppendIn( m_pgCatViewBox,  new wxStringProperty( _("W"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgVbW->SetHelpString(wxT(""));
    
    m_pgPropSvgVbH = m_pgParameterMgr->AppendIn( m_pgCatViewBox,  new wxStringProperty( _("H"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgVbH->SetHelpString(wxT(""));
    
    m_pgCatTransform = m_pgParameterMgr->AppendIn( m_pgCatSvg,  new wxPropertyCategory( _("Transform") ) );
    m_pgCatTransform->SetHelpString(wxT(""));
    
    m_pgPropTransformMode = m_pgParameterMgr->AppendIn( m_pgCatTransform,  new wxBoolProperty( _("Auto Mode"), wxPG_LABEL, 1) );
    m_pgPropTransformMode->SetHelpString(wxT(""));
    
    m_pgCatTranslate = m_pgParameterMgr->AppendIn( m_pgCatTransform,  new wxPropertyCategory( _("Translate") ) );
    m_pgCatTranslate->SetHelpString(wxT(""));
    
    m_pgPropTranslateX = m_pgParameterMgr->AppendIn( m_pgCatTranslate,  new wxStringProperty( _("X [mm]"), wxPG_LABEL, _("0")) );
    m_pgPropTranslateX->SetHelpString(wxT(""));
    m_pgPropTranslateX->SetEditor( wxT("TextCtrl") );
    
    m_pgPropTranslateY = m_pgParameterMgr->AppendIn( m_pgCatTranslate,  new wxStringProperty( _("Y [mm]"), wxPG_LABEL, _("0")) );
    m_pgPropTranslateY->SetHelpString(wxT(""));
    m_pgPropTranslateY->SetEditor( wxT("TextCtrl") );
    
    m_pgCatScale = m_pgParameterMgr->AppendIn( m_pgCatTransform,  new wxPropertyCategory( _("Scale") ) );
    m_pgCatScale->SetHelpString(wxT(""));
    
    m_pgPropScaleX = m_pgParameterMgr->AppendIn( m_pgCatScale,  new wxStringProperty( _("X [factor]"), wxPG_LABEL, _("1")) );
    m_pgPropScaleX->SetHelpString(wxT(""));
    m_pgPropScaleX->SetEditor( wxT("TextCtrl") );
    
    m_pgPropScaleY = m_pgParameterMgr->AppendIn( m_pgCatScale,  new wxStringProperty( _("Y [factor]"), wxPG_LABEL, _("1")) );
    m_pgPropScaleY->SetHelpString(wxT(""));
    m_pgPropScaleY->SetEditor( wxT("TextCtrl") );
    
    m_pgCatRotate = m_pgParameterMgr->AppendIn( m_pgCatTransform,  new wxPropertyCategory( _("Rotate") ) );
    m_pgCatRotate->SetHelpString(wxT(""));
    
    m_pgPropRotateA = m_pgParameterMgr->AppendIn( m_pgCatRotate,  new wxStringProperty( _("Angle [degree]"), wxPG_LABEL, _("0")) );
    m_pgPropRotateA->SetHelpString(wxT(""));
    m_pgPropRotateA->SetEditor( wxT("TextCtrl") );
    
    m_pgPropRotateX = m_pgParameterMgr->AppendIn( m_pgCatRotate,  new wxStringProperty( _("Translate X [mm]"), wxPG_LABEL, _("0")) );
    m_pgPropRotateX->SetHelpString(wxT(""));
    m_pgPropRotateX->SetEditor( wxT("TextCtrl") );
    
    m_pgPropRotateY = m_pgParameterMgr->AppendIn( m_pgCatRotate,  new wxStringProperty( _("Translate Y [mm]"), wxPG_LABEL, _("0")) );
    m_pgPropRotateY->SetHelpString(wxT(""));
    m_pgPropRotateY->SetEditor( wxT("TextCtrl") );
    
    m_pgCatSkrew = m_pgParameterMgr->AppendIn( m_pgCatTransform,  new wxPropertyCategory( _("Skrew") ) );
    m_pgCatSkrew->SetHelpString(wxT(""));
    
    m_pgPropSkewX = m_pgParameterMgr->AppendIn( m_pgCatSkrew,  new wxStringProperty( _("X [degree]"), wxPG_LABEL, _("0")) );
    m_pgPropSkewX->SetHelpString(wxT(""));
    m_pgPropSkewX->SetEditor( wxT("TextCtrl") );
    
    m_pgPropSkewY = m_pgParameterMgr->AppendIn( m_pgCatSkrew,  new wxStringProperty( _("Y [degree]"), wxPG_LABEL, _("0")) );
    m_pgPropSkewY->SetHelpString(wxT(""));
    m_pgPropSkewY->SetEditor( wxT("TextCtrl") );
    
    m_autoGenerate = new wxCheckBox(m_splitterPage3193, wxID_ANY, _("Auto Generate"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(-1,-1)), 0);
    m_autoGenerate->SetValue(true);
    m_autoGenerate->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_autoGenerateFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_autoGenerate->SetFont(m_autoGenerateFont);
    m_autoGenerate->SetToolTip(_("Regenerate the template automatically if a any parameter was changed"));
    
    flexGridSizer2972->Add(m_autoGenerate, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_pgMainBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_pgMainBook);
    } else {
        wxPersistenceManager::Get().Restore(m_pgMainBook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_tbOutput)){
        wxPersistenceManager::Get().RegisterAndRestore(m_tbOutput);
    } else {
        wxPersistenceManager::Get().Restore(m_tbOutput);
    }
    #endif
    
    SetName(wxT("PathGeneratorFrameBase"));
    SetSize(1600,750);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(PathGeneratorFrameBase::onCloseWindow), NULL, this);
    this->Connect(wxEVT_SIZE, wxSizeEventHandler(PathGeneratorFrameBase::onSize), NULL, this);
    this->Connect(wxEVT_ACTIVATE, wxActivateEventHandler(PathGeneratorFrameBase::onActivate), NULL, this);
    this->Connect(wxEVT_MAXIMIZE, wxMaximizeEventHandler(PathGeneratorFrameBase::onMaximize), NULL, this);
    this->Connect(wxEVT_SHOW, wxShowEventHandler(PathGeneratorFrameBase::onShow), NULL, this);
    m_mainSplitter->Connect(wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED,  wxSplitterEventHandler(PathGeneratorFrameBase::mainShashPositionChanged), NULL, this);
    m_mainSplitter->Connect(wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING,  wxSplitterEventHandler(PathGeneratorFrameBase::mainShashPositionChanging), NULL, this);
    m_btPGMinimizeTree->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::toogleTreeSize), NULL, this);
    m_treeSearchText->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PathGeneratorFrameBase::updateTreeSearch), NULL, this);
    m_treeSearchText->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(PathGeneratorFrameBase::keyDownTreeSearch), NULL, this);
    m_btSearchTree->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::treeSearch), NULL, this);
    m_templateTree->Connect(wxEVT_COMMAND_TREE_SEL_CHANGED, wxTreeEventHandler(PathGeneratorFrameBase::selectTemplateTree), NULL, this);
    m_pgPathSelector->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectPathSelector), NULL, this);
    m_pgMainBook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(PathGeneratorFrameBase::pgMainBookChanged), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_cbEditMode->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectEditMode), NULL, this);
    m_updatePreview->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::updatePreview), NULL, this);
    m_cbDisplayMode->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectDisplayMode), NULL, this);
    m_btPGGenerate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::generatePath), NULL, this);
    m_btPGClear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::clearView), NULL, this);
    m_btPGReplaceEdit->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::relaceEditControlSelection), NULL, this);
    m_btPGCopy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::copyPath), NULL, this);
    m_btPGSave->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::saveTemplate), NULL, this);
    m_btPGMinimize->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::toogleSize), NULL, this);
    m_btPGClose->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::onCloseWindowFromButton), NULL, this);
    m_pgParameterMgr->Connect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(PathGeneratorFrameBase::propertyChanged), NULL, this);
    m_pgParameterMgr->Connect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(PathGeneratorFrameBase::propertyChanging), NULL, this);
    m_autoGenerate->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::checkAutoGenerate), NULL, this);
    
}

PathGeneratorFrameBase::~PathGeneratorFrameBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(PathGeneratorFrameBase::onCloseWindow), NULL, this);
    this->Disconnect(wxEVT_SIZE, wxSizeEventHandler(PathGeneratorFrameBase::onSize), NULL, this);
    this->Disconnect(wxEVT_ACTIVATE, wxActivateEventHandler(PathGeneratorFrameBase::onActivate), NULL, this);
    this->Disconnect(wxEVT_MAXIMIZE, wxMaximizeEventHandler(PathGeneratorFrameBase::onMaximize), NULL, this);
    this->Disconnect(wxEVT_SHOW, wxShowEventHandler(PathGeneratorFrameBase::onShow), NULL, this);
    m_mainSplitter->Disconnect(wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED,  wxSplitterEventHandler(PathGeneratorFrameBase::mainShashPositionChanged), NULL, this);
    m_mainSplitter->Disconnect(wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING,  wxSplitterEventHandler(PathGeneratorFrameBase::mainShashPositionChanging), NULL, this);
    m_btPGMinimizeTree->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::toogleTreeSize), NULL, this);
    m_treeSearchText->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PathGeneratorFrameBase::updateTreeSearch), NULL, this);
    m_treeSearchText->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(PathGeneratorFrameBase::keyDownTreeSearch), NULL, this);
    m_btSearchTree->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::treeSearch), NULL, this);
    m_templateTree->Disconnect(wxEVT_COMMAND_TREE_SEL_CHANGED, wxTreeEventHandler(PathGeneratorFrameBase::selectTemplateTree), NULL, this);
    m_pgPathSelector->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectPathSelector), NULL, this);
    m_pgMainBook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(PathGeneratorFrameBase::pgMainBookChanged), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_cbEditMode->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectEditMode), NULL, this);
    m_updatePreview->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::updatePreview), NULL, this);
    m_cbDisplayMode->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectDisplayMode), NULL, this);
    m_btPGGenerate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::generatePath), NULL, this);
    m_btPGClear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::clearView), NULL, this);
    m_btPGReplaceEdit->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::relaceEditControlSelection), NULL, this);
    m_btPGCopy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::copyPath), NULL, this);
    m_btPGSave->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::saveTemplate), NULL, this);
    m_btPGMinimize->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::toogleSize), NULL, this);
    m_btPGClose->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::onCloseWindowFromButton), NULL, this);
    m_pgParameterMgr->Disconnect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(PathGeneratorFrameBase::propertyChanged), NULL, this);
    m_pgParameterMgr->Disconnect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(PathGeneratorFrameBase::propertyChanging), NULL, this);
    m_autoGenerate->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::checkAutoGenerate), NULL, this);
    
}

CncFilePreviewWndBase::CncFilePreviewWndBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("chart-line-edit"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer3782 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3782->SetFlexibleDirection( wxBOTH );
    flexGridSizer3782->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3782->AddGrowableCol(0);
    flexGridSizer3782->AddGrowableRow(1);
    this->SetSizer(flexGridSizer3782);
    
    wxFlexGridSizer* flexGridSizer3786 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3786->SetFlexibleDirection( wxBOTH );
    flexGridSizer3786->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3786->AddGrowableCol(0);
    
    flexGridSizer3782->Add(flexGridSizer3786, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_previewFileName = new wxTextCtrl(this, wxID_ANY, wxT("File name"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,20)), wxTE_READONLY);
    m_previewFileName->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    m_previewFileName->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_previewFileNameFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_previewFileName->SetFont(m_previewFileNameFont);
    #if wxVERSION_NUMBER >= 3000
    m_previewFileName->SetHint(wxT(""));
    #endif
    
    flexGridSizer3786->Add(m_previewFileName, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_previewFileName->SetMinSize(wxSize(-1,20));
    
    m_previewFileType = new wxTextCtrl(this, wxID_ANY, wxT("Type"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,20)), wxTE_READONLY|wxTE_CENTRE);
    m_previewFileType->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_previewFileType->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_previewFileTypeFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_previewFileType->SetFont(m_previewFileTypeFont);
    #if wxVERSION_NUMBER >= 3000
    m_previewFileType->SetHint(wxT(""));
    #endif
    
    flexGridSizer3786->Add(m_previewFileType, 0, wxALL, WXC_FROM_DIP(0));
    m_previewFileType->SetMinSize(wxSize(-1,20));
    
    m_previewPlaceHolder = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_previewPlaceHolder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_previewPlaceHolder->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer3782->Add(m_previewPlaceHolder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    SetName(wxT("CncFilePreviewWndBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(CncFilePreviewWndBase::onClose), NULL, this);
    
}

CncFilePreviewWndBase::~CncFilePreviewWndBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(CncFilePreviewWndBase::onClose), NULL, this);
    
}

CncFilePreviewBase::CncFilePreviewBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer3760 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3760->SetFlexibleDirection( wxBOTH );
    flexGridSizer3760->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3760->AddGrowableCol(0);
    flexGridSizer3760->AddGrowableRow(0);
    this->SetSizer(flexGridSizer3760);
    
    m_previewBook = new wxSimplebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_previewBook->SetName(wxT("m_previewBook"));
    m_previewBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer3760->Add(m_previewBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel3764 = new wxPanel(m_previewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_previewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_previewBook->AddPage(m_panel3764, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer3768 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3768->SetFlexibleDirection( wxBOTH );
    flexGridSizer3768->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3768->AddGrowableCol(0);
    flexGridSizer3768->AddGrowableRow(0);
    m_panel3764->SetSizer(flexGridSizer3768);
    
    #if wxUSE_WEBVIEW
    m_svgPreview = wxWebView::New(m_panel3764, wxID_ANY, _("about:blank"), wxDefaultPosition, wxDLG_UNIT(m_panel3764, wxSize(-1,-1)), wxWebViewBackendDefault, 0);
    m_svgPreview->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    flexGridSizer3768->Add(m_svgPreview, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    #endif // wxUSE_WEBVIEW
    
    m_panel3766 = new wxPanel(m_previewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_previewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_previewBook->AddPage(m_panel3766, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer3772 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3772->SetFlexibleDirection( wxBOTH );
    flexGridSizer3772->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3772->AddGrowableCol(0);
    flexGridSizer3772->AddGrowableRow(0);
    m_panel3766->SetSizer(flexGridSizer3772);
    
    m_gcodePreviewPlaceholder = new wxPanel(m_panel3766, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_gcodePreviewPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    m_gcodePreviewPlaceholder->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer3772->Add(m_gcodePreviewPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer2311 = new wxFlexGridSizer(30, 1, 0, 0);
    flexGridSizer2311->SetFlexibleDirection( wxBOTH );
    flexGridSizer2311->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3772->Add(flexGridSizer2311, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_3D_Top = new wxButton(m_panel3766, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Top->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewUp")), wxLEFT);
    m_3D_Top->SetBitmapMargins(2,2);
    #endif
    m_3D_Top->SetToolTip(_("Show from Top"));
    
    flexGridSizer2311->Add(m_3D_Top, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Top->SetMinSize(wxSize(24,24));
    
    m_3D_Bottom = new wxButton(m_panel3766, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Bottom->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewDown")), wxLEFT);
    m_3D_Bottom->SetBitmapMargins(2,2);
    #endif
    m_3D_Bottom->SetToolTip(_("Show from Bottom"));
    
    flexGridSizer2311->Add(m_3D_Bottom, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Bottom->SetMinSize(wxSize(24,24));
    
    m_3D_Front = new wxButton(m_panel3766, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Front->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewFront")), wxLEFT);
    m_3D_Front->SetBitmapMargins(2,2);
    #endif
    m_3D_Front->SetToolTip(_("Show from Front"));
    
    flexGridSizer2311->Add(m_3D_Front, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Front->SetMinSize(wxSize(24,24));
    
    m_3D_Rear = new wxButton(m_panel3766, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Rear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewButtom")), wxLEFT);
    m_3D_Rear->SetBitmapMargins(2,2);
    #endif
    m_3D_Rear->SetToolTip(_("Show from Rear"));
    
    flexGridSizer2311->Add(m_3D_Rear, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Rear->SetMinSize(wxSize(24,24));
    
    m_3D_Left = new wxButton(m_panel3766, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Left->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewLeft")), wxLEFT);
    m_3D_Left->SetBitmapMargins(2,2);
    #endif
    m_3D_Left->SetToolTip(_("Show from Left"));
    
    flexGridSizer2311->Add(m_3D_Left, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Left->SetMinSize(wxSize(24,24));
    
    m_3D_Right = new wxButton(m_panel3766, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Right->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewRight")), wxLEFT);
    m_3D_Right->SetBitmapMargins(2,2);
    #endif
    m_3D_Right->SetToolTip(_("Show from Right"));
    
    flexGridSizer2311->Add(m_3D_Right, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Right->SetMinSize(wxSize(24,24));
    
    m_staticLine3483 = new wxStaticLine(m_panel3766, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2311->Add(m_staticLine3483, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_3D_Perspective1 = new wxButton(m_panel3766, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(24,24)), wxBORDER_THEME);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective1->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso1")), wxLEFT);
    m_3D_Perspective1->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective1->SetToolTip(_("Show 3D - ISO1"));
    
    flexGridSizer2311->Add(m_3D_Perspective1, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective1->SetMinSize(wxSize(24,24));
    
    m_3D_Perspective2 = new wxButton(m_panel3766, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective2->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso2")), wxLEFT);
    m_3D_Perspective2->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective2->SetToolTip(_("Show 3D - ISO2"));
    
    flexGridSizer2311->Add(m_3D_Perspective2, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective2->SetMinSize(wxSize(24,24));
    
    m_3D_Perspective3 = new wxButton(m_panel3766, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective3->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso3")), wxLEFT);
    m_3D_Perspective3->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective3->SetToolTip(_("Show 3D - ISO3"));
    
    flexGridSizer2311->Add(m_3D_Perspective3, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective3->SetMinSize(wxSize(24,24));
    
    m_3D_Perspective4 = new wxButton(m_panel3766, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective4->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso4")), wxLEFT);
    m_3D_Perspective4->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective4->SetToolTip(_("Show 3D - ISO4"));
    
    flexGridSizer2311->Add(m_3D_Perspective4, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective4->SetMinSize(wxSize(24,24));
    
    SetName(wxT("CncFilePreviewBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_3D_Top->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromTop3D), NULL, this);
    m_3D_Bottom->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromBottom3D), NULL, this);
    m_3D_Front->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromFront3D), NULL, this);
    m_3D_Rear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromRear3D), NULL, this);
    m_3D_Left->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromLeft3D), NULL, this);
    m_3D_Right->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromRight3D), NULL, this);
    m_3D_Perspective1->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::show3D), NULL, this);
    m_3D_Perspective2->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::show3D), NULL, this);
    m_3D_Perspective3->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::show3D), NULL, this);
    m_3D_Perspective4->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::show3D), NULL, this);
    
}

CncFilePreviewBase::~CncFilePreviewBase()
{
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_3D_Top->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromTop3D), NULL, this);
    m_3D_Bottom->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromBottom3D), NULL, this);
    m_3D_Front->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromFront3D), NULL, this);
    m_3D_Rear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromRear3D), NULL, this);
    m_3D_Left->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromLeft3D), NULL, this);
    m_3D_Right->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::showFromRight3D), NULL, this);
    m_3D_Perspective1->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::show3D), NULL, this);
    m_3D_Perspective2->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::show3D), NULL, this);
    m_3D_Perspective3->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::show3D), NULL, this);
    m_3D_Perspective4->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFilePreviewBase::show3D), NULL, this);
    
}

CncToolMagazineBase::CncToolMagazineBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer4592 = new wxFlexGridSizer(6, 1, 0, 0);
    flexGridSizer4592->SetFlexibleDirection( wxBOTH );
    flexGridSizer4592->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4592->AddGrowableCol(0);
    this->SetSizer(flexGridSizer4592);
    
    m_toolMagazine = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,120)), wxLC_VRULES|wxLC_HRULES|wxLC_SINGLE_SEL|wxLC_REPORT|wxALWAYS_SHOW_SB|wxVSCROLL);
    m_toolMagazine->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer4592->Add(m_toolMagazine, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_toolMagazine->SetMinSize(wxSize(-1,120));
    
    m_staticLine4628 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer4592->Add(m_staticLine4628, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5044 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5044->SetFlexibleDirection( wxBOTH );
    flexGridSizer5044->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5044->AddGrowableCol(0);
    flexGridSizer5044->AddGrowableRow(1);
    
    flexGridSizer4592->Add(flexGridSizer5044, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText5046 = new wxStaticText(this, wxID_ANY, _("Common Settings:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5046Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5046->SetFont(m_staticText5046Font);
    
    flexGridSizer5044->Add(m_staticText5046, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5054 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5054->SetFlexibleDirection( wxBOTH );
    flexGridSizer5054->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5054->AddGrowableCol(1);
    flexGridSizer5054->AddGrowableRow(0);
    
    flexGridSizer5044->Add(flexGridSizer5054, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer5085 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer5085->SetFlexibleDirection( wxBOTH );
    flexGridSizer5085->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5054->Add(flexGridSizer5085, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText5056 = new wxStaticText(this, wxID_ANY, _("Consider Default Tool:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5085->Add(m_staticText5056, 0, wxALL, WXC_FROM_DIP(5));
    
    m_cbDefaultToolUsage = new wxCheckBox(this, wxID_ANY, _(" - on demand"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_cbDefaultToolUsage->SetValue(false);
    
    flexGridSizer5085->Add(m_cbDefaultToolUsage, 0, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5084 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer5084->SetFlexibleDirection( wxBOTH );
    flexGridSizer5084->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5054->Add(flexGridSizer5084, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_staticText5058 = new wxStaticText(this, wxID_ANY, _("Default Tool mapped to:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5084->Add(m_staticText5058, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    wxArrayString m_cbDefaultMappedToArr;
    m_cbDefaultMappedTo = new wxComboBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(60,24)), m_cbDefaultMappedToArr, wxCB_SORT|wxCB_READONLY);
    
    flexGridSizer5084->Add(m_cbDefaultMappedTo, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    m_cbDefaultMappedTo->SetMinSize(wxSize(60,24));
    
    flexGridSizer5084->Add(30, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine5048 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer4592->Add(m_staticLine5048, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer4607 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4607->SetFlexibleDirection( wxBOTH );
    flexGridSizer4607->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4607->AddGrowableCol(0);
    flexGridSizer4607->AddGrowableRow(1);
    
    flexGridSizer4592->Add(flexGridSizer4607, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText5050 = new wxStaticText(this, wxID_ANY, _("Tool Parameter:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5050Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5050->SetFont(m_staticText5050Font);
    
    flexGridSizer4607->Add(m_staticText5050, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5052 = new wxFlexGridSizer(10, 3, 0, 0);
    flexGridSizer5052->SetFlexibleDirection( wxBOTH );
    flexGridSizer5052->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5052->AddGrowableCol(1);
    
    flexGridSizer4607->Add(flexGridSizer5052, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText4609 = new wxStaticText(this, wxID_ANY, _("ID:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText4609, 0, wxALL, WXC_FROM_DIP(5));
    
    m_toolMagazineId = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(30,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_toolMagazineId->SetHint(wxT(""));
    #endif
    
    flexGridSizer5052->Add(m_toolMagazineId, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_toolMagazineId->SetMinSize(wxSize(30,-1));
    
    m_staticText5072 = new wxStaticText(this, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText5072, 0, wxTOP|wxBOTTOM|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_staticText4613 = new wxStaticText(this, wxID_ANY, _("Type:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText4613, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_toolMagazineTypeArr;
    m_toolMagazineTypeArr.Add(wxT("PEN"));
    m_toolMagazineTypeArr.Add(wxT("BIT"));
    m_toolMagazineType = new wxComboBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_toolMagazineTypeArr, wxCB_READONLY);
    m_toolMagazineType->SetSelection(0);
    
    flexGridSizer5052->Add(m_toolMagazineType, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText5074 = new wxStaticText(this, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText5074, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_staticText4617 = new wxStaticText(this, wxID_ANY, _("Diameter:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText4617, 0, wxALL, WXC_FROM_DIP(5));
    
    m_toolMagazineDiameter = new wxTextCtrl(this, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_toolMagazineDiameter->SetHint(wxT(""));
    #endif
    
    flexGridSizer5052->Add(m_toolMagazineDiameter, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText5076 = new wxStaticText(this, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText5076, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText5064 = new wxStaticText(this, wxID_ANY, _("Length:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText5064, 0, wxALL, WXC_FROM_DIP(5));
    
    m_toolMagazineLength = new wxTextCtrl(this, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_toolMagazineLength->SetHint(wxT(""));
    #endif
    
    flexGridSizer5052->Add(m_toolMagazineLength, 0, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(1));
    
    m_staticText5078 = new wxStaticText(this, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText5078, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText5068 = new wxStaticText(this, wxID_ANY, _("Offset:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText5068, 0, wxALL, WXC_FROM_DIP(5));
    
    m_toolMagazineOffset = new wxTextCtrl(this, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_toolMagazineOffset->SetHint(wxT(""));
    #endif
    
    flexGridSizer5052->Add(m_toolMagazineOffset, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText5080 = new wxStaticText(this, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText5080, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText4638 = new wxStaticText(this, wxID_ANY, _("Comment:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText4638, 0, wxALL, WXC_FROM_DIP(5));
    
    m_toolMagazineComment = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_toolMagazineComment->SetHint(wxT(""));
    #endif
    
    flexGridSizer5052->Add(m_toolMagazineComment, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText5082 = new wxStaticText(this, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5052->Add(m_staticText5082, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer4597 = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizer4597->SetFlexibleDirection( wxBOTH );
    flexGridSizer4597->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer4592->Add(flexGridSizer4597, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_btToolMagazineRemove = new wxButton(this, wxID_ANY, _("Remove"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btToolMagazineRemove->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("plugin-delete")), wxLEFT);
    m_btToolMagazineRemove->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4597->Add(m_btToolMagazineRemove, 0, wxALL, WXC_FROM_DIP(1));
    m_btToolMagazineRemove->SetMinSize(wxSize(90,24));
    
    m_btToolMagazineDuplicate = new wxButton(this, wxID_ANY, _("Duplicate"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btToolMagazineDuplicate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("plugin-add")), wxLEFT);
    m_btToolMagazineDuplicate->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4597->Add(m_btToolMagazineDuplicate, 0, wxALL, WXC_FROM_DIP(1));
    m_btToolMagazineDuplicate->SetMinSize(wxSize(90,24));
    
    m_btToolMagazineAdd = new wxButton(this, wxID_ANY, _("New"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btToolMagazineAdd->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("plugin-add")), wxLEFT);
    m_btToolMagazineAdd->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4597->Add(m_btToolMagazineAdd, 0, wxALL, WXC_FROM_DIP(1));
    m_btToolMagazineAdd->SetMinSize(wxSize(90,24));
    
    m_btToolMagazineEdit = new wxButton(this, wxID_ANY, _("Update"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btToolMagazineEdit->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("plugin-edit")), wxLEFT);
    m_btToolMagazineEdit->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4597->Add(m_btToolMagazineEdit, 0, wxALL, WXC_FROM_DIP(1));
    m_btToolMagazineEdit->SetMinSize(wxSize(90,24));
    
    m_btToolMagazineCancle = new wxButton(this, wxID_ANY, _("Cancle"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btToolMagazineCancle->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-cancel-3")), wxLEFT);
    m_btToolMagazineCancle->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4597->Add(m_btToolMagazineCancle, 0, wxALL, WXC_FROM_DIP(1));
    m_btToolMagazineCancle->SetMinSize(wxSize(90,24));
    
    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    SetName(wxT("CncToolMagazineBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_toolMagazine->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CncToolMagazineBase::selectedTool), NULL, this);
    m_cbDefaultToolUsage->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CncToolMagazineBase::clickUseDefaultTool), NULL, this);
    m_cbDefaultMappedTo->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(CncToolMagazineBase::selectDefaultToolMappedTo), NULL, this);
    m_toolMagazineType->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(CncToolMagazineBase::selectType), NULL, this);
    m_btToolMagazineRemove->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::removeTool), NULL, this);
    m_btToolMagazineDuplicate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::duplicateTool), NULL, this);
    m_btToolMagazineAdd->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::addTool), NULL, this);
    m_btToolMagazineEdit->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::editTool), NULL, this);
    m_btToolMagazineCancle->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::cancel), NULL, this);
    
}

CncToolMagazineBase::~CncToolMagazineBase()
{
    m_toolMagazine->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CncToolMagazineBase::selectedTool), NULL, this);
    m_cbDefaultToolUsage->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CncToolMagazineBase::clickUseDefaultTool), NULL, this);
    m_cbDefaultMappedTo->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(CncToolMagazineBase::selectDefaultToolMappedTo), NULL, this);
    m_toolMagazineType->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(CncToolMagazineBase::selectType), NULL, this);
    m_btToolMagazineRemove->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::removeTool), NULL, this);
    m_btToolMagazineDuplicate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::duplicateTool), NULL, this);
    m_btToolMagazineAdd->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::addTool), NULL, this);
    m_btToolMagazineEdit->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::editTool), NULL, this);
    m_btToolMagazineCancle->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::cancel), NULL, this);
    
}

CncTemplateObserverBase::CncTemplateObserverBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer6517 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer6517->SetFlexibleDirection( wxBOTH );
    flexGridSizer6517->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6517->AddGrowableCol(0);
    flexGridSizer6517->AddGrowableRow(1);
    this->SetSizer(flexGridSizer6517);
    
    wxFlexGridSizer* flexGridSizer6506 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer6506->SetFlexibleDirection( wxBOTH );
    flexGridSizer6506->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6506->AddGrowableCol(0);
    
    flexGridSizer6517->Add(flexGridSizer6506, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText6508 = new wxStaticText(this, wxID_ANY, _("Externally Template Modification Observer:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText6508Font(12, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6508->SetFont(m_staticText6508Font);
    
    flexGridSizer6506->Add(m_staticText6508, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer6550 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer6550->SetFlexibleDirection( wxBOTH );
    flexGridSizer6550->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6550->AddGrowableCol(1);
    flexGridSizer6550->AddGrowableRow(0);
    
    flexGridSizer6506->Add(flexGridSizer6550, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    wxFlexGridSizer* flexGridSizer6551 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer6551->SetFlexibleDirection( wxBOTH );
    flexGridSizer6551->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer6550->Add(flexGridSizer6551, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_observationMode = new wxCheckBox(this, wxID_ANY, _("Observation of externally template\nfile modifications.\n"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_observationMode->SetValue(false);
    wxFont m_observationModeFont(9, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_observationMode->SetFont(m_observationModeFont);
    
    flexGridSizer6551->Add(m_observationMode, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer6554 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer6554->SetFlexibleDirection( wxBOTH );
    flexGridSizer6554->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer6551->Add(flexGridSizer6554, 0, wxALL, WXC_FROM_DIP(0));
    
    flexGridSizer6554->Add(12, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText6553 = new wxStaticText(this, wxID_ANY, _("This will setup the source editor\nas readonly"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer6554->Add(m_staticText6553, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_actionSelectionArr;
    m_actionSelectionArr.Add(_("Nothing"));
    m_actionSelectionArr.Add(_("Update/Show Preview"));
    m_actionSelectionArr.Add(_("Process the template  - Auto Run"));
    m_actionSelectionArr.Add(_("Debug the template   - Auto Debug"));
    m_actionSelection = new wxRadioBox(this, wxID_ANY, _("Actions to be done .  .  ."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_actionSelectionArr, 1, 0);
    wxFont m_actionSelectionFont(9, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_actionSelection->SetFont(m_actionSelectionFont);
    m_actionSelection->SetSelection(1);
    
    flexGridSizer6550->Add(m_actionSelection, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer6519 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer6519->SetFlexibleDirection( wxBOTH );
    flexGridSizer6519->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6519->AddGrowableCol(0);
    flexGridSizer6519->AddGrowableRow(1);
    
    flexGridSizer6517->Add(flexGridSizer6519, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer6530 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer6530->SetFlexibleDirection( wxBOTH );
    flexGridSizer6530->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6530->AddGrowableCol(1);
    flexGridSizer6530->AddGrowableRow(0);
    
    flexGridSizer6519->Add(flexGridSizer6530, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText6521 = new wxStaticText(this, wxID_ANY, _("Observer Trace:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText6521Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6521->SetFont(m_staticText6521Font);
    
    flexGridSizer6530->Add(m_staticText6521, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer6525 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer6525->SetFlexibleDirection( wxBOTH );
    flexGridSizer6525->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer6530->Add(flexGridSizer6525, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_staticText6527 = new wxStaticText(this, wxID_ANY, _("Last Observation:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText6527Font(9, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6527->SetFont(m_staticText6527Font);
    
    flexGridSizer6525->Add(m_staticText6527, 0, wxALL, WXC_FROM_DIP(5));
    
    m_lastTimestamp = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    wxFont m_lastTimestampFont(9, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_lastTimestamp->SetFont(m_lastTimestampFont);
    #if wxVERSION_NUMBER >= 3000
    m_lastTimestamp->SetHint(wxT(""));
    #endif
    
    flexGridSizer6525->Add(m_lastTimestamp, 0, wxALL, WXC_FROM_DIP(1));
    
    m_button6532 = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_button6532->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_button6532->SetBitmapMargins(2,2);
    #endif
    m_button6532->SetToolTip(_("Clear the observer trace"));
    
    flexGridSizer6530->Add(m_button6532, 0, wxALL|wxEXPAND|wxALIGN_RIGHT|wxALIGN_TOP, WXC_FROM_DIP(1));
    m_button6532->SetMinSize(wxSize(24,24));
    
    m_observerTrace = new wxTextCtrl(this, wxID_ANY, wxT("test text"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE);
    m_observerTrace->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_observerTrace->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_observerTraceFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_observerTrace->SetFont(m_observerTraceFont);
    
    flexGridSizer6519->Add(m_observerTrace, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_observeTimer = new wxTimer;
    
    SetName(wxT("CncTemplateObserverBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_observationMode->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CncTemplateObserverBase::changeObservationMode), NULL, this);
    m_button6532->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncTemplateObserverBase::clearTrace), NULL, this);
    m_observeTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncTemplateObserverBase::observe), NULL, this);
    
}

CncTemplateObserverBase::~CncTemplateObserverBase()
{
    m_observationMode->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(CncTemplateObserverBase::changeObservationMode), NULL, this);
    m_button6532->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncTemplateObserverBase::clearTrace), NULL, this);
    m_observeTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncTemplateObserverBase::observe), NULL, this);
    
    m_observeTimer->Stop();
    wxDELETE( m_observeTimer );

}

CncFileViewBase::CncFileViewBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer3841 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer3841->SetFlexibleDirection( wxBOTH );
    flexGridSizer3841->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3841->AddGrowableCol(0);
    flexGridSizer3841->AddGrowableRow(1);
    this->SetSizer(flexGridSizer3841);
    
    wxFlexGridSizer* flexGridSizer3847 = new wxFlexGridSizer(0, 8, 0, 0);
    flexGridSizer3847->SetFlexibleDirection( wxBOTH );
    flexGridSizer3847->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3841->Add(flexGridSizer3847, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btDirUp = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-up-search")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), wxBU_AUTODRAW);
    m_btDirUp->SetToolTip(_(".."));
    
    flexGridSizer3847->Add(m_btDirUp, 0, wxALL, WXC_FROM_DIP(0));
    m_btDirUp->SetMinSize(wxSize(24,24));
    
    m_btRefresh = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("view-refresh-3")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), wxBU_AUTODRAW);
    m_btRefresh->SetToolTip(_("Refresh"));
    
    flexGridSizer3847->Add(m_btRefresh, 0, wxALL, WXC_FROM_DIP(0));
    m_btRefresh->SetMinSize(wxSize(24,24));
    
    m_btDefaultPath = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("workspace")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), wxBU_AUTODRAW);
    m_btDefaultPath->SetToolTip(_("Select Default Path"));
    
    flexGridSizer3847->Add(m_btDefaultPath, 0, wxALL, WXC_FROM_DIP(0));
    m_btDefaultPath->SetMinSize(wxSize(24,24));
    
    m_staticLine5035 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3847->Add(m_staticLine5035, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_btNewTemplate = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("document-new-3")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), wxBU_AUTODRAW);
    m_btNewTemplate->SetToolTip(_("New Template"));
    
    flexGridSizer3847->Add(m_btNewTemplate, 0, wxALL, WXC_FROM_DIP(0));
    m_btNewTemplate->SetMinSize(wxSize(24,24));
    
    m_btOpenTemplate = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("document-open-5")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), wxBU_AUTODRAW);
    m_btOpenTemplate->SetToolTip(_("Open Template  Dialog"));
    
    flexGridSizer3847->Add(m_btOpenTemplate, 0, wxALL, WXC_FROM_DIP(0));
    m_btOpenTemplate->SetMinSize(wxSize(24,24));
    
    m_fileList = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLC_VRULES|wxLC_HRULES|wxLC_SINGLE_SEL|wxLC_REPORT);
    
    flexGridSizer3841->Add(m_fileList, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxArrayString m_filterExtentionArr;
    m_filterExtention = new wxComboBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_filterExtentionArr, wxCB_READONLY|wxBORDER_NONE);
    m_filterExtention->SetBackgroundColour(wxColour(wxT("rgb(192,192,192)")));
    wxFont m_filterExtentionFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_filterExtention->SetFont(m_filterExtentionFont);
    
    flexGridSizer3841->Add(m_filterExtention, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer3852 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3852->SetFlexibleDirection( wxBOTH );
    flexGridSizer3852->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3852->AddGrowableCol(0);
    flexGridSizer3852->AddGrowableRow(0);
    
    flexGridSizer3841->Add(flexGridSizer3852, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_currentDirectory = new wxTextCtrl(this, wxID_ANY, wxT("c:\\xxx"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,19)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_currentDirectory->SetBackgroundColour(wxColour(wxT("rgb(224,224,224)")));
    #if wxVERSION_NUMBER >= 3000
    m_currentDirectory->SetHint(wxT(""));
    #endif
    
    flexGridSizer3852->Add(m_currentDirectory, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_currentDirectory->SetMinSize(wxSize(-1,19));
    
    SetName(wxT("CncFileViewBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_btDirUp->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::aFolderUp), NULL, this);
    m_btRefresh->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::refresh), NULL, this);
    m_btDefaultPath->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::selectDefault), NULL, this);
    m_btNewTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::selectNewTemplate), NULL, this);
    m_btOpenTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::selectOpenTemplate), NULL, this);
    m_fileList->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CncFileViewBase::fileListActivated), NULL, this);
    m_fileList->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CncFileViewBase::fileListSelected), NULL, this);
    m_fileList->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncFileViewBase::fileListLeave), NULL, this);
    m_filterExtention->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(CncFileViewBase::selectFilter), NULL, this);
    
}

CncFileViewBase::~CncFileViewBase()
{
    m_btDirUp->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::aFolderUp), NULL, this);
    m_btRefresh->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::refresh), NULL, this);
    m_btDefaultPath->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::selectDefault), NULL, this);
    m_btNewTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::selectNewTemplate), NULL, this);
    m_btOpenTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::selectOpenTemplate), NULL, this);
    m_fileList->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CncFileViewBase::fileListActivated), NULL, this);
    m_fileList->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CncFileViewBase::fileListSelected), NULL, this);
    m_fileList->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncFileViewBase::fileListLeave), NULL, this);
    m_filterExtention->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(CncFileViewBase::selectFilter), NULL, this);
    
}

CncGamepadControllerStateBase::CncGamepadControllerStateBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer5802 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer5802->SetFlexibleDirection( wxBOTH );
    flexGridSizer5802->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5802->AddGrowableCol(0);
    flexGridSizer5802->AddGrowableRow(0);
    this->SetSizer(flexGridSizer5802);
    
    wxFlexGridSizer* flexGridSizer5821 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5821->SetFlexibleDirection( wxBOTH );
    flexGridSizer5821->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5821->AddGrowableCol(0);
    flexGridSizer5821->AddGrowableRow(0);
    
    flexGridSizer5802->Add(flexGridSizer5821, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitter6032 = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_3D);
    m_splitter6032->SetSashGravity(0.5);
    m_splitter6032->SetMinimumPaneSize(10);
    
    flexGridSizer5821->Add(m_splitter6032, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitterPage6036 = new wxPanel(m_splitter6032, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter6032, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer6042 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer6042->SetFlexibleDirection( wxBOTH );
    flexGridSizer6042->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6042->AddGrowableCol(0);
    flexGridSizer6042->AddGrowableRow(1);
    m_splitterPage6036->SetSizer(flexGridSizer6042);
    
    m_staticText6053 = new wxStaticText(m_splitterPage6036, wxID_ANY, _("Gamepad Status:"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage6036, wxSize(-1,-1)), 0);
    wxFont m_staticText6053Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6053->SetFont(m_staticText6053Font);
    
    flexGridSizer6042->Add(m_staticText6053, 0, wxALL, WXC_FROM_DIP(5));
    
    m_gamepadTrace = new wxTextCtrl(m_splitterPage6036, wxID_ANY, wxT("Gamepad state not available"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage6036, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE);
    m_gamepadTrace->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_CAPTIONTEXT));
    m_gamepadTrace->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_gamepadTraceFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_gamepadTrace->SetFont(m_gamepadTraceFont);
    
    flexGridSizer6042->Add(m_gamepadTrace, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitterPage6040 = new wxPanel(m_splitter6032, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter6032, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitter6032->SplitVertically(m_splitterPage6036, m_splitterPage6040, 0);
    
    wxFlexGridSizer* flexGridSizer60421 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer60421->SetFlexibleDirection( wxBOTH );
    flexGridSizer60421->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer60421->AddGrowableCol(0);
    flexGridSizer60421->AddGrowableRow(1);
    m_splitterPage6040->SetSizer(flexGridSizer60421);
    
    m_staticText6055 = new wxStaticText(m_splitterPage6040, wxID_ANY, _("Service Trace:"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage6040, wxSize(-1,-1)), 0);
    wxFont m_staticText6055Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6055->SetFont(m_staticText6055Font);
    
    flexGridSizer60421->Add(m_staticText6055, 0, wxALL, WXC_FROM_DIP(5));
    
    m_gamepadServiceTrace = new wxTextCtrl(m_splitterPage6040, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage6040, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE);
    m_gamepadServiceTrace->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_CAPTIONTEXT));
    m_gamepadServiceTrace->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_gamepadServiceTraceFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_gamepadServiceTrace->SetFont(m_gamepadServiceTraceFont);
    
    flexGridSizer60421->Add(m_gamepadServiceTrace, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer6026 = new wxFlexGridSizer(6, 1, 0, 0);
    flexGridSizer6026->SetFlexibleDirection( wxBOTH );
    flexGridSizer6026->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6026->AddGrowableCol(0);
    flexGridSizer6026->AddGrowableRow(5);
    
    flexGridSizer5821->Add(flexGridSizer6026, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    flexGridSizer6026->Add(0, 24, 1, wxALL, WXC_FROM_DIP(0));
    
    m_btQueryGamepadService = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btQueryGamepadService->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-question-2 (2)")), wxLEFT);
    m_btQueryGamepadService->SetBitmapMargins(2,2);
    #endif
    m_btQueryGamepadService->SetToolTip(_("Query the underlying Service"));
    
    flexGridSizer6026->Add(m_btQueryGamepadService, 0, wxALL, WXC_FROM_DIP(1));
    m_btQueryGamepadService->SetMinSize(wxSize(26,26));
    
    m_staticLine6051 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer6026->Add(m_staticLine6051, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_btStartGamepadService = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btStartGamepadService->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("system-run-3")), wxLEFT);
    m_btStartGamepadService->SetBitmapMargins(2,2);
    #endif
    m_btStartGamepadService->SetToolTip(_("Start the underlying Service"));
    
    flexGridSizer6026->Add(m_btStartGamepadService, 0, wxALL, WXC_FROM_DIP(1));
    m_btStartGamepadService->SetMinSize(wxSize(26,26));
    
    m_btStopGamepadService = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btStopGamepadService->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-x-close")), wxLEFT);
    m_btStopGamepadService->SetBitmapMargins(2,2);
    #endif
    m_btStopGamepadService->SetToolTip(_("Stop the underlying Service"));
    
    flexGridSizer6026->Add(m_btStopGamepadService, 0, wxALL, WXC_FROM_DIP(1));
    m_btStopGamepadService->SetMinSize(wxSize(26,26));
    
    wxFlexGridSizer* flexGridSizer6059 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6059->SetFlexibleDirection( wxBOTH );
    flexGridSizer6059->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6059->AddGrowableCol(0);
    flexGridSizer6059->AddGrowableRow(0);
    
    flexGridSizer6026->Add(flexGridSizer6059, 0, wxALL|wxALIGN_BOTTOM, WXC_FROM_DIP(0));
    
    m_btClearGamepadServiceTrace = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClearGamepadServiceTrace->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("clean")), wxLEFT);
    m_btClearGamepadServiceTrace->SetBitmapMargins(2,2);
    #endif
    m_btClearGamepadServiceTrace->SetToolTip(_("Clear the trace"));
    
    flexGridSizer6059->Add(m_btClearGamepadServiceTrace, 0, wxALL, WXC_FROM_DIP(1));
    m_btClearGamepadServiceTrace->SetMinSize(wxSize(26,26));
    
    SetName(wxT("CncGamepadControllerStateBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_btQueryGamepadService->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::queryGamepadService), NULL, this);
    m_btStartGamepadService->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::startGamepadService), NULL, this);
    m_btStopGamepadService->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::stopGamepadService), NULL, this);
    m_btClearGamepadServiceTrace->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::clearGamepadServiceTrace), NULL, this);
    
}

CncGamepadControllerStateBase::~CncGamepadControllerStateBase()
{
    m_btQueryGamepadService->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::queryGamepadService), NULL, this);
    m_btStartGamepadService->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::startGamepadService), NULL, this);
    m_btStopGamepadService->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::stopGamepadService), NULL, this);
    m_btClearGamepadServiceTrace->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncGamepadControllerStateBase::clearGamepadServiceTrace), NULL, this);
    
}

GL3DOptionPaneBase::GL3DOptionPaneBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer6343 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6343->SetFlexibleDirection( wxBOTH );
    flexGridSizer6343->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6343->AddGrowableCol(0);
    flexGridSizer6343->AddGrowableRow(0);
    this->SetSizer(flexGridSizer6343);
    
    m_choicebook6345 = new wxChoicebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    wxFont m_choicebook6345Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_choicebook6345->SetFont(m_choicebook6345Font);
    m_choicebook6345->SetName(wxT("m_choicebook6345"));
    
    flexGridSizer6343->Add(m_choicebook6345, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel3DOptions = new wxPanel(m_choicebook6345, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_choicebook6345, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panel3DOptions->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    m_choicebook6345->AddPage(m_panel3DOptions, _("Options"), false);
    
    wxFlexGridSizer* flexGridSizer3649 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3649->SetFlexibleDirection( wxBOTH );
    flexGridSizer3649->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3649->AddGrowableCol(0);
    flexGridSizer3649->AddGrowableRow(0);
    m_panel3DOptions->SetSizer(flexGridSizer3649);
    
    wxArrayString m_pgMgr3543Arr;
    wxUnusedVar(m_pgMgr3543Arr);
    wxArrayInt m_pgMgr3543IntArr;
    wxUnusedVar(m_pgMgr3543IntArr);
    m_pgMgr3543 = new wxPropertyGridManager(m_panel3DOptions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel3DOptions, wxSize(-1,-1)), wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    
    flexGridSizer3649->Add(m_pgMgr3543, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_pgCatDisplayOptions = m_pgMgr3543->Append(  new wxPropertyCategory( _("Display Options") ) );
    m_pgCatDisplayOptions->SetHelpString(wxT(""));
    
    m_pgMgr3543Arr.Clear();
    m_pgMgr3543IntArr.Clear();
    m_pgMgr3543Arr.Add(_("Points"));
    m_pgMgr3543Arr.Add(_("Lines"));
    m_pgMgr3543Arr.Add(_("LineStrips"));
    m_pgPropDrawType = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxEnumProperty( _("Draw Type"), wxPG_LABEL, m_pgMgr3543Arr, m_pgMgr3543IntArr, 1) );
    m_pgPropDrawType->SetHelpString(wxT(""));
    m_pgPropDrawType->SetEditor( wxT("Choice") );
    
    m_pgPropAutoScaling = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxBoolProperty( _("Auto Scaling"), wxPG_LABEL, 1) );
    m_pgPropAutoScaling->SetHelpString(wxT(""));
    m_pgPropAutoScaling->SetEditor( wxT("CheckBox") );
    
    m_pgPropDrawOrigin = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxBoolProperty( _("Show Origin"), wxPG_LABEL, 1) );
    m_pgPropDrawOrigin->SetHelpString(wxT(""));
    m_pgPropDrawOrigin->SetEditor( wxT("CheckBox") );
    
    m_pgPropDrawFlyPath = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxBoolProperty( _("Show Fly Path"), wxPG_LABEL, 1) );
    m_pgPropDrawFlyPath->SetHelpString(wxT(""));
    m_pgPropDrawFlyPath->SetEditor( wxT("CheckBox") );
    
    m_pgPropDrawRuler = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxBoolProperty( _("Show Ruler"), wxPG_LABEL, 1) );
    m_pgPropDrawRuler->SetHelpString(wxT(""));
    m_pgPropDrawRuler->SetEditor( wxT("CheckBox") );
    
    m_pgPropDrawHelpLines = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxBoolProperty( _("Show Help Lines"), wxPG_LABEL, 1) );
    m_pgPropDrawHelpLines->SetHelpString(wxT(""));
    m_pgPropDrawHelpLines->SetEditor( wxT("CheckBox") );
    
    m_pgPropPositionMarker = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxBoolProperty( _("Show Pos. Marker"), wxPG_LABEL, 1) );
    m_pgPropPositionMarker->SetHelpString(wxT(""));
    m_pgPropPositionMarker->SetEditor( wxT("CheckBox") );
    
    m_pgPropZoom = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxFloatProperty( _("Zoom"), wxPG_LABEL, 2.0) );
    m_pgPropZoom->SetHelpString(wxT(""));
    m_pgPropZoom->SetEditor( wxT("SpinCtrl") );
    
    m_pgPropPathColour = m_pgMgr3543->Append(  new wxPropertyCategory( _("Speed Mode Colours") ) );
    m_pgPropPathColour->SetHelpString(wxT(""));
    
    m_pgPropFlyColour = m_pgMgr3543->AppendIn( m_pgPropPathColour,  new wxSystemColourProperty( _("Rapid")) );
    m_pgPropFlyColour->SetValueToUnspecified();
    m_pgPropFlyColour->SetHelpString(wxT(""));
    m_pgPropFlyColour->SetEditor( wxT("TextCtrlAndButton") );
    
    m_pgPropWorkColour = m_pgMgr3543->AppendIn( m_pgPropPathColour,  new wxSystemColourProperty( _("Work")) );
    m_pgPropWorkColour->SetValueToUnspecified();
    m_pgPropWorkColour->SetHelpString(wxT(""));
    m_pgPropWorkColour->SetEditor( wxT("TextCtrlAndButton") );
    
    m_pgPropUserColour = m_pgMgr3543->AppendIn( m_pgPropPathColour,  new wxSystemColourProperty( _("User")) );
    m_pgPropUserColour->SetValueToUnspecified();
    m_pgPropUserColour->SetHelpString(wxT(""));
    m_pgPropUserColour->SetEditor( wxT("TextCtrlAndButton") );
    
    m_pgPropMaxColour = m_pgMgr3543->AppendIn( m_pgPropPathColour,  new wxSystemColourProperty( _("Max")) );
    m_pgPropMaxColour->SetValueToUnspecified();
    m_pgPropMaxColour->SetHelpString(wxT(""));
    m_pgPropMaxColour->SetEditor( wxT("TextCtrlAndButton") );
    
    m_pgPropHL3D = m_pgMgr3543->Append(  new wxPropertyCategory( _("Help Lines 3D") ) );
    m_pgPropHL3D->SetHelpString(wxT(""));
    
    m_pgPropHLXYPlane = m_pgMgr3543->AppendIn( m_pgPropHL3D,  new wxBoolProperty( _("XY Plane"), wxPG_LABEL, 1) );
    m_pgPropHLXYPlane->SetHelpString(wxT(""));
    m_pgPropHLXYPlane->SetEditor( wxT("CheckBox") );
    
    m_pgPropHLXZPlane = m_pgMgr3543->AppendIn( m_pgPropHL3D,  new wxBoolProperty( _("XZ Plane"), wxPG_LABEL, 1) );
    m_pgPropHLXZPlane->SetHelpString(wxT(""));
    m_pgPropHLXZPlane->SetEditor( wxT("CheckBox") );
    
    m_pgPropHLYZPlane = m_pgMgr3543->AppendIn( m_pgPropHL3D,  new wxBoolProperty( _("YZ Plane"), wxPG_LABEL, 1) );
    m_pgPropHLYZPlane->SetHelpString(wxT(""));
    m_pgPropHLYZPlane->SetEditor( wxT("CheckBox") );
    
    m_pgCatBoundBox = m_pgMgr3543->Append(  new wxPropertyCategory( _("Bound Box") ) );
    m_pgCatBoundBox->SetHelpString(wxT(""));
    
    m_pgPropDrawBoundBox = m_pgMgr3543->AppendIn( m_pgCatBoundBox,  new wxBoolProperty( _("Show Bound Box"), wxPG_LABEL, 1) );
    m_pgPropDrawBoundBox->SetHelpString(wxT(""));
    m_pgPropDrawBoundBox->SetEditor( wxT("CheckBox") );
    
    m_pgPropBoundBoxColour = m_pgMgr3543->AppendIn( m_pgCatBoundBox,  new wxSystemColourProperty( _("Colour")) );
    m_pgPropBoundBoxColour->SetValueToUnspecified();
    m_pgPropBoundBoxColour->SetHelpString(wxT(""));
    m_pgPropBoundBoxColour->SetEditor( wxT("TextCtrlAndButton") );
    
    m_pgCatRenderOptions = m_pgMgr3543->Append(  new wxPropertyCategory( _("Render Options") ) );
    m_pgCatRenderOptions->SetHelpString(wxT(""));
    
    m_pgPropSmoothing = m_pgMgr3543->AppendIn( m_pgCatRenderOptions,  new wxBoolProperty( _("Smoothing"), wxPG_LABEL, 1) );
    m_pgPropSmoothing->SetHelpString(wxT(""));
    m_pgPropSmoothing->SetEditor( wxT("CheckBox") );
    m_pgPropSmoothing->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFlexGridSizer* flexGridSizer3653 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3653->SetFlexibleDirection( wxBOTH );
    flexGridSizer3653->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3649->Add(flexGridSizer3653, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(4));
    
    m_cbAutoUpdate = new wxCheckBox(m_panel3DOptions, wxID_ANY, _(" Auto Update"), wxDefaultPosition, wxDLG_UNIT(m_panel3DOptions, wxSize(-1,-1)), 0);
    m_cbAutoUpdate->SetValue(true);
    wxFont m_cbAutoUpdateFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_cbAutoUpdate->SetFont(m_cbAutoUpdateFont);
    m_cbAutoUpdate->Enable(false);
    
    flexGridSizer3653->Add(m_cbAutoUpdate, 0, wxALL, WXC_FROM_DIP(0));
    
    m_panelAnimation = new wxPanel(m_choicebook6345, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_choicebook6345, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelAnimation->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    m_choicebook6345->AddPage(m_panelAnimation, _("Animation"), false);
    
    wxFlexGridSizer* flexGridSizer7037 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer7037->SetFlexibleDirection( wxBOTH );
    flexGridSizer7037->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7037->AddGrowableCol(0);
    flexGridSizer7037->AddGrowableRow(0);
    m_panelAnimation->SetSizer(flexGridSizer7037);
    
    m_scrollWin7039 = new wxScrolledWindow(m_panelAnimation, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelAnimation, wxSize(200,500)), wxHSCROLL|wxVSCROLL);
    m_scrollWin7039->SetScrollRate(5, 5);
    
    flexGridSizer7037->Add(m_scrollWin7039, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer6351 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer6351->SetFlexibleDirection( wxBOTH );
    flexGridSizer6351->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_scrollWin7039->SetSizer(flexGridSizer6351);
    
    wxFlexGridSizer* flexGridSizer6457 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer6457->SetFlexibleDirection( wxBOTH );
    flexGridSizer6457->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6457->AddGrowableCol(1);
    flexGridSizer6457->AddGrowableRow(0);
    
    flexGridSizer6351->Add(flexGridSizer6457, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText6443 = new wxStaticText(m_scrollWin7039, wxID_ANY, _("XY Pane Rotation (Z Top)"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), 0);
    wxFont m_staticText6443Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6443->SetFont(m_staticText6443Font);
    
    flexGridSizer6457->Add(m_staticText6443, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btResetCameraPos2 = new wxBitmapButton(m_scrollWin7039, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("git-reset-repo")), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btResetCameraPos2->SetToolTip(_("Normalize XY Pane Rotation"));
    
    flexGridSizer6457->Add(m_btResetCameraPos2, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer6456 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer6456->SetFlexibleDirection( wxBOTH );
    flexGridSizer6456->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer6351->Add(flexGridSizer6456, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer3570 = new wxFlexGridSizer(1, 6, 0, 0);
    flexGridSizer3570->SetFlexibleDirection( wxBOTH );
    flexGridSizer3570->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3570->AddGrowableCol(0);
    flexGridSizer3570->AddGrowableRow(0);
    
    flexGridSizer6456->Add(flexGridSizer3570, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(0));
    
    m_sliderCameraRotation = new wxSlider(m_scrollWin7039, wxID_ANY, 0, -360, 360, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), wxSL_LABELS|wxSL_HORIZONTAL);
    wxFont m_sliderCameraRotationFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_sliderCameraRotation->SetFont(m_sliderCameraRotationFont);
    
    flexGridSizer3570->Add(m_sliderCameraRotation, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer3678 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3678->SetFlexibleDirection( wxBOTH );
    flexGridSizer3678->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3570->Add(flexGridSizer3678, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3679 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer3679->SetFlexibleDirection( wxBOTH );
    flexGridSizer3679->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3678->Add(flexGridSizer3679, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btCameraRotionClockwise = new wxBitmapToggleButton(m_scrollWin7039, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("arrow-rotate-clockwise")), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(24,24)), 0);
    m_btCameraRotionClockwise->SetToolTip(_("Auto Rotate Clockwise"));
    m_btCameraRotionClockwise->SetValue(false);
    
    flexGridSizer3679->Add(m_btCameraRotionClockwise, 0, wxALL, WXC_FROM_DIP(1));
    m_btCameraRotionClockwise->SetMinSize(wxSize(24,24));
    
    m_btCameraRotionAnticlockwise = new wxBitmapToggleButton(m_scrollWin7039, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("arrow-rotate-anticlockwise")), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(24,24)), 0);
    m_btCameraRotionAnticlockwise->SetToolTip(_("Auto Rotate Counterclockwise"));
    m_btCameraRotionAnticlockwise->SetValue(false);
    
    flexGridSizer3679->Add(m_btCameraRotionAnticlockwise, 0, wxALL, WXC_FROM_DIP(1));
    m_btCameraRotionAnticlockwise->SetMinSize(wxSize(24,24));
    
    wxFlexGridSizer* flexGridSizer3682 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3682->SetFlexibleDirection( wxBOTH );
    flexGridSizer3682->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3678->Add(flexGridSizer3682, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText3684 = new wxStaticText(m_scrollWin7039, wxID_ANY, _("Speed"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), 0);
    wxFont m_staticText3684Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText3684->SetFont(m_staticText3684Font);
    
    flexGridSizer3682->Add(m_staticText3684, 0, wxALL, WXC_FROM_DIP(1));
    
    m_sliderCameraRotationSpeed = new wxSlider(m_scrollWin7039, wxID_ANY, 10, 50, 500, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(46,-1)), wxSL_INVERSE|wxSL_HORIZONTAL);
    
    flexGridSizer3682->Add(m_sliderCameraRotationSpeed, 0, wxALL, WXC_FROM_DIP(0));
    m_sliderCameraRotationSpeed->SetMinSize(wxSize(46,-1));
    
    flexGridSizer3570->Add(3, 0, 1, wxALL, WXC_FROM_DIP(1));
    
    m_staticLine64453 = new wxStaticLine(m_scrollWin7039, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer6456->Add(m_staticLine64453, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer6453 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer6453->SetFlexibleDirection( wxBOTH );
    flexGridSizer6453->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6453->AddGrowableCol(1);
    flexGridSizer6453->AddGrowableRow(0);
    
    flexGridSizer6351->Add(flexGridSizer6453, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText6441 = new wxStaticText(m_scrollWin7039, wxID_ANY, _("Model Rotation:"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), 0);
    wxFont m_staticText6441Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6441->SetFont(m_staticText6441Font);
    
    flexGridSizer6453->Add(m_staticText6441, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btResetCameraPos1 = new wxBitmapButton(m_scrollWin7039, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("git-reset-repo")), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btResetCameraPos1->SetToolTip(_("Normalize Model Rotation"));
    
    flexGridSizer6453->Add(m_btResetCameraPos1, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3580 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3580->SetFlexibleDirection( wxBOTH );
    flexGridSizer3580->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3580->AddGrowableCol(0);
    
    flexGridSizer6351->Add(flexGridSizer3580, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer6450 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer6450->SetFlexibleDirection( wxBOTH );
    flexGridSizer6450->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3580->Add(flexGridSizer6450, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer36288 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer36288->SetFlexibleDirection( wxBOTH );
    flexGridSizer36288->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer36288->AddGrowableCol(0);
    flexGridSizer36288->AddGrowableRow(0);
    
    flexGridSizer6450->Add(flexGridSizer36288, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_sliderModelRotationX = new wxSlider(m_scrollWin7039, wxID_ANY, 0, -360, 360, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), wxSL_LABELS|wxSL_VERTICAL);
    wxFont m_sliderModelRotationXFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_sliderModelRotationX->SetFont(m_sliderModelRotationXFont);
    
    flexGridSizer36288->Add(m_sliderModelRotationX, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btModelRotationResetX = new wxButton(m_scrollWin7039, wxID_ANY, _("X"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(50,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btModelRotationResetX->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("tools-equalizer-blue")), wxLEFT);
    m_btModelRotationResetX->SetBitmapMargins(2,2);
    #endif
    m_btModelRotationResetX->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_btModelRotationResetXFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btModelRotationResetX->SetFont(m_btModelRotationResetXFont);
    
    flexGridSizer36288->Add(m_btModelRotationResetX, 0, wxALL, WXC_FROM_DIP(5));
    m_btModelRotationResetX->SetMinSize(wxSize(50,-1));
    
    wxFlexGridSizer* flexGridSizer36281114 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer36281114->SetFlexibleDirection( wxBOTH );
    flexGridSizer36281114->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer36281114->AddGrowableCol(0);
    flexGridSizer36281114->AddGrowableRow(0);
    
    flexGridSizer6450->Add(flexGridSizer36281114, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_sliderModelRotationY = new wxSlider(m_scrollWin7039, wxID_ANY, 0, -360, 360, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), wxSL_LABELS|wxSL_VERTICAL);
    wxFont m_sliderModelRotationYFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_sliderModelRotationY->SetFont(m_sliderModelRotationYFont);
    
    flexGridSizer36281114->Add(m_sliderModelRotationY, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btModelRotationResetY = new wxButton(m_scrollWin7039, wxID_ANY, _("Y"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(50,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btModelRotationResetY->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("tools-equalizer-blue")), wxLEFT);
    m_btModelRotationResetY->SetBitmapMargins(2,2);
    #endif
    m_btModelRotationResetY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_btModelRotationResetYFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btModelRotationResetY->SetFont(m_btModelRotationResetYFont);
    m_btModelRotationResetY->SetToolTip(_("Reset"));
    
    flexGridSizer36281114->Add(m_btModelRotationResetY, 0, wxALL, WXC_FROM_DIP(5));
    m_btModelRotationResetY->SetMinSize(wxSize(50,-1));
    
    wxFlexGridSizer* flexGridSizer362811 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer362811->SetFlexibleDirection( wxBOTH );
    flexGridSizer362811->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer362811->AddGrowableCol(0);
    flexGridSizer362811->AddGrowableRow(0);
    
    flexGridSizer6450->Add(flexGridSizer362811, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_sliderModelRotationZ = new wxSlider(m_scrollWin7039, wxID_ANY, 0, -360, 360, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), wxSL_LABELS|wxSL_VERTICAL);
    wxFont m_sliderModelRotationZFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_sliderModelRotationZ->SetFont(m_sliderModelRotationZFont);
    
    flexGridSizer362811->Add(m_sliderModelRotationZ, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btModelRotationResetZ = new wxButton(m_scrollWin7039, wxID_ANY, _("Z"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(50,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btModelRotationResetZ->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("tools-equalizer-blue")), wxLEFT);
    m_btModelRotationResetZ->SetBitmapMargins(2,2);
    #endif
    m_btModelRotationResetZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_btModelRotationResetZFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btModelRotationResetZ->SetFont(m_btModelRotationResetZFont);
    m_btModelRotationResetZ->SetToolTip(_("Reset"));
    
    flexGridSizer362811->Add(m_btModelRotationResetZ, 0, wxALL, WXC_FROM_DIP(5));
    m_btModelRotationResetZ->SetMinSize(wxSize(50,-1));
    
    wxFlexGridSizer* flexGridSizer3628 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3628->SetFlexibleDirection( wxBOTH );
    flexGridSizer3628->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3628->AddGrowableCol(0);
    flexGridSizer3628->AddGrowableRow(1);
    
    flexGridSizer3580->Add(flexGridSizer3628, 0, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(1));
    
    m_staticLine6445345 = new wxStaticLine(m_scrollWin7039, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer3628->Add(m_staticLine6445345, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer6452 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer6452->SetFlexibleDirection( wxBOTH );
    flexGridSizer6452->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6452->AddGrowableCol(0);
    flexGridSizer6452->AddGrowableCol(1);
    flexGridSizer6452->AddGrowableRow(0);
    
    flexGridSizer3628->Add(flexGridSizer6452, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(1));
    
    m_sliderModelRotationXYZ = new wxSlider(m_scrollWin7039, wxID_ANY, 0, -360, 360, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), wxSL_LABELS|wxSL_HORIZONTAL);
    wxFont m_sliderModelRotationXYZFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_sliderModelRotationXYZ->SetFont(m_sliderModelRotationXYZFont);
    
    flexGridSizer6452->Add(m_sliderModelRotationXYZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_btModelRotationResetXYZ = new wxButton(m_scrollWin7039, wxID_ANY, _("XYZ"), wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(50,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btModelRotationResetXYZ->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("tools-equalizer-blue")), wxLEFT);
    m_btModelRotationResetXYZ->SetBitmapMargins(2,2);
    #endif
    m_btModelRotationResetXYZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_btModelRotationResetXYZFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btModelRotationResetXYZ->SetFont(m_btModelRotationResetXYZFont);
    m_btModelRotationResetXYZ->SetToolTip(_("Reset"));
    
    flexGridSizer6452->Add(m_btModelRotationResetXYZ, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    m_btModelRotationResetXYZ->SetMinSize(wxSize(50,-1));
    
    m_staticLine644534 = new wxStaticLine(m_scrollWin7039, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWin7039, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer3580->Add(m_staticLine644534, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    SetName(wxT("GL3DOptionPaneBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_pgMgr3543->Connect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(GL3DOptionPaneBase::propertyChanged), NULL, this);
    m_pgMgr3543->Connect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(GL3DOptionPaneBase::propertyChanging), NULL, this);
    m_btResetCameraPos2->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetCameraPostion), NULL, this);
    m_sliderCameraRotation->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::cameraRotationChanged), NULL, this);
    m_sliderCameraRotation->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::cameraRotationChanged), NULL, this);
    m_btCameraRotionClockwise->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::autoCameraRotationClockwise), NULL, this);
    m_btCameraRotionAnticlockwise->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::autoCameraRotationAnticlockwise), NULL, this);
    m_sliderCameraRotationSpeed->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::cameraRotationSpeedChanged), NULL, this);
    m_sliderCameraRotationSpeed->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::cameraRotationSpeedChanged), NULL, this);
    m_btResetCameraPos1->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetModelPostion), NULL, this);
    m_sliderModelRotationX->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationXChanged), NULL, this);
    m_sliderModelRotationX->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationXChanged), NULL, this);
    m_btModelRotationResetX->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetModelRotationX), NULL, this);
    m_sliderModelRotationY->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationYChanged), NULL, this);
    m_sliderModelRotationY->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationYChanged), NULL, this);
    m_btModelRotationResetY->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetModelRotationY), NULL, this);
    m_sliderModelRotationZ->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationZChanged), NULL, this);
    m_sliderModelRotationZ->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationZChanged), NULL, this);
    m_btModelRotationResetZ->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetModelRotationZ), NULL, this);
    m_sliderModelRotationXYZ->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationXYZChanged), NULL, this);
    m_sliderModelRotationXYZ->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationXYZChanged), NULL, this);
    m_btModelRotationResetXYZ->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetModelRotationXYZ), NULL, this);
    
}

GL3DOptionPaneBase::~GL3DOptionPaneBase()
{
    m_pgMgr3543->Disconnect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(GL3DOptionPaneBase::propertyChanged), NULL, this);
    m_pgMgr3543->Disconnect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(GL3DOptionPaneBase::propertyChanging), NULL, this);
    m_btResetCameraPos2->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetCameraPostion), NULL, this);
    m_sliderCameraRotation->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::cameraRotationChanged), NULL, this);
    m_sliderCameraRotation->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::cameraRotationChanged), NULL, this);
    m_btCameraRotionClockwise->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::autoCameraRotationClockwise), NULL, this);
    m_btCameraRotionAnticlockwise->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::autoCameraRotationAnticlockwise), NULL, this);
    m_sliderCameraRotationSpeed->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::cameraRotationSpeedChanged), NULL, this);
    m_sliderCameraRotationSpeed->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::cameraRotationSpeedChanged), NULL, this);
    m_btResetCameraPos1->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetModelPostion), NULL, this);
    m_sliderModelRotationX->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationXChanged), NULL, this);
    m_sliderModelRotationX->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationXChanged), NULL, this);
    m_btModelRotationResetX->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetModelRotationX), NULL, this);
    m_sliderModelRotationY->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationYChanged), NULL, this);
    m_sliderModelRotationY->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationYChanged), NULL, this);
    m_btModelRotationResetY->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetModelRotationY), NULL, this);
    m_sliderModelRotationZ->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationZChanged), NULL, this);
    m_sliderModelRotationZ->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationZChanged), NULL, this);
    m_btModelRotationResetZ->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetModelRotationZ), NULL, this);
    m_sliderModelRotationXYZ->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationXYZChanged), NULL, this);
    m_sliderModelRotationXYZ->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionPaneBase::modelRotationXYZChanged), NULL, this);
    m_btModelRotationResetXYZ->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionPaneBase::resetModelRotationXYZ), NULL, this);
    
}

GL3DDrawPaneBase::GL3DDrawPaneBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer2360 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer2360->SetFlexibleDirection( wxBOTH );
    flexGridSizer2360->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2360->AddGrowableCol(1);
    flexGridSizer2360->AddGrowableRow(0);
    this->SetSizer(flexGridSizer2360);
    
    wxFlexGridSizer* flexGridSizer48671 = new wxFlexGridSizer(6, 1, 0, 0);
    flexGridSizer48671->SetFlexibleDirection( wxBOTH );
    flexGridSizer48671->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer48671->AddGrowableCol(0);
    flexGridSizer48671->AddGrowableRow(0);
    flexGridSizer48671->AddGrowableRow(2);
    flexGridSizer48671->AddGrowableRow(4);
    
    flexGridSizer2360->Add(flexGridSizer48671, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_rotatePaneZ3D = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(5,-1)), wxTAB_TRAVERSAL);
    m_rotatePaneZ3D->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer48671->Add(m_rotatePaneZ3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_rotatePaneZ3D->SetMinSize(wxSize(5,-1));
    
    m_staticText487556 = new wxStaticText(this, wxID_ANY, _("Z"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_staticText487556->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText487556Font(6, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText487556->SetFont(m_staticText487556Font);
    
    flexGridSizer48671->Add(m_staticText487556, 0, wxALL, WXC_FROM_DIP(0));
    
    m_rotatePaneY3D = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(5,-1)), wxTAB_TRAVERSAL);
    m_rotatePaneY3D->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer48671->Add(m_rotatePaneY3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_rotatePaneY3D->SetMinSize(wxSize(5,-1));
    
    m_staticText48755 = new wxStaticText(this, wxID_ANY, _("Y"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_staticText48755->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText48755Font(6, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText48755->SetFont(m_staticText48755Font);
    
    flexGridSizer48671->Add(m_staticText48755, 0, wxALL, WXC_FROM_DIP(0));
    
    m_rotatePaneX3D = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(5,-1)), wxTAB_TRAVERSAL);
    m_rotatePaneX3D->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer48671->Add(m_rotatePaneX3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_rotatePaneX3D->SetMinSize(wxSize(5,-1));
    
    m_staticText4875 = new wxStaticText(this, wxID_ANY, _("X"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_staticText4875->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText4875Font(6, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText4875->SetFont(m_staticText4875Font);
    
    flexGridSizer48671->Add(m_staticText4875, 0, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4973 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4973->SetFlexibleDirection( wxBOTH );
    flexGridSizer4973->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4973->AddGrowableCol(0);
    flexGridSizer4973->AddGrowableRow(0);
    
    flexGridSizer2360->Add(flexGridSizer4973, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_drawPane3DPlaceHolder = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_drawPane3DPlaceHolder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_drawPane3DPlaceHolder->SetToolTip(_("OpenGl Control placeholder"));
    
    flexGridSizer4973->Add(m_drawPane3DPlaceHolder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4867 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4867->SetFlexibleDirection( wxBOTH );
    flexGridSizer4867->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4867->AddGrowableCol(0);
    flexGridSizer4867->AddGrowableRow(0);
    
    flexGridSizer2360->Add(flexGridSizer4867, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_scalePane3D = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(5,-1)), wxTAB_TRAVERSAL);
    m_scalePane3D->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer4867->Add(m_scalePane3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_scalePane3D->SetMinSize(wxSize(5,-1));
    
    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    SetName(wxT("GL3DDrawPaneBase"));
    SetSize(200,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
}

GL3DDrawPaneBase::~GL3DDrawPaneBase()
{
}

CncStatisticsPaneBase::CncStatisticsPaneBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer4888 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4888->SetFlexibleDirection( wxBOTH );
    flexGridSizer4888->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4888->AddGrowableCol(0);
    flexGridSizer4888->AddGrowableRow(0);
    this->SetSizer(flexGridSizer4888);
    
    m_contextBook = new wxSimplebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_contextBook->SetName(wxT("m_contextBook"));
    m_contextBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer4888->Add(m_contextBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelStatistics = new wxPanel(m_contextBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_contextBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_contextBook->AddPage(m_panelStatistics, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer7046 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer7046->SetFlexibleDirection( wxBOTH );
    flexGridSizer7046->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7046->AddGrowableCol(0);
    flexGridSizer7046->AddGrowableRow(0);
    m_panelStatistics->SetSizer(flexGridSizer7046);
    
    m_statisticBook = new wxNotebook(m_panelStatistics, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelStatistics, wxSize(-1,-1)), wxBK_BOTTOM|wxBK_DEFAULT);
    wxFont m_statisticBookFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_statisticBook->SetFont(m_statisticBookFont);
    m_statisticBook->SetName(wxT("m_statisticBook"));
    wxImageList* m_statisticBook_il = new wxImageList(16, 16);
    m_statisticBook->AssignImageList(m_statisticBook_il);
    
    flexGridSizer7046->Add(m_statisticBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_statisticPageSum = new wxPanel(m_statisticBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statisticBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_statisticPageSumImgIndex;
    m_statisticPageSumImgIndex = m_statisticBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("tools-sum")));
    m_statisticBook->AddPage(m_statisticPageSum, _("Summary"), false, m_statisticPageSumImgIndex);
    
    wxFlexGridSizer* flexGridSizer3499 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3499->SetFlexibleDirection( wxBOTH );
    flexGridSizer3499->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3499->AddGrowableCol(0);
    flexGridSizer3499->AddGrowableRow(0);
    m_statisticPageSum->SetSizer(flexGridSizer3499);
    
    m_statisticSummaryListCtrl = new wxListCtrl(m_statisticPageSum, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statisticPageSum, wxSize(-1,-1)), wxLC_REPORT);
    m_statisticSummaryListCtrl->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer3499->Add(m_statisticSummaryListCtrl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4957 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4957->SetFlexibleDirection( wxBOTH );
    flexGridSizer4957->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4957->AddGrowableCol(0);
    flexGridSizer4957->AddGrowableRow(0);
    
    flexGridSizer3499->Add(flexGridSizer4957, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_checkBoxStatisticUpdate = new wxCheckBox(m_statisticPageSum, wxID_ANY, _("Continuous update"), wxDefaultPosition, wxDLG_UNIT(m_statisticPageSum, wxSize(-1,-1)), 0);
    m_checkBoxStatisticUpdate->SetValue(false);
    
    flexGridSizer4957->Add(m_checkBoxStatisticUpdate, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_statisticPageVecties = new wxPanel(m_statisticBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statisticBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_statisticPageVectiesImgIndex;
    m_statisticPageVectiesImgIndex = m_statisticBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("draw-vector")));
    m_statisticBook->AddPage(m_statisticPageVecties, _("Monitor Verties"), false, m_statisticPageVectiesImgIndex);
    
    wxFlexGridSizer* flexGridSizer4915 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4915->SetFlexibleDirection( wxBOTH );
    flexGridSizer4915->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4915->AddGrowableCol(1);
    flexGridSizer4915->AddGrowableRow(0);
    m_statisticPageVecties->SetSizer(flexGridSizer4915);
    
    wxFlexGridSizer* flexGridSizer4953 = new wxFlexGridSizer(10, 1, 0, 0);
    flexGridSizer4953->SetFlexibleDirection( wxBOTH );
    flexGridSizer4953->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer4915->Add(flexGridSizer4953, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_3D_Trace3 = new wxButton(m_statisticPageVecties, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statisticPageVecties, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Trace3->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_3D_Trace3->SetBitmapMargins(2,2);
    #endif
    m_3D_Trace3->SetToolTip(_("Trace Montion Monitor Data"));
    
    flexGridSizer4953->Add(m_3D_Trace3, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Trace3->SetMinSize(wxSize(24,24));
    
    m_3D_Trace4 = new wxButton(m_statisticPageVecties, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statisticPageVecties, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Trace4->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("edit-copy-7")), wxLEFT);
    m_3D_Trace4->SetBitmapMargins(2,2);
    #endif
    m_3D_Trace4->SetToolTip(_("Trace Montion Monitor Data"));
    
    flexGridSizer4953->Add(m_3D_Trace4, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Trace4->SetMinSize(wxSize(24,24));
    
    m_3D_Trace = new wxButton(m_statisticPageVecties, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statisticPageVecties, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Trace->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("trace")), wxLEFT);
    m_3D_Trace->SetBitmapMargins(2,2);
    #endif
    m_3D_Trace->SetToolTip(_("Trace Montion Monitor Data"));
    
    flexGridSizer4953->Add(m_3D_Trace, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Trace->SetMinSize(wxSize(24,24));
    
    m_vectiesListCtrl = new wxListCtrl(m_statisticPageVecties, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statisticPageVecties, wxSize(-1,-1)), wxLC_REPORT);
    m_vectiesListCtrl->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer4915->Add(m_vectiesListCtrl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelReplay = new wxPanel(m_contextBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_contextBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_contextBook->AddPage(m_panelReplay, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer7050 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer7050->SetFlexibleDirection( wxBOTH );
    flexGridSizer7050->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7050->AddGrowableCol(0);
    flexGridSizer7050->AddGrowableRow(0);
    m_panelReplay->SetSizer(flexGridSizer7050);
    
    m_panel7059 = new wxPanel(m_panelReplay, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReplay, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    flexGridSizer7050->Add(m_panel7059, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_replayPlaceholder = new wxPanel(m_panelReplay, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelReplay, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_replayPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer7050->Add(m_replayPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    SetName(wxT("CncStatisticsPaneBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_statisticBook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(CncStatisticsPaneBase::statisticBookChanged), NULL, this);
    m_3D_Trace3->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncStatisticsPaneBase::clearMotionMonitorVecties), NULL, this);
    m_3D_Trace4->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncStatisticsPaneBase::copyMotionMonitorVecties), NULL, this);
    m_3D_Trace->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncStatisticsPaneBase::traceMotionMonitorVecties), NULL, this);
    
}

CncStatisticsPaneBase::~CncStatisticsPaneBase()
{
    m_statisticBook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(CncStatisticsPaneBase::statisticBookChanged), NULL, this);
    m_3D_Trace3->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncStatisticsPaneBase::clearMotionMonitorVecties), NULL, this);
    m_3D_Trace4->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncStatisticsPaneBase::copyMotionMonitorVecties), NULL, this);
    m_3D_Trace->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncStatisticsPaneBase::traceMotionMonitorVecties), NULL, this);
    
}

CncMonitorReplayPaneBase::CncMonitorReplayPaneBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer6845 = new wxFlexGridSizer(0, 19, 0, 0);
    flexGridSizer6845->SetFlexibleDirection( wxBOTH );
    flexGridSizer6845->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    this->SetSizer(flexGridSizer6845);
    
    wxArrayString m_cbStepUnitArr;
    m_cbStepUnitArr.Add(wxT("ID"));
    m_cbStepUnitArr.Add(wxT("Vertex"));
    m_cbStepUnit = new wxComboBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_cbStepUnitArr, wxCB_READONLY);
    wxFont m_cbStepUnitFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_cbStepUnit->SetFont(m_cbStepUnitFont);
    m_cbStepUnit->SetToolTip(_("Replay Unit"));
    m_cbStepUnit->SetSelection(0);
    
    flexGridSizer6845->Add(m_cbStepUnit, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticLine7085 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer6845->Add(m_staticLine7085, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_replayStart = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_replayStart->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("media-skip-backward-7")), wxLEFT);
    m_replayStart->SetBitmapMargins(2,2);
    #endif
    m_replayStart->SetToolTip(_("Replay Skip to Start"));
    
    flexGridSizer6845->Add(m_replayStart, 0, wxALL, WXC_FROM_DIP(0));
    m_replayStart->SetMinSize(wxSize(24,24));
    
    m_replayPrev = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_replayPrev->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("media-seek-backward-7")), wxLEFT);
    m_replayPrev->SetBitmapMargins(2,2);
    #endif
    m_replayPrev->SetToolTip(_("Replay Skip to Previous ID"));
    
    flexGridSizer6845->Add(m_replayPrev, 0, wxALL, WXC_FROM_DIP(0));
    m_replayPrev->SetMinSize(wxSize(24,24));
    
    m_replayNext = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_replayNext->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("media-seek-forward-7")), wxLEFT);
    m_replayNext->SetBitmapMargins(2,2);
    #endif
    m_replayNext->SetToolTip(_("Replay Skip to Next ID"));
    
    flexGridSizer6845->Add(m_replayNext, 0, wxALL, WXC_FROM_DIP(0));
    m_replayNext->SetMinSize(wxSize(24,24));
    
    m_replayEnd = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_replayEnd->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("media-skip-forward-7")), wxLEFT);
    m_replayEnd->SetBitmapMargins(2,2);
    #endif
    m_replayEnd->SetToolTip(_("Replay Skip to End"));
    
    flexGridSizer6845->Add(m_replayEnd, 0, wxALL, WXC_FROM_DIP(0));
    m_replayEnd->SetMinSize(wxSize(24,24));
    
    m_staticLine7069 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer6845->Add(m_staticLine7069, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_replayPlayAll = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_replayPlayAll->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("media-playback-start-7")), wxLEFT);
    m_replayPlayAll->SetBitmapMargins(2,2);
    #endif
    m_replayPlayAll->SetToolTip(_("Replay All"));
    
    flexGridSizer6845->Add(m_replayPlayAll, 0, wxALL, WXC_FROM_DIP(0));
    m_replayPlayAll->SetMinSize(wxSize(24,24));
    
    m_replayPlayCurrentId = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_replayPlayCurrentId->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("media-skip-forward-7")), wxLEFT);
    m_replayPlayCurrentId->SetBitmapMargins(2,2);
    #endif
    m_replayPlayCurrentId->SetToolTip(_("Replay Current ID"));
    
    flexGridSizer6845->Add(m_replayPlayCurrentId, 0, wxALL, WXC_FROM_DIP(0));
    m_replayPlayCurrentId->SetMinSize(wxSize(24,24));
    
    m_replayPause = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_replayPause->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("media-playback-pause-7")), wxLEFT);
    m_replayPause->SetBitmapMargins(2,2);
    #endif
    m_replayPause->SetToolTip(_("Replay Pause"));
    
    flexGridSizer6845->Add(m_replayPause, 0, wxALL, WXC_FROM_DIP(0));
    m_replayPause->SetMinSize(wxSize(24,24));
    
    m_replayStop = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_replayStop->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("media-playback-stop-7")), wxLEFT);
    m_replayStop->SetBitmapMargins(2,2);
    #endif
    m_replayStop->SetToolTip(_("Replay Stop"));
    
    flexGridSizer6845->Add(m_replayStop, 0, wxALL, WXC_FROM_DIP(0));
    m_replayStop->SetMinSize(wxSize(24,24));
    
    flexGridSizer6845->Add(10, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_currentVertexId = new wxTextCtrl(this, wxID_ANY, wxT("100"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(54,-1)), wxTE_RIGHT|wxTE_READONLY);
    m_currentVertexId->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_currentVertexIdFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_ITALIC, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_currentVertexId->SetFont(m_currentVertexIdFont);
    m_currentVertexId->SetToolTip(_("Current ID"));
    #if wxVERSION_NUMBER >= 3000
    m_currentVertexId->SetHint(wxT(""));
    #endif
    
    flexGridSizer6845->Add(m_currentVertexId, 0, wxALL, WXC_FROM_DIP(1));
    m_currentVertexId->SetMinSize(wxSize(54,-1));
    
    m_staticText7081 = new wxStaticText(this, wxID_ANY, _(":"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer6845->Add(m_staticText7081, 0, wxALL, WXC_FROM_DIP(3));
    
    m_currentVertex = new wxTextCtrl(this, wxID_ANY, wxT("100"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(54,-1)), wxTE_RIGHT|wxTE_READONLY);
    m_currentVertex->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_SCROLLBAR));
    m_currentVertex->SetForegroundColour(wxColour(wxT("rgb(149,74,74)")));
    wxFont m_currentVertexFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_ITALIC, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_currentVertex->SetFont(m_currentVertexFont);
    m_currentVertex->SetToolTip(_("Current Vertex"));
    #if wxVERSION_NUMBER >= 3000
    m_currentVertex->SetHint(wxT(""));
    #endif
    
    flexGridSizer6845->Add(m_currentVertex, 0, wxALL, WXC_FROM_DIP(1));
    m_currentVertex->SetMinSize(wxSize(54,-1));
    
    wxFlexGridSizer* flexGridSizer7076 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer7076->SetFlexibleDirection( wxBOTH );
    flexGridSizer7076->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer6845->Add(flexGridSizer7076, 0, wxALL, WXC_FROM_DIP(0));
    
    flexGridSizer7076->Add(0, 3, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText7075 = new wxStaticText(this, wxID_ANY, _("/"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer7076->Add(m_staticText7075, 0, wxALL, WXC_FROM_DIP(0));
    
    m_totalVerties = new wxTextCtrl(this, wxID_ANY, wxT("400000"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(54,-1)), wxTE_RIGHT|wxTE_READONLY);
    m_totalVerties->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_SCROLLBAR));
    m_totalVerties->SetForegroundColour(wxColour(wxT("rgb(0,70,128)")));
    wxFont m_totalVertiesFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_ITALIC, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_totalVerties->SetFont(m_totalVertiesFont);
    m_totalVerties->SetToolTip(_("Total Count of Verties"));
    #if wxVERSION_NUMBER >= 3000
    m_totalVerties->SetHint(wxT(""));
    #endif
    
    flexGridSizer6845->Add(m_totalVerties, 0, wxALL, WXC_FROM_DIP(1));
    m_totalVerties->SetMinSize(wxSize(54,-1));
    
    SetName(wxT("CncMonitorReplayPaneBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_cbStepUnit->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(CncMonitorReplayPaneBase::selectReplayUnit), NULL, this);
    m_replayStart->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayStart), NULL, this);
    m_replayPrev->Connect(wxEVT_LEFT_UP, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftUpPrev), NULL, this);
    m_replayPrev->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeavePrev), NULL, this);
    m_replayPrev->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftDownPrev), NULL, this);
    m_replayPrev->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftDClickPrev), NULL, this);
    m_replayNext->Connect(wxEVT_LEFT_UP, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftUpNext), NULL, this);
    m_replayNext->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeaveNext), NULL, this);
    m_replayNext->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftDownNext), NULL, this);
    m_replayNext->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftDClickNext), NULL, this);
    m_replayEnd->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayEnd), NULL, this);
    m_replayPlayAll->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayPlayAll), NULL, this);
    m_replayPlayCurrentId->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayPlayCurrentId), NULL, this);
    m_replayPause->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayPause), NULL, this);
    m_replayStop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayStop), NULL, this);
    
}

CncMonitorReplayPaneBase::~CncMonitorReplayPaneBase()
{
    m_cbStepUnit->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(CncMonitorReplayPaneBase::selectReplayUnit), NULL, this);
    m_replayStart->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayStart), NULL, this);
    m_replayPrev->Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftUpPrev), NULL, this);
    m_replayPrev->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeavePrev), NULL, this);
    m_replayPrev->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftDownPrev), NULL, this);
    m_replayPrev->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftDClickPrev), NULL, this);
    m_replayNext->Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftUpNext), NULL, this);
    m_replayNext->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeaveNext), NULL, this);
    m_replayNext->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftDownNext), NULL, this);
    m_replayNext->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(CncMonitorReplayPaneBase::replayLeftDClickNext), NULL, this);
    m_replayEnd->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayEnd), NULL, this);
    m_replayPlayAll->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayPlayAll), NULL, this);
    m_replayPlayCurrentId->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayPlayCurrentId), NULL, this);
    m_replayPause->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayPause), NULL, this);
    m_replayStop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncMonitorReplayPaneBase::replayStop), NULL, this);
    
}

CncReferencePositionBase::CncReferencePositionBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("snap-orto"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer5324 = new wxFlexGridSizer(11, 1, 0, 0);
    flexGridSizer5324->SetFlexibleDirection( wxBOTH );
    flexGridSizer5324->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5324->AddGrowableCol(0);
    flexGridSizer5324->AddGrowableRow(1);
    this->SetSizer(flexGridSizer5324);
    
    wxFlexGridSizer* flexGridSizer5503 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5503->SetFlexibleDirection( wxBOTH );
    flexGridSizer5503->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5503->AddGrowableCol(1);
    flexGridSizer5503->AddGrowableRow(0);
    
    flexGridSizer5324->Add(flexGridSizer5503, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer6839 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer6839->SetFlexibleDirection( wxBOTH );
    flexGridSizer6839->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5503->Add(flexGridSizer6839, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText5505 = new wxStaticText(this, wxID_ANY, _(" Navigation Panel:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5505Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5505->SetFont(m_staticText5505Font);
    
    flexGridSizer6839->Add(m_staticText5505, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer5314 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5314->SetFlexibleDirection( wxBOTH );
    flexGridSizer5314->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5314->AddGrowableCol(1);
    flexGridSizer5314->AddGrowableRow(0);
    
    flexGridSizer6839->Add(flexGridSizer5314, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer5336 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer5336->SetFlexibleDirection( wxBOTH );
    flexGridSizer5336->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5314->Add(flexGridSizer5336, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine5357 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer5336->Add(m_staticLine5357, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText5355 = new wxStaticText(this, wxID_ANY, _("Step Sensitivity:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_staticText5355->SetForegroundColour(wxColour(wxT("rgb(0,0,128)")));
    wxFont m_staticText5355Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5355->SetFont(m_staticText5355Font);
    
    flexGridSizer5336->Add(m_staticText5355, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer5353 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer5353->SetFlexibleDirection( wxBOTH );
    flexGridSizer5353->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5336->Add(flexGridSizer5353, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticBitmap5844 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("playstation-cross-dark-icon24")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer5353->Add(m_staticBitmap5844, 0, wxALL, WXC_FROM_DIP(2));
    
    wxArrayString m_rbStepSensitivityArr;
    m_rbStepSensitivityArr.Add(_("Finest:"));
    m_rbStepSensitivityArr.Add(_("Fine:"));
    m_rbStepSensitivityArr.Add(_("Medium:"));
    m_rbStepSensitivityArr.Add(_("Rough:"));
    m_rbStepSensitivityArr.Add(_("Roughest:"));
    m_rbStepSensitivity = new wxRadioBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_rbStepSensitivityArr, 1, 0);
    wxFont m_rbStepSensitivityFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_rbStepSensitivity->SetFont(m_rbStepSensitivityFont);
    m_rbStepSensitivity->SetSelection(1);
    
    flexGridSizer5353->Add(m_rbStepSensitivity, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    flexGridSizer5353->Add(10, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    flexGridSizer5336->Add(0, 46, 1, wxALL, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer6836 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6836->SetFlexibleDirection( wxBOTH );
    flexGridSizer6836->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6836->AddGrowableCol(0);
    flexGridSizer6836->AddGrowableRow(0);
    
    flexGridSizer5503->Add(flexGridSizer6836, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_navigationPanelPlaceholder = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_navigationPanelPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer6836->Add(m_navigationPanelPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticLine5572 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer5324->Add(m_staticLine5572, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer5566 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer5566->SetFlexibleDirection( wxBOTH );
    flexGridSizer5566->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5566->AddGrowableCol(0);
    flexGridSizer5566->AddGrowableRow(0);
    
    flexGridSizer5324->Add(flexGridSizer5566, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_textMessage = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,50)), wxTE_WORDWRAP|wxTE_READONLY|wxTE_MULTILINE|wxBORDER_NONE);
    m_textMessage->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_textMessageFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_textMessage->SetFont(m_textMessageFont);
    
    flexGridSizer5566->Add(m_textMessage, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_textMessage->SetMinSize(wxSize(-1,50));
    
    m_staticLine535015 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer5324->Add(m_staticLine535015, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer5845 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer5845->SetFlexibleDirection( wxBOTH );
    flexGridSizer5845->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5324->Add(flexGridSizer5845, 0, wxALL, WXC_FROM_DIP(0));
    
    flexGridSizer5845->Add(14, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticBitmap5847 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("playstation-circle-dark-icon24")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer5845->Add(m_staticBitmap5847, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticText5340 = new wxStaticText(this, wxID_ANY, _("Reference Position Mode:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5340Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5340->SetFont(m_staticText5340Font);
    
    flexGridSizer5845->Add(m_staticText5340, 0, wxALL, WXC_FROM_DIP(7));
    
    wxFlexGridSizer* flexGridSizer5326 = new wxFlexGridSizer(1, 6, 0, 0);
    flexGridSizer5326->SetFlexibleDirection( wxBOTH );
    flexGridSizer5326->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5324->Add(flexGridSizer5326, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer5456 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5456->SetFlexibleDirection( wxBOTH );
    flexGridSizer5456->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5326->Add(flexGridSizer5456, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText5460 = new wxStaticText(this, wxID_ANY, _("1"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxALIGN_CENTRE);
    wxFont m_staticText5460Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5460->SetFont(m_staticText5460Font);
    
    flexGridSizer5456->Add(m_staticText5460, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    
    m_btMode1 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode1")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(64,64)), 0);
    m_btMode1->SetToolTip(_("Mode 1"));
    m_btMode1->SetValue(false);
    
    flexGridSizer5456->Add(m_btMode1, 0, wxALL, WXC_FROM_DIP(5));
    m_btMode1->SetMinSize(wxSize(64,64));
    
    wxFlexGridSizer* flexGridSizer5461 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5461->SetFlexibleDirection( wxBOTH );
    flexGridSizer5461->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5326->Add(flexGridSizer5461, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText5467 = new wxStaticText(this, wxID_ANY, _("2"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5467Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5467->SetFont(m_staticText5467Font);
    
    flexGridSizer5461->Add(m_staticText5467, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    
    m_btMode2 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode2")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(64,64)), wxBU_BOTTOM);
    m_btMode2->SetToolTip(_("Mode 2"));
    m_btMode2->SetValue(false);
    
    flexGridSizer5461->Add(m_btMode2, 0, wxALL, WXC_FROM_DIP(5));
    m_btMode2->SetMinSize(wxSize(64,64));
    
    wxFlexGridSizer* flexGridSizer5462 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5462->SetFlexibleDirection( wxBOTH );
    flexGridSizer5462->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5326->Add(flexGridSizer5462, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    
    m_staticText5469 = new wxStaticText(this, wxID_ANY, _("3"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5469Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5469->SetFont(m_staticText5469Font);
    
    flexGridSizer5462->Add(m_staticText5469, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    
    m_btMode3 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode3")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(64,64)), 0);
    m_btMode3->SetToolTip(_("Mode 3"));
    m_btMode3->SetValue(false);
    
    flexGridSizer5462->Add(m_btMode3, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(5));
    m_btMode3->SetMinSize(wxSize(64,64));
    
    wxFlexGridSizer* flexGridSizer5463 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5463->SetFlexibleDirection( wxBOTH );
    flexGridSizer5463->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5326->Add(flexGridSizer5463, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText5471 = new wxStaticText(this, wxID_ANY, _("4"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5471Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5471->SetFont(m_staticText5471Font);
    
    flexGridSizer5463->Add(m_staticText5471, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    
    m_btMode4 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode4")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(64,64)), 0);
    m_btMode4->SetToolTip(_("Mode 4"));
    m_btMode4->SetValue(false);
    
    flexGridSizer5463->Add(m_btMode4, 0, wxALL, WXC_FROM_DIP(5));
    m_btMode4->SetMinSize(wxSize(64,64));
    
    wxFlexGridSizer* flexGridSizer5464 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5464->SetFlexibleDirection( wxBOTH );
    flexGridSizer5464->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5326->Add(flexGridSizer5464, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText5473 = new wxStaticText(this, wxID_ANY, _("5"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5473Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5473->SetFont(m_staticText5473Font);
    
    flexGridSizer5464->Add(m_staticText5473, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    
    m_btMode5 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode5")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(64,64)), 0);
    m_btMode5->SetToolTip(_("Mode 5"));
    m_btMode5->SetValue(false);
    
    flexGridSizer5464->Add(m_btMode5, 0, wxALL, WXC_FROM_DIP(5));
    m_btMode5->SetMinSize(wxSize(64,64));
    
    wxFlexGridSizer* flexGridSizer5476 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5476->SetFlexibleDirection( wxBOTH );
    flexGridSizer5476->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5326->Add(flexGridSizer5476, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    
    m_staticText5475 = new wxStaticText(this, wxID_ANY, _("6"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5475Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5475->SetFont(m_staticText5475Font);
    
    flexGridSizer5476->Add(m_staticText5475, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    
    m_btMode6 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("mode6")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(64,64)), 0);
    m_btMode6->SetToolTip(_("Mode 6"));
    m_btMode6->SetValue(false);
    
    flexGridSizer5476->Add(m_btMode6, 0, wxALL, WXC_FROM_DIP(5));
    m_btMode6->SetMinSize(wxSize(64,64));
    
    m_staticLine53501 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer5324->Add(m_staticLine53501, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer5484 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer5484->SetFlexibleDirection( wxBOTH );
    flexGridSizer5484->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5324->Add(flexGridSizer5484, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText5486 = new wxStaticText(this, wxID_ANY, _("Workpiece\nThickness"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5486Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5486->SetFont(m_staticText5486Font);
    
    flexGridSizer5484->Add(m_staticText5486, 0, wxALL, WXC_FROM_DIP(3));
    
    m_workpiceThickness = new wxTextCtrl(this, wxID_ANY, wxT("0,00"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_workpiceThickness->SetHint(wxT(""));
    #endif
    
    flexGridSizer5484->Add(m_workpiceThickness, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText5497 = new wxStaticText(this, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5497Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5497->SetFont(m_staticText5497Font);
    
    flexGridSizer5484->Add(m_staticText5497, 0, wxALL, WXC_FROM_DIP(7));
    
    flexGridSizer5484->Add(32, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText5488 = new wxStaticText(this, wxID_ANY, _("Measure Plate\nThickness"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5488Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5488->SetFont(m_staticText5488Font);
    
    flexGridSizer5484->Add(m_staticText5488, 0, wxALL, WXC_FROM_DIP(3));
    
    m_measurePlateThickness = new wxTextCtrl(this, wxID_ANY, wxT("0,21"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    m_measurePlateThickness->SetToolTip(_("Standard\nConfiguration Value"));
    #if wxVERSION_NUMBER >= 3000
    m_measurePlateThickness->SetHint(wxT(""));
    #endif
    
    flexGridSizer5484->Add(m_measurePlateThickness, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText5499 = new wxStaticText(this, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5499Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText5499->SetFont(m_staticText5499Font);
    
    flexGridSizer5484->Add(m_staticText5499, 0, wxALL, WXC_FROM_DIP(7));
    
    m_staticLine5350 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer5324->Add(m_staticLine5350, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer5342 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer5342->SetFlexibleDirection( wxBOTH );
    flexGridSizer5342->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5342->AddGrowableCol(0);
    
    flexGridSizer5324->Add(flexGridSizer5342, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer5447 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer5447->SetFlexibleDirection( wxBOTH );
    flexGridSizer5447->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5447->AddGrowableCol(1);
    flexGridSizer5447->AddGrowableRow(0);
    
    flexGridSizer5342->Add(flexGridSizer5447, 0, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer5453 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5453->SetFlexibleDirection( wxBOTH );
    flexGridSizer5453->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5447->Add(flexGridSizer5453, 0, wxALL, WXC_FROM_DIP(0));
    
    flexGridSizer5453->Add(0, 7, 1, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer5450 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5450->SetFlexibleDirection( wxBOTH );
    flexGridSizer5450->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5453->Add(flexGridSizer5450, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText5449 = new wxStaticText(this, wxID_ANY, _("Mode:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5449Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5449->SetFont(m_staticText5449Font);
    
    flexGridSizer5450->Add(m_staticText5449, 0, wxALL, WXC_FROM_DIP(4));
    
    m_modeSelected = new wxStaticText(this, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_modeSelected->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_modeSelected->SetForegroundColour(wxColour(wxT("rgb(0,0,128)")));
    wxFont m_modeSelectedFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_modeSelected->SetFont(m_modeSelectedFont);
    
    flexGridSizer5450->Add(m_modeSelected, 0, wxALL, WXC_FROM_DIP(4));
    
    flexGridSizer5447->Add(6, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_modeText = new wxStaticText(this, wxID_ANY, _("1\n2\n3"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_modeTextFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_modeText->SetFont(m_modeTextFont);
    
    flexGridSizer5447->Add(m_modeText, 0, wxALL, WXC_FROM_DIP(2));
    
    m_btSet = new wxButton(this, wxID_ANY, _("Set (0, 0, 0)"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_btSet->SetDefault();
    #if wxVERSION_NUMBER >= 2904
    m_btSet->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("playstation-square-dark-icon16")), wxLEFT);
    m_btSet->SetBitmapMargins(2,2);
    #endif
    wxFont m_btSetFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btSet->SetFont(m_btSetFont);
    m_btSet->SetToolTip(_("Set Reference Position\nand Reference Mode"));
    
    flexGridSizer5342->Add(m_btSet, 0, wxALL, WXC_FROM_DIP(7));
    
    m_btCancel = new wxButton(this, wxID_ANY, _("Cancel"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btCancel->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("playstation-triangle-dark-icon16")), wxLEFT);
    m_btCancel->SetBitmapMargins(2,2);
    #endif
    m_btCancel->SetToolTip(_("Abort"));
    
    flexGridSizer5342->Add(m_btCancel, 0, wxALL, WXC_FROM_DIP(7));
    
    SetName(wxT("CncReferencePositionBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Connect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncReferencePositionBase::init), NULL, this);
    this->Connect(wxEVT_SHOW, wxShowEventHandler(CncReferencePositionBase::show), NULL, this);
    m_rbStepSensitivity->Connect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(CncReferencePositionBase::selectStepSensitivity), NULL, this);
    m_btMode1->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode1), NULL, this);
    m_btMode2->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode2), NULL, this);
    m_btMode3->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode3), NULL, this);
    m_btMode4->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode4), NULL, this);
    m_btMode5->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode5), NULL, this);
    m_btMode6->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode6), NULL, this);
    m_btSet->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::set), NULL, this);
    m_btCancel->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::cancel), NULL, this);
    
}

CncReferencePositionBase::~CncReferencePositionBase()
{
    this->Disconnect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncReferencePositionBase::init), NULL, this);
    this->Disconnect(wxEVT_SHOW, wxShowEventHandler(CncReferencePositionBase::show), NULL, this);
    m_rbStepSensitivity->Disconnect(wxEVT_COMMAND_RADIOBOX_SELECTED, wxCommandEventHandler(CncReferencePositionBase::selectStepSensitivity), NULL, this);
    m_btMode1->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode1), NULL, this);
    m_btMode2->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode2), NULL, this);
    m_btMode3->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode3), NULL, this);
    m_btMode4->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode4), NULL, this);
    m_btMode5->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode5), NULL, this);
    m_btMode6->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::mode6), NULL, this);
    m_btSet->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::set), NULL, this);
    m_btCancel->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncReferencePositionBase::cancel), NULL, this);
    
}

CncConnectProgressBase::CncConnectProgressBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    m_observeTimer = new wxTimer;
    m_observeTimer->Start(5000, true);
    
    m_startupTimer = new wxTimer;
    m_startupTimer->Start(100, true);
    
    wxBoxSizer* boxSizer5596 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer5596);
    
    wxFlexGridSizer* flexGridSizer5582 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5582->SetFlexibleDirection( wxBOTH );
    flexGridSizer5582->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    boxSizer5596->Add(flexGridSizer5582, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticBitmap5593 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-connected@2x")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer5582->Add(m_staticBitmap5593, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer5591 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5591->SetFlexibleDirection( wxBOTH );
    flexGridSizer5591->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5591->AddGrowableCol(0);
    flexGridSizer5591->AddGrowableRow(1);
    
    flexGridSizer5582->Add(flexGridSizer5591, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText5589 = new wxStaticText(this, wxID_ANY, _("Connecting the Serial Port. . ."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText5589Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText5589->SetFont(m_staticText5589Font);
    
    flexGridSizer5591->Add(m_staticText5589, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_connectActivityPanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(120,16)), wxTAB_TRAVERSAL);
    m_connectActivityPanel->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    
    flexGridSizer5591->Add(m_connectActivityPanel, 0, wxALL, WXC_FROM_DIP(5));
    m_connectActivityPanel->SetMinSize(wxSize(120,16));
    
    SetName(wxT("CncConnectProgressBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Connect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncConnectProgressBase::initDialog), NULL, this);
    this->Connect(wxEVT_SHOW, wxShowEventHandler(CncConnectProgressBase::show), NULL, this);
    m_observeTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncConnectProgressBase::observeTimer), NULL, this);
    m_startupTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncConnectProgressBase::startupTimer), NULL, this);
    
}

CncConnectProgressBase::~CncConnectProgressBase()
{
    this->Disconnect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncConnectProgressBase::initDialog), NULL, this);
    this->Disconnect(wxEVT_SHOW, wxShowEventHandler(CncConnectProgressBase::show), NULL, this);
    m_observeTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncConnectProgressBase::observeTimer), NULL, this);
    m_startupTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncConnectProgressBase::startupTimer), NULL, this);
    
    m_observeTimer->Stop();
    wxDELETE( m_observeTimer );

    m_startupTimer->Stop();
    wxDELETE( m_startupTimer );

}

CncUsbConnectionDetectedBase::CncUsbConnectionDetectedBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("16-connected"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer5915 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5915->SetFlexibleDirection( wxBOTH );
    flexGridSizer5915->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5915->AddGrowableCol(0);
    flexGridSizer5915->AddGrowableRow(1);
    this->SetSizer(flexGridSizer5915);
    
    wxFlexGridSizer* flexGridSizer5917 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5917->SetFlexibleDirection( wxBOTH );
    flexGridSizer5917->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer5915->Add(flexGridSizer5917, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticBitmap5919 = new wxStaticBitmap(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("24-help@2x")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0 );
    
    flexGridSizer5917->Add(m_staticBitmap5919, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer5930 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer5930->SetFlexibleDirection( wxBOTH );
    flexGridSizer5930->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5930->AddGrowableCol(0);
    flexGridSizer5930->AddGrowableRow(1);
    
    flexGridSizer5917->Add(flexGridSizer5930, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText5921 = new wxStaticText(this, wxID_ANY, _("Should a connection established to port:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer5930->Add(m_staticText5921, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_portName = new wxStaticText(this, wxID_ANY, _("PORT"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_portName->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_portNameFont(14, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_portName->SetFont(m_portNameFont);
    
    flexGridSizer5930->Add(m_portName, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer5923 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer5923->SetFlexibleDirection( wxBOTH );
    flexGridSizer5923->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer5923->AddGrowableCol(0);
    flexGridSizer5923->AddGrowableCol(1);
    flexGridSizer5923->AddGrowableRow(0);
    
    flexGridSizer5915->Add(flexGridSizer5923, 1, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_ignore = new wxButton(this, wxID_ANY, _("Ignore"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_ignore->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-x-close@2x")), wxLEFT);
    m_ignore->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer5923->Add(m_ignore, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    m_ignore->SetMinSize(wxSize(120,-1));
    
    m_connect = new wxButton(this, wxID_ANY, _("Connect"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_connect->SetDefault();
    #if wxVERSION_NUMBER >= 2904
    m_connect->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-connected@2x")), wxLEFT);
    m_connect->SetBitmapMargins(2,2);
    #endif
    wxFont m_connectFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_connect->SetFont(m_connectFont);
    
    flexGridSizer5923->Add(m_connect, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    m_connect->SetMinSize(wxSize(120,-1));
    
    SetName(wxT("CncUsbConnectionDetectedBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Connect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncUsbConnectionDetectedBase::initDilaog), NULL, this);
    m_ignore->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncUsbConnectionDetectedBase::ignore), NULL, this);
    m_connect->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncUsbConnectionDetectedBase::connect), NULL, this);
    
}

CncUsbConnectionDetectedBase::~CncUsbConnectionDetectedBase()
{
    this->Disconnect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncUsbConnectionDetectedBase::initDilaog), NULL, this);
    m_ignore->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncUsbConnectionDetectedBase::ignore), NULL, this);
    m_connect->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncUsbConnectionDetectedBase::connect), NULL, this);
    
}

CncSecureRunBase::CncSecureRunBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer6563 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer6563->SetFlexibleDirection( wxBOTH );
    flexGridSizer6563->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6563->AddGrowableCol(3);
    flexGridSizer6563->AddGrowableRow(0);
    this->SetSizer(flexGridSizer6563);
    
    wxFlexGridSizer* flexGridSizer6578 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer6578->SetFlexibleDirection( wxBOTH );
    flexGridSizer6578->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer6563->Add(flexGridSizer6578, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer6578->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_header1 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(150,16)), wxTAB_TRAVERSAL);
    m_header1->SetBackgroundColour(wxColour(wxT("rgb(0,128,192)")));
    
    flexGridSizer6578->Add(m_header1, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer6586 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6586->SetFlexibleDirection( wxBOTH );
    flexGridSizer6586->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_header1->SetSizer(flexGridSizer6586);
    
    m_staticText6588 = new wxStaticText(m_header1, wxID_ANY, _("  Remote Monitor Control:"), wxDefaultPosition, wxDLG_UNIT(m_header1, wxSize(-1,-1)), 0);
    m_staticText6588->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText6588Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText6588->SetFont(m_staticText6588Font);
    
    flexGridSizer6586->Add(m_staticText6588, 0, wxALL, WXC_FROM_DIP(1));
    m_header1->SetMinSize(wxSize(150,16));
    
    flexGridSizer6578->Add(6, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_header2 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(320,16)), wxTAB_TRAVERSAL);
    m_header2->SetBackgroundColour(wxColour(wxT("rgb(0,128,192)")));
    
    flexGridSizer6578->Add(m_header2, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer6590 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer6590->SetFlexibleDirection( wxBOTH );
    flexGridSizer6590->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_header2->SetSizer(flexGridSizer6590);
    
    m_staticText65883 = new wxStaticText(m_header2, wxID_ANY, _("  Remote CNC Control:"), wxDefaultPosition, wxDLG_UNIT(m_header2, wxSize(-1,-1)), 0);
    m_staticText65883->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText65883Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText65883->SetFont(m_staticText65883Font);
    
    flexGridSizer6590->Add(m_staticText65883, 0, wxALL, WXC_FROM_DIP(1));
    m_header2->SetMinSize(wxSize(320,16));
    
    wxFlexGridSizer* flexGridSizer5294 = new wxFlexGridSizer(1, 11, 0, 0);
    flexGridSizer5294->SetFlexibleDirection( wxBOTH );
    flexGridSizer5294->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer6563->Add(flexGridSizer5294, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticLine527312 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL|wxLI_HORIZONTAL);
    
    flexGridSizer5294->Add(m_staticLine527312, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer6595 = new wxBoxSizer(wxVERTICAL);
    
    flexGridSizer5294->Add(boxSizer6595, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_remoteControl = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(140,86)), wxTAB_TRAVERSAL);
    m_remoteControl->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_remoteControl->SetToolTip(_("Only a placeholder"));
    
    boxSizer6595->Add(m_remoteControl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_remoteControl->SetMinSize(wxSize(140,86));
    
    m_staticLine52731 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL|wxLI_HORIZONTAL);
    
    flexGridSizer5294->Add(m_staticLine52731, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btPlay = new wxButton(this, wxID_ANY, _("Pause"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,90)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPlay->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("secureRunPause")), wxBOTTOM);
    m_btPlay->SetBitmapMargins(0,0);
    #endif
    m_btPlay->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_btPlayFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btPlay->SetFont(m_btPlayFont);
    m_btPlay->SetToolTip(_("Pause Current Run"));
    
    flexGridSizer5294->Add(m_btPlay, 0, wxALL, WXC_FROM_DIP(0));
    m_btPlay->SetMinSize(wxSize(90,90));
    
    m_btStop = new wxButton(this, wxID_ANY, _("Stop"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,90)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btStop->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("secureRunStop")), wxBOTTOM);
    m_btStop->SetBitmapMargins(0,0);
    #endif
    m_btStop->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_APPWORKSPACE));
    wxFont m_btStopFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btStop->SetFont(m_btStopFont);
    m_btStop->SetToolTip(_("Stop Current Run"));
    
    flexGridSizer5294->Add(m_btStop, 0, wxALL, WXC_FROM_DIP(0));
    m_btStop->SetMinSize(wxSize(90,90));
    
    flexGridSizer5294->Add(16, 90, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine52733 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL|wxLI_HORIZONTAL);
    
    flexGridSizer5294->Add(m_staticLine52733, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer5294->Add(8, 90, 1, wxALL, WXC_FROM_DIP(0));
    
    m_btEmergengy = new wxButton(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,90)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btEmergengy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("emergengy-button-klein")), wxLEFT);
    m_btEmergengy->SetBitmapMargins(0,0);
    #endif
    m_btEmergengy->SetBackgroundColour(wxColour(wxT("rgb(255,223,223)")));
    m_btEmergengy->SetToolTip(_("Emergengy Button"));
    
    flexGridSizer5294->Add(m_btEmergengy, 0, wxALL, WXC_FROM_DIP(0));
    m_btEmergengy->SetMinSize(wxSize(90,90));
    
    flexGridSizer5294->Add(8, 90, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine5273 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL|wxLI_HORIZONTAL);
    
    flexGridSizer5294->Add(m_staticLine5273, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticLine6571 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer6563->Add(m_staticLine6571, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer6558 = new wxFlexGridSizer(1, 20, 0, 0);
    flexGridSizer6558->SetFlexibleDirection( wxBOTH );
    flexGridSizer6558->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer6558->AddGrowableCol(9);
    flexGridSizer6558->AddGrowableRow(0);
    
    flexGridSizer6563->Add(flexGridSizer6558, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_btViewTop = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewUp")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewTop->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewTop, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewTop->SetMinSize(wxSize(26,26));
    
    m_btViewBottom = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewDown")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewBottom->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewBottom, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewBottom->SetMinSize(wxSize(26,26));
    
    m_btViewFront = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewFront")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewFront->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewFront, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewFront->SetMinSize(wxSize(26,26));
    
    m_btViewRear = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewButtom")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewRear->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewRear, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewRear->SetMinSize(wxSize(26,26));
    
    m_btViewLeft = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewLeft")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewLeft->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewLeft, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewLeft->SetMinSize(wxSize(26,26));
    
    m_btViewRight = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewRight")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewRight->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewRight, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewRight->SetMinSize(wxSize(26,26));
    
    m_btViewIso1 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewIso1")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewIso1->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewIso1, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewIso1->SetMinSize(wxSize(26,26));
    
    m_btViewIso2 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewIso2")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewIso2->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewIso2, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewIso2->SetMinSize(wxSize(26,26));
    
    m_btViewIso3 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewIso3")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewIso3->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewIso3, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewIso3->SetMinSize(wxSize(26,26));
    
    m_btViewIso4 = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ViewIso4")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btViewIso4->SetValue(false);
    
    flexGridSizer6558->Add(m_btViewIso4, 0, wxALL, WXC_FROM_DIP(1));
    m_btViewIso4->SetMinSize(wxSize(26,26));
    
    flexGridSizer6558->Add(18, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_startupTimer = new wxTimer;
    m_startupTimer->Start(100, false);
    
    m_blinkTimer = new wxTimer;
    m_blinkTimer->Start(750, false);
    
    SetName(wxT("CncSecureRunBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxVERTICAL);
    } else {
        CentreOnScreen(wxVERTICAL);
    }
    // Connect events
    this->Connect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncSecureRunBase::initDialog), NULL, this);
    this->Connect(wxEVT_SHOW, wxShowEventHandler(CncSecureRunBase::show), NULL, this);
    this->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(CncSecureRunBase::onKeyDown), NULL, this);
    m_btPlay->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::play), NULL, this);
    m_btStop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::stop), NULL, this);
    m_btEmergengy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::emergengy), NULL, this);
    m_btViewTop->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewBottom->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewFront->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewRear->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewLeft->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewRight->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso1->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso2->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso3->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso4->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_startupTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncSecureRunBase::startupTimer), NULL, this);
    m_blinkTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncSecureRunBase::blinkTimer), NULL, this);
    
}

CncSecureRunBase::~CncSecureRunBase()
{
    this->Disconnect(wxEVT_INIT_DIALOG, wxInitDialogEventHandler(CncSecureRunBase::initDialog), NULL, this);
    this->Disconnect(wxEVT_SHOW, wxShowEventHandler(CncSecureRunBase::show), NULL, this);
    this->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(CncSecureRunBase::onKeyDown), NULL, this);
    m_btPlay->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::play), NULL, this);
    m_btStop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::stop), NULL, this);
    m_btEmergengy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::emergengy), NULL, this);
    m_btViewTop->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewBottom->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewFront->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewRear->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewLeft->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewRight->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso1->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso2->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso3->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_btViewIso4->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSecureRunBase::changeView), NULL, this);
    m_startupTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncSecureRunBase::startupTimer), NULL, this);
    m_blinkTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncSecureRunBase::blinkTimer), NULL, this);
    
    m_startupTimer->Stop();
    wxDELETE( m_startupTimer );

    m_blinkTimer->Stop();
    wxDELETE( m_blinkTimer );

}

UnitTestsBase::UnitTestsBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer3344 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3344->SetFlexibleDirection( wxBOTH );
    flexGridSizer3344->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3344->AddGrowableCol(0);
    flexGridSizer3344->AddGrowableRow(1);
    this->SetSizer(flexGridSizer3344);
    
    wxFlexGridSizer* flexGridSizer3355 = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizer3355->SetFlexibleDirection( wxBOTH );
    flexGridSizer3355->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3355->AddGrowableCol(1);
    flexGridSizer3355->AddGrowableRow(0);
    
    flexGridSizer3344->Add(flexGridSizer3355, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText3357 = new wxStaticText(this, wxID_ANY, _("Tests:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText3357Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText3357Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText3357->SetFont(m_staticText3357Font);
    
    flexGridSizer3355->Add(m_staticText3357, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_unitTestSelectorArr;
    m_unitTestSelector = new wxComboBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_unitTestSelectorArr, wxCB_READONLY);
    
    flexGridSizer3355->Add(m_unitTestSelector, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_btUnitTestClear = new wxButton(this, wxID_ANY, _("Clear"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,28)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btUnitTestClear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btUnitTestClear->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer3355->Add(m_btUnitTestClear, 0, wxALL, WXC_FROM_DIP(0));
    m_btUnitTestClear->SetMinSize(wxSize(-1,28));
    
    m_btUnitTestRun = new wxButton(this, wxID_ANY, _("Run . . ."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,28)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btUnitTestRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-dll")), wxLEFT);
    m_btUnitTestRun->SetBitmapMargins(2,2);
    #endif
    m_btUnitTestRun->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_btUnitTestRunFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_btUnitTestRunFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_btUnitTestRun->SetFont(m_btUnitTestRunFont);
    
    flexGridSizer3355->Add(m_btUnitTestRun, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    m_btUnitTestRun->SetMinSize(wxSize(-1,28));
    
    m_testResultStream = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RICH2|wxTE_READONLY|wxTE_MULTILINE|wxALWAYS_SHOW_SB|wxHSCROLL|wxVSCROLL);
    m_testResultStream->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_testResultStream->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_testResultStreamFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_testResultStream->SetFont(m_testResultStreamFont);
    
    flexGridSizer3344->Add(m_testResultStream, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3370 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer3370->SetFlexibleDirection( wxBOTH );
    flexGridSizer3370->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3370->AddGrowableCol(0);
    flexGridSizer3370->AddGrowableRow(0);
    
    flexGridSizer3344->Add(flexGridSizer3370, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_unitTestStatus = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,20)), 0);
    wxFont m_unitTestStatusFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_unitTestStatus->SetFont(m_unitTestStatusFont);
    
    flexGridSizer3370->Add(m_unitTestStatus, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_unitTestStatus->SetMinSize(wxSize(-1,20));
    
    m_unitTestFreezeOutput = new wxCheckBox(this, wxID_ANY, _("Freeze"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_unitTestFreezeOutput->SetValue(false);
    m_unitTestFreezeOutput->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_unitTestFreezeOutputFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_unitTestFreezeOutputFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_unitTestFreezeOutput->SetFont(m_unitTestFreezeOutputFont);
    m_unitTestFreezeOutput->SetToolTip(_("Freeze output while running"));
    
    flexGridSizer3370->Add(m_unitTestFreezeOutput, 0, wxALL, WXC_FROM_DIP(5));
    
    m_unitTestAutoRun = new wxCheckBox(this, wxID_ANY, _("Auto Run"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_unitTestAutoRun->SetValue(true);
    m_unitTestAutoRun->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_unitTestAutoRunFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_unitTestAutoRunFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_unitTestAutoRun->SetFont(m_unitTestAutoRunFont);
    m_unitTestAutoRun->SetToolTip(_("Run directly on select a test"));
    
    flexGridSizer3370->Add(m_unitTestAutoRun, 0, wxALL, WXC_FROM_DIP(5));
    
    m_unitTestStartupTimer = new wxTimer;
    m_unitTestStartupTimer->Start(300, true);
    
    SetName(wxT("UnitTestsBase"));
    SetMinClientSize(wxSize(300,300));
    SetSize(800,600);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_SHOW, wxShowEventHandler(UnitTestsBase::onShow), NULL, this);
    m_unitTestSelector->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(UnitTestsBase::selectTest), NULL, this);
    m_btUnitTestClear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UnitTestsBase::clearView), NULL, this);
    m_unitTestStartupTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(UnitTestsBase::onStartupTimer), NULL, this);
    
}

UnitTestsBase::~UnitTestsBase()
{
    this->Disconnect(wxEVT_SHOW, wxShowEventHandler(UnitTestsBase::onShow), NULL, this);
    m_unitTestSelector->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(UnitTestsBase::selectTest), NULL, this);
    m_btUnitTestClear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UnitTestsBase::clearView), NULL, this);
    m_unitTestStartupTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(UnitTestsBase::onStartupTimer), NULL, this);
    
    m_unitTestStartupTimer->Stop();
    wxDELETE( m_unitTestStartupTimer );

}

ImageLib16::ImageLib16()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FINGER16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FINGER16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FINGER16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FINGER16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_WARNING16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_WARNING16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_WARNING16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_WARNING16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_OK16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_OK16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_OK16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_OK16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("ANIMATION_SPRITE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("ANIMATION_SPRITE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_CONNECTED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_CONNECTED"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_CONNECTED@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_CONNECTED@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DISCONNECTED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DISCONNECTED"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DISCONNECTED@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DISCONNECTED@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COORD_BOTTOM_TOP"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COORD_BOTTOM_TOP"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COORD_TOP_BOTTOM"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COORD_TOP_BOTTOM"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MONITORING_MINIMAL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MONITORING_MINIMAL"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MONITORING_NORMAL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MONITORING_NORMAL"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PLAY_3D"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PLAY_3D"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PLAY_3D@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PLAY_3D@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STOP_3D"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STOP_3D"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STOP_3D@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STOP_3D@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SERIAL_SYP_ON"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SERIAL_SYP_ON"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SERIAL_SYP_ON@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SERIAL_SYP_ON@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SERIAL_SPY_OFF"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SERIAL_SPY_OFF"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SERIAL_SPY_OFF@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SERIAL_SPY_OFF@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PLUS"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PLUS"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PLUS@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PLUS@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MINUS"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MINUS"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MINUS@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MINUS@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_ROOT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_ROOT"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_ROOT@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_ROOT@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_FOLDER_CLOSE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_FOLDER_CLOSE"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_FOLDER_CLOSE@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_FOLDER_CLOSE@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_FOLDER_OPEN"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_FOLDER_OPEN"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_FOLDER_OPEN@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_FOLDER_OPEN@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PRE_DEF_PARA_SET"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PRE_DEF_PARA_SET"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PRE_DEF_PARA_SET@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PRE_DEF_PARA_SET@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_WPT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_WPT"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_NO_WPT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_NO_WPT"), bmp));
        }
    }
    
}

ImageLib16::~ImageLib16()
{
}

ImageLib24::ImageLib24()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_GREEN"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_GREEN"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_RED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_RED"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_YELLOW"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_YELLOW"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_DEFAULT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_DEFAULT"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_RUN_RELEASE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_RUN_RELEASE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_RUN_DEBUG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_RUN_DEBUG"), bmp));
        }
    }
    
}

ImageLib24::~ImageLib24()
{
}

ImageLibFile::ImageLibFile()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_LRU_FILE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_LRU_FILE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FILE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FILE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FOLDER"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FOLDER"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FOLDER_UP"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FOLDER_UP"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_ERROR"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_ERROR"), bmp));
        }
    }
    
}

ImageLibFile::~ImageLibFile()
{
}

ImageLibBig::ImageLibBig()
    : wxImageList(1024, 1024, true)
    , m_imagesWidth(1024)
    , m_imagesHeight(1024)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_CNC"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_CNC"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MILL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MILL"), bmp));
        }
    }
    
}

ImageLibBig::~ImageLibBig()
{
}

ImageLibPortSelector::ImageLibPortSelector()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PS_CONNECTED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PS_CONNECTED"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PS_ACCESS_DENIED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PS_ACCESS_DENIED"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PS_UNKNOWN"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PS_UNKNOWN"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PS_UNKNOWN@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PS_UNKNOWN@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PS_AVAILABLE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PS_AVAILABLE"), bmp));
        }
    }
    
}

ImageLibPortSelector::~ImageLibPortSelector()
{
}

ImageLibAppIcons::ImageLibAppIcons()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R32"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R32"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R32@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R32@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D32"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D32"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D32@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D32@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R64"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R64"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R64@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R64@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D64"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D64"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D64@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D64@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R128"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R128"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R128@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R128@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D128"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D128"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D128@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D128@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R256"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R256"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R256@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R256@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D256"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D256"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D256@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D256@2x"), bmp));
        }
    }
    
}

ImageLibAppIcons::~ImageLibAppIcons()
{
}

ImageLibDebugger::ImageLibDebugger()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DB_PREPROCESSING"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DB_PREPROCESSING"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DB_SPOOLING"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DB_SPOOLING"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DB_CONFIGURATION"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DB_CONFIGURATION"), bmp));
        }
    }
    
}

ImageLibDebugger::~ImageLibDebugger()
{
}

ImageLibConfig::ImageLibConfig()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_CATEGORY"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_CATEGORY"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_BOOL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_BOOL"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_STRING"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_STRING"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_LONG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_LONG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_DOUBLE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_DOUBLE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_ENUM"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_ENUM"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_INACTIVE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_INACTIVE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_UNKNOWN"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_UNKNOWN"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_WORK_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_WORK_CFG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_GENERAL_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_GENERAL_CFG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_CFG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_ENV_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_ENV_CFG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SVG_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SVG_CFG"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SVG_CFG@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SVG_CFG@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_GCODE_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_GCODE_CFG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TOOL_MAGAZINE_ENTRY"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TOOL_MAGAZINE_ENTRY"), bmp));
        }
    }
    
}

ImageLibConfig::~ImageLibConfig()
{
}

ImageLibPosSpy::ImageLibPosSpy()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PID_MAJOR"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PID_MAJOR"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PID_DETAIL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PID_DETAIL"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TYPE_RAPID"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TYPE_RAPID"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TYPE_WORK"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TYPE_WORK"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TYPE_MAX"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TYPE_MAX"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TYPE_USER_DEFINED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TYPE_USER_DEFINED"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_POS"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_POS"), bmp));
        }
    }
    
}

ImageLibPosSpy::~ImageLibPosSpy()
{
}

ImageLibSetterList::ImageLibSetterList()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SETTER"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SETTER"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SEPARATOR"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SEPARATOR"), bmp));
        }
    }
    
}

ImageLibSetterList::~ImageLibSetterList()
{
}

ImageLibProbe::ImageLibProbe()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_RELEASE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_RELEASE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PROBE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PROBE"), bmp));
        }
    }
    
}

ImageLibProbe::~ImageLibProbe()
{
}

ImageLibStatistics::ImageLibStatistics()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_HIDE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_HIDE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SHOW"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SHOW"), bmp));
        }
    }
    
}

ImageLibStatistics::~ImageLibStatistics()
{
}

ImageLibSummary::ImageLibSummary()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_HEADLINE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_HEADLINE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TYPE_COMMON"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TYPE_COMMON"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TYPE_GCODE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TYPE_GCODE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TYPE_SVG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TYPE_SVG"), bmp));
        }
    }
    
}

ImageLibSummary::~ImageLibSummary()
{
}

ImageLibPerspective::ImageLibPerspective()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_USER_PERSPECTIVE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_USER_PERSPECTIVE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_USER_PERSPECTIVE_SAVE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_USER_PERSPECTIVE_SAVE"), bmp));
        }
    }
    
}

ImageLibPerspective::~ImageLibPerspective()
{
}

ImageLibHeartbeat::ImageLibHeartbeat()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_HEART"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_HEART"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_HEART_PLUS"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_HEART_PLUS"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_HEART_MINUS"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_HEART_MINUS"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_HEART_INACTIVE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_HEART_INACTIVE"), bmp));
        }
    }
    
}

ImageLibHeartbeat::~ImageLibHeartbeat()
{
}

ImageLibSecureRun::ImageLibSecureRun()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_RUN"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_RUN"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PAUSE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PAUSE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SECURE_DLG_YES"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SECURE_DLG_YES"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SECURE_DLG_NO"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SECURE_DLG_NO"), bmp));
        }
    }
    
}

ImageLibSecureRun::~ImageLibSecureRun()
{
}

ImageLibSpeed::ImageLibSpeed()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SPEED_CTRL_ON"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SPEED_CTRL_ON"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SPEED_CTRL_OFF"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SPEED_CTRL_OFF"), bmp));
        }
    }
    
}

ImageLibSpeed::~ImageLibSpeed()
{
}

ImageLibGamepad::ImageLibGamepad()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DEACTIVATED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DEACTIVATED"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_ACTIVATED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_ACTIVATED"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_NAVI_XY"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_NAVI_XY"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_NAVI_Z"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_NAVI_Z"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STICK_LEFT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STICK_LEFT"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STICK_RIGHT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STICK_RIGHT"), bmp));
        }
    }
    
}

ImageLibGamepad::~ImageLibGamepad()
{
}
