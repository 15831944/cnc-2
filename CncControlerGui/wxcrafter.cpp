//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBClass::MainFrameBClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    m_auimgrMain = new wxAuiManager;
    m_auimgrMain->SetManagedWindow( this );
    m_auimgrMain->SetFlags( wxAUI_MGR_LIVE_RESIZE|wxAUI_MGR_TRANSPARENT_HINT|wxAUI_MGR_TRANSPARENT_DRAG|wxAUI_MGR_ALLOW_ACTIVE_PANE|wxAUI_MGR_ALLOW_FLOATING);
    m_auimgrMain->GetArtProvider()->SetMetric( wxAUI_DOCKART_SASH_SIZE, 3);
    m_auimgrMain->GetArtProvider()->SetColor( wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR, wxColour(wxT("rgb(0,0,128)")));
    m_auimgrMain->GetArtProvider()->SetColor( wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR, wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_auimgrMain->GetArtProvider()->SetColor( wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR, wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_auimgrMain->GetArtProvider()->SetColor( wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR, wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_auimgrMain->GetArtProvider()->SetMetric(wxAUI_DOCKART_GRADIENT_TYPE, wxAUI_GRADIENT_NONE);
    
    m_auibarMain = new wxAuiToolBar(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxAUI_TB_PLAIN_BACKGROUND|wxAUI_TB_DEFAULT_STYLE|wxAUI_TB_NO_AUTORESIZE);
    m_auibarMain->SetToolBitmapSize(wxSize(16,16));
    
    m_auimgrMain->AddPane(m_auibarMain, wxAuiPaneInfo().Name(wxT("Toolbar")).Caption(_("Main")).Direction(wxAUI_DOCK_TOP).Layer(0).Row(0).Position(0).BestSize(40,40).MinSize(40,40).MaxSize(40,40).Fixed().CaptionVisible(false).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false));
    
    m_bmpButton4490 = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("application-side-boxes")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_bmpButton4490->SetToolTip(_("Toggle Template Manager"));
    m_auibarMain->AddControl(m_bmpButton4490);
    
    m_auibarMain->AddSeparator();
    
    m_staticText1842 = new wxStaticText(m_auibarMain, wxID_ANY, _("Port:"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    m_auibarMain->AddControl(m_staticText1842);
    
    m_searchConnections = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("database_refresh")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_searchConnections->SetToolTip(_("Update COM ports"));
    m_auibarMain->AddControl(m_searchConnections);
    
    m_portSelector = new wxBitmapComboBox(m_auibarMain, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(120,-1)), wxArrayString(), wxCB_READONLY);
    m_auibarMain->AddControl(m_portSelector);
    
    m_connect = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-connected")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    m_connect->SetToolTip(_("Connect to mirco controller"));
    m_auibarMain->AddControl(m_connect);
    
    m_auibarMain->AddSeparator();
    
    m_btSelectReferences = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("view-orientation")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectReferences->SetToolTip(_("References"));
    m_auibarMain->AddControl(m_btSelectReferences);
    
    m_btSelectManuallyMove = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-fold")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectManuallyMove->SetToolTip(_("Manually Controller"));
    m_auibarMain->AddControl(m_btSelectManuallyMove);
    
    m_btSelectSetup = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("system-settings")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectSetup->SetToolTip(_("Setup"));
    m_auibarMain->AddControl(m_btSelectSetup);
    
    m_btSelectTemplate = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("package-supported")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSelectTemplate->SetToolTip(_("Template"));
    m_auibarMain->AddControl(m_btSelectTemplate);
    
    m_auibarMain->AddSeparator();
    
    m_auibarMain->AddStretchSpacer(1);
    
    m_auibarMain->AddSeparator();
    
    m_staticText1748 = new wxStaticText(m_auibarMain, wxID_ANY, _("Step Delay:"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    m_staticText1748->Hide();
    m_auibarMain->AddControl(m_staticText1748);
    
    m_auibarMain->AddTool(wxID_ANY, _("Tool Label"), wxXmlResource::Get()->LoadBitmap(wxT("snail")), wxNullBitmap, wxITEM_NORMAL, _("Config Step Delay"), wxT(""), NULL);
    wxAuiToolBarItem* m_configStepDelay = m_auibarMain->FindToolByIndex(m_auibarMain->GetToolCount()-1);
    if (m_configStepDelay) {
        m_configStepDelay->SetHasDropDown(true);
        m_configStepDelayMenu = new wxMenu;
        m_miCfgStepDelayMin = new wxMenuItem(m_configStepDelayMenu, wxID_ANY, _("Set Step Delay (MIN)"), wxT(""), wxITEM_RADIO);
        m_configStepDelayMenu->Append(m_miCfgStepDelayMin);
        m_miCfgStepDelayMax = new wxMenuItem(m_configStepDelayMenu, wxID_ANY, _("Set Step Delay (MAX)"), wxT(""), wxITEM_RADIO);
        m_configStepDelayMenu->Append(m_miCfgStepDelayMax);
        m_miCfgSimulateArduino = new wxMenuItem(m_configStepDelayMenu, wxID_ANY, _("Simulate Arduino"), wxT(""), wxITEM_RADIO);
        m_configStepDelayMenu->Append(m_miCfgSimulateArduino);
        m_miCfgCustom = new wxMenuItem(m_configStepDelayMenu, wxID_ANY, _("Custom value"), wxT(""), wxITEM_RADIO);
        m_configStepDelayMenu->Append(m_miCfgCustom);
        
        m_dropdownMenus.insert(std::make_pair( m_configStepDelay->GetId(), m_configStepDelayMenu) );
    }
    
    m_stepDelay = new wxSlider(m_auibarMain, wxID_ANY, 0, 0, 128, wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(75,-1)), wxSL_SELRANGE|wxSL_HORIZONTAL);
    wxFont m_stepDelayFont(6, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_stepDelay->SetFont(m_stepDelayFont);
    m_stepDelay->SetToolTip(_("Artificially Step Delay"));
    m_auibarMain->AddControl(m_stepDelay);
    
    m_stepDelayValue = new wxStaticText(m_auibarMain, wxID_ANY, _("0 ms"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(30,-1)), wxALIGN_RIGHT);
    wxFont m_stepDelayValueFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_stepDelayValue->SetFont(m_stepDelayValueFont);
    m_auibarMain->AddControl(m_stepDelayValue);
    
    m_auibarMain->AddSeparator();
    
    m_rcReset = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcReset->SetToolTip(_("Reset Controller"));
    m_auibarMain->AddControl(m_rcReset);
    
    m_auibarMain->AddSeparator();
    
    m_rcDebugConfig = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("server-connect")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcDebugConfig->SetToolTip(_("Open Debug Configuration"));
    m_auibarMain->AddControl(m_rcDebugConfig);
    
    m_rcDebug = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("bug-go")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcDebug->SetToolTip(_("Run - Debug"));
    m_auibarMain->AddControl(m_rcDebug);
    
    m_rcNextBreakpoint = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-next-2")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcNextBreakpoint->SetToolTip(_("Debug: Next Breakpoint"));
    m_auibarMain->AddControl(m_rcNextBreakpoint);
    
    m_rcNextStep = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-down-2")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcNextStep->SetToolTip(_("Debug: Next Step"));
    m_auibarMain->AddControl(m_rcNextStep);
    
    m_rcFinish = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-bottom")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcFinish->SetToolTip(_("Debug: Finish Session"));
    m_auibarMain->AddControl(m_rcFinish);
    
    m_auibarMain->AddSeparator();
    
    m_rcRun = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("arrow-right-3")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcRun->SetToolTip(_("Run - Release"));
    m_auibarMain->AddControl(m_rcRun);
    
    m_auibarMain->AddSeparator();
    
    m_rcPause = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("media-playback-pause-blue")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcPause->SetToolTip(_("Pause"));
    m_auibarMain->AddControl(m_rcPause);
    
    m_rcStop = new wxBitmapButton(m_auibarMain, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_stop")), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_rcStop->SetToolTip(_("Stop"));
    m_auibarMain->AddControl(m_rcStop);
    
    m_auibarMain->AddSeparator();
    
    m_btnEmergenyStop = new wxButton(m_auibarMain, wxID_ANY, _("Emergency Stop [ESC]"), wxDefaultPosition, wxDLG_UNIT(m_auibarMain, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btnEmergenyStop->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("error")), wxRIGHT);
    m_btnEmergenyStop->SetBitmapMargins(10,2);
    #endif
    m_btnEmergenyStop->SetBackgroundColour(wxColour(wxT("rgb(128,64,64)")));
    m_btnEmergenyStop->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_btnEmergenyStop->SetToolTip(_("Interrupt the CNC Controller"));
    m_auibarMain->AddControl(m_btnEmergenyStop);
    m_auibarMain->Realize();
    
    m_scrollWinMain = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_scrollWinMain, wxAuiPaneInfo().Name(wxT("SourceView")).Caption(_("CNC Main View")).Direction(wxAUI_DOCK_CENTER).Layer(0).Row(0).Position(0).BestSize(100,100).MinSize(100,100).MaxSize(100,100).CaptionVisible(true).MaximizeButton(true).CloseButton(false).MinimizeButton(true).PinButton(false));
    
    wxFlexGridSizer* flexGridSizer434 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer434->SetFlexibleDirection( wxBOTH );
    flexGridSizer434->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer434->AddGrowableCol(0);
    flexGridSizer434->AddGrowableRow(1);
    m_scrollWinMain->SetSizer(flexGridSizer434);
    
    wxArrayString m_mainViewSelectorArr;
    m_mainViewSelectorArr.Add(wxT("Source View"));
    m_mainViewSelectorArr.Add(wxT("Setup"));
    m_mainViewSelectorArr.Add(wxT("References"));
    m_mainViewSelectorArr.Add(wxT("Manuel Controller"));
    m_mainViewSelectorArr.Add(wxT("Test"));
    m_mainViewSelectorArr.Add(wxT("File Manager Preview"));
    m_mainViewSelector = new wxChoice(m_scrollWinMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWinMain, wxSize(-1,-1)), m_mainViewSelectorArr, wxBORDER_NONE);
    wxFont m_mainViewSelectorFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_mainViewSelector->SetFont(m_mainViewSelectorFont);
    m_mainViewSelector->SetSelection(0);
    
    flexGridSizer434->Add(m_mainViewSelector, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_mainViewBook = new wxSimplebook(m_scrollWinMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWinMain, wxSize(-1,-1)), wxBK_DEFAULT);
    m_mainViewBook->SetName(wxT("m_mainViewBook"));
    m_mainViewBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer434->Add(m_mainViewBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_mainBookSourcePanel = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookSourcePanel, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer706 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer706->SetFlexibleDirection( wxBOTH );
    flexGridSizer706->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer706->AddGrowableCol(1);
    flexGridSizer706->AddGrowableRow(0);
    m_mainBookSourcePanel->SetSizer(flexGridSizer706);
    
    wxFlexGridSizer* flexGridSizer1368 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1368->SetFlexibleDirection( wxBOTH );
    flexGridSizer1368->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1368->SetMinSize(28,-1);
    
    flexGridSizer706->Add(flexGridSizer1368, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_openSourceExtern = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_openSourceExtern->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_BUTTON, wxDefaultSize), wxLEFT);
    m_openSourceExtern->SetBitmapMargins(2,2);
    #endif
    m_openSourceExtern->SetToolTip(_("Open Source extern as Text"));
    
    flexGridSizer1368->Add(m_openSourceExtern, 0, wxALL, WXC_FROM_DIP(1));
    m_openSourceExtern->SetMinSize(wxSize(24,24));
    
    m_openSvgExtern = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_openSvgExtern->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-gtk")), wxLEFT);
    m_openSvgExtern->SetBitmapMargins(2,2);
    #endif
    m_openSvgExtern->SetToolTip(_("Open Source extern with corresbonding tool"));
    
    flexGridSizer1368->Add(m_openSvgExtern, 0, wxALL, WXC_FROM_DIP(1));
    m_openSvgExtern->SetMinSize(wxSize(24,24));
    
    m_saveTemplate = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_saveTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxLEFT);
    m_saveTemplate->SetBitmapMargins(2,2);
    #endif
    m_saveTemplate->SetToolTip(_("Save Source"));
    
    flexGridSizer1368->Add(m_saveTemplate, 0, wxALL, WXC_FROM_DIP(1));
    m_saveTemplate->SetMinSize(wxSize(24,24));
    
    m_reloadTemplate = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_reloadTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_reload")), wxLEFT);
    m_reloadTemplate->SetBitmapMargins(2,2);
    #endif
    m_reloadTemplate->SetToolTip(_("Reload Source"));
    
    flexGridSizer1368->Add(m_reloadTemplate, 0, wxALL, WXC_FROM_DIP(1));
    m_reloadTemplate->SetMinSize(wxSize(24,24));
    
    m_staticLine4472 = new wxStaticLine(m_mainBookSourcePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1368->Add(m_staticLine4472, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_btSvgToggleWordWrap = new wxBitmapToggleButton(m_mainBookSourcePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-word_wrap")), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    m_btSvgToggleWordWrap->SetToolTip(_("Toggle Word Wrap Mode"));
    m_btSvgToggleWordWrap->SetValue(true);
    
    flexGridSizer1368->Add(m_btSvgToggleWordWrap, 0, wxALL, WXC_FROM_DIP(1));
    m_btSvgToggleWordWrap->SetMinSize(wxSize(24,24));
    
    m_staticLine4474 = new wxStaticLine(m_mainBookSourcePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1368->Add(m_staticLine4474, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_btPathGenerator = new wxButton(m_mainBookSourcePanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPathGenerator->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-globals")), wxLEFT);
    m_btPathGenerator->SetBitmapMargins(2,2);
    #endif
    m_btPathGenerator->SetToolTip(_("Open SVG Path Generator"));
    
    flexGridSizer1368->Add(m_btPathGenerator, 0, wxALL, WXC_FROM_DIP(1));
    m_btPathGenerator->SetMinSize(wxSize(24,24));
    flexGridSizer1368->SetMinSize(wxSize(28,-1));
    
    m_templateNotebook = new wxNotebook(m_mainBookSourcePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookSourcePanel, wxSize(-1,-1)), wxNB_NOPAGETHEME|wxBK_BOTTOM|wxBK_DEFAULT);
    m_templateNotebook->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_templateNotebook->SetName(wxT("m_templateNotebook"));
    wxImageList* m_templateNotebook_il = new wxImageList(16, 16);
    m_templateNotebook->AssignImageList(m_templateNotebook_il);
    
    flexGridSizer706->Add(m_templateNotebook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelTplEdit = new wxPanel(m_templateNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_templateNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplEditImgIndex;
    m_panelTplEditImgIndex = m_templateNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("book_blue")));
    m_templateNotebook->AddPage(m_panelTplEdit, _("Source"), false, m_panelTplEditImgIndex);
    
    wxFlexGridSizer* flexGridSizer1294 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1294->SetFlexibleDirection( wxBOTH );
    flexGridSizer1294->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1294->AddGrowableCol(0);
    flexGridSizer1294->AddGrowableRow(0);
    m_panelTplEdit->SetSizer(flexGridSizer1294);
    
    m_stcFileContent = new wxStyledTextCtrl(m_panelTplEdit, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), wxHSCROLL|wxVSCROLL);
    // Configure the fold margin
    m_stcFileContent->SetMarginType     (4, wxSTC_MARGIN_SYMBOL);
    m_stcFileContent->SetMarginMask     (4, wxSTC_MASK_FOLDERS);
    m_stcFileContent->SetMarginSensitive(4, true);
    m_stcFileContent->SetMarginWidth    (4, 0);
    
    // Configure the tracker margin
    m_stcFileContent->SetMarginWidth(1, 0);
    
    // Configure the symbol margin
    m_stcFileContent->SetMarginType (2, wxSTC_MARGIN_SYMBOL);
    m_stcFileContent->SetMarginMask (2, ~(wxSTC_MASK_FOLDERS));
    m_stcFileContent->SetMarginWidth(2, 0);
    m_stcFileContent->SetMarginSensitive(2, true);
    
    // Configure the line numbers margin
    int m_stcFileContent_PixelWidth = 4 + 5 *m_stcFileContent->TextWidth(wxSTC_STYLE_LINENUMBER, wxT("9"));
    m_stcFileContent->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_stcFileContent->SetMarginWidth(0,m_stcFileContent_PixelWidth);
    
    // Configure the line symbol margin
    m_stcFileContent->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_stcFileContent->SetMarginMask(3, 0);
    m_stcFileContent->SetMarginWidth(3,1);
    // Select the lexer
    m_stcFileContent->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_stcFileContent->StyleClearAll();
    m_stcFileContent->SetWrapMode(0);
    m_stcFileContent->SetIndentationGuides(0);
    m_stcFileContent->SetKeyWords(0, wxT(""));
    m_stcFileContent->SetKeyWords(1, wxT(""));
    m_stcFileContent->SetKeyWords(2, wxT(""));
    m_stcFileContent->SetKeyWords(3, wxT(""));
    m_stcFileContent->SetKeyWords(4, wxT(""));
    
    flexGridSizer1294->Add(m_stcFileContent, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer1809 = new wxFlexGridSizer(0, 8, 0, 0);
    flexGridSizer1809->SetFlexibleDirection( wxBOTH );
    flexGridSizer1809->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1809->AddGrowableCol(5);
    
    flexGridSizer1294->Add(flexGridSizer1809, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_tbCaseSensitive = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-case-sensitive")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbCaseSensitive->SetToolTip(_("Match case"));
    m_tbCaseSensitive->SetValue(false);
    
    flexGridSizer1809->Add(m_tbCaseSensitive, 0, wxALL, WXC_FROM_DIP(1));
    m_tbCaseSensitive->SetMinSize(wxSize(26,26));
    
    m_tbWholeWord = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-whole-word")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbWholeWord->SetToolTip(_("Match whole word"));
    m_tbWholeWord->SetValue(false);
    
    flexGridSizer1809->Add(m_tbWholeWord, 0, wxALL, WXC_FROM_DIP(1));
    m_tbWholeWord->SetMinSize(wxSize(26,26));
    
    m_tbRegEx = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-regular-expression")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbRegEx->SetToolTip(_("Match regular expresion"));
    m_tbRegEx->SetValue(false);
    
    flexGridSizer1809->Add(m_tbRegEx, 0, wxALL, WXC_FROM_DIP(1));
    m_tbRegEx->SetMinSize(wxSize(26,26));
    
    m_tbHighLight = new wxBitmapToggleButton(m_panelTplEdit, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-marker")), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(26,26)), 0);
    m_tbHighLight->SetToolTip(_("Highlight all occurences"));
    m_tbHighLight->Enable(false);
    m_tbHighLight->SetValue(false);
    
    flexGridSizer1809->Add(m_tbHighLight, 0, wxALL, WXC_FROM_DIP(1));
    m_tbHighLight->SetMinSize(wxSize(26,26));
    
    m_svgEditSearchState = new wxStaticBitmap(m_panelTplEdit, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(20,-1)), 0 );
    
    flexGridSizer1809->Add(m_svgEditSearchState, 0, wxALL, WXC_FROM_DIP(5));
    m_svgEditSearchState->SetMinSize(wxSize(20,-1));
    
    wxArrayString m_svgEditSearchArr;
    m_svgEditSearch = new wxComboBox(m_panelTplEdit, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), m_svgEditSearchArr, 0);
    m_svgEditSearch->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_svgEditSearch->SetToolTip(_("Search pattern"));
    #if wxVERSION_NUMBER >= 3000
    m_svgEditSearch->SetHint(wxT(""));
    #endif
    
    flexGridSizer1809->Add(m_svgEditSearch, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_svgEditFind = new wxButton(m_panelTplEdit, wxID_ANY, _("Find"), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEditFind->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("system-search-2")), wxLEFT);
    m_svgEditFind->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer1809->Add(m_svgEditFind, 0, wxALL, WXC_FROM_DIP(1));
    m_svgEditFind->SetMinSize(wxSize(-1,26));
    
    m_svgEditFindPrev = new wxButton(m_panelTplEdit, wxID_ANY, _("Find Prev"), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEditFindPrev->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("go-up-search")), wxLEFT);
    m_svgEditFindPrev->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer1809->Add(m_svgEditFindPrev, 0, wxALL, WXC_FROM_DIP(1));
    m_svgEditFindPrev->SetMinSize(wxSize(-1,26));
    
    wxFlexGridSizer* flexGridSizer713 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer713->SetFlexibleDirection( wxBOTH );
    flexGridSizer713->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer713->AddGrowableCol(1);
    
    flexGridSizer1294->Add(flexGridSizer713, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_filePosition = new wxStaticText(m_panelTplEdit, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(100,-1)), 0);
    m_filePosition->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_filePositionFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_filePosition->SetFont(m_filePositionFont);
    
    flexGridSizer713->Add(m_filePosition, 0, wxALL, WXC_FROM_DIP(1));
    m_filePosition->SetMinSize(wxSize(100,-1));
    
    m_svgEditStatus = new wxTextCtrl(m_panelTplEdit, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    m_svgEditStatus->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_svgEditStatusFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_svgEditStatus->SetFont(m_svgEditStatusFont);
    #if wxVERSION_NUMBER >= 3000
    m_svgEditStatus->SetHint(wxT(""));
    #endif
    
    flexGridSizer713->Add(m_svgEditStatus, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_editMode = new wxStaticText(m_panelTplEdit, wxID_ANY, _("edit mode"), wxDefaultPosition, wxDLG_UNIT(m_panelTplEdit, wxSize(-1,-1)), 0);
    m_editMode->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_editModeFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_editMode->SetFont(m_editModeFont);
    
    flexGridSizer713->Add(m_editMode, 0, wxALL, WXC_FROM_DIP(1));
    
    m_panelTplUserAgent = new wxPanel(m_templateNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_templateNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panelTplUserAgentImgIndex;
    m_panelTplUserAgentImgIndex = m_templateNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("book_green")));
    m_templateNotebook->AddPage(m_panelTplUserAgent, _("UserAgent"), false, m_panelTplUserAgentImgIndex);
    
    wxFlexGridSizer* flexGridSizer1506 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1506->SetFlexibleDirection( wxBOTH );
    flexGridSizer1506->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1506->AddGrowableCol(0);
    flexGridSizer1506->AddGrowableRow(0);
    m_panelTplUserAgent->SetSizer(flexGridSizer1506);
    
    wxFlexGridSizer* flexGridSizer1488 = new wxFlexGridSizer(2, 3, 0, 0);
    flexGridSizer1488->SetFlexibleDirection( wxBOTH );
    flexGridSizer1488->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1488->AddGrowableCol(0);
    flexGridSizer1488->AddGrowableCol(1);
    flexGridSizer1488->AddGrowableCol(2);
    flexGridSizer1488->AddGrowableRow(0);
    flexGridSizer1488->AddGrowableRow(1);
    
    flexGridSizer1506->Add(flexGridSizer1488, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer1490 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1490->SetFlexibleDirection( wxBOTH );
    flexGridSizer1490->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1490->AddGrowableCol(0);
    flexGridSizer1490->AddGrowableRow(1);
    flexGridSizer1490->AddGrowableRow(3);
    
    flexGridSizer1488->Add(flexGridSizer1490, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1498 = new wxStaticText(m_panelTplUserAgent, wxID_ANY, _("Inbound Path List:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), 0);
    wxFont m_staticText1498Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1498Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1498->SetFont(m_staticText1498Font);
    
    flexGridSizer1490->Add(m_staticText1498, 0, wxALL, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAInboundPathList = new wxDataViewListCtrl(m_panelTplUserAgent, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlSvgUAInboundPathList->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1490->Add(m_dvListCtrlSvgUAInboundPathList, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAInboundPathList->AppendTextColumn(_("Ln"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlSvgUAInboundPathList->AppendToggleColumn(_("Considered"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_CENTER);
    m_dvListCtrlSvgUAInboundPathList->AppendTextColumn(_("Node"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_staticText14983 = new wxStaticText(m_panelTplUserAgent, wxID_ANY, _("Use Directives:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), 0);
    wxFont m_staticText14983Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText14983Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText14983->SetFont(m_staticText14983Font);
    
    flexGridSizer1490->Add(m_staticText14983, 0, wxALL, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAUseDirective = new wxDataViewListCtrl(m_panelTplUserAgent, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlSvgUAUseDirective->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1490->Add(m_dvListCtrlSvgUAUseDirective, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUAUseDirective->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlSvgUAUseDirective->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    wxFlexGridSizer* flexGridSizer1492 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1492->SetFlexibleDirection( wxBOTH );
    flexGridSizer1492->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1492->AddGrowableCol(0);
    flexGridSizer1492->AddGrowableRow(1);
    
    flexGridSizer1488->Add(flexGridSizer1492, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1500 = new wxStaticText(m_panelTplUserAgent, wxID_ANY, _("Detail Info:"), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), 0);
    wxFont m_staticText1500Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1500Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1500->SetFont(m_staticText1500Font);
    
    flexGridSizer1492->Add(m_staticText1500, 0, wxALL, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUADetailInfo = new wxDataViewListCtrl(m_panelTplUserAgent, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlSvgUADetailInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1492->Add(m_dvListCtrlSvgUADetailInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_dvListCtrlSvgUADetailInfo->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlSvgUADetailInfo->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_selectedUAInfo = new wxTextCtrl(m_panelTplUserAgent, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelTplUserAgent, wxSize(-1,-1)), wxTE_READONLY);
    m_selectedUAInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    #if wxVERSION_NUMBER >= 3000
    m_selectedUAInfo->SetHint(wxT(""));
    #endif
    
    flexGridSizer1506->Add(m_selectedUAInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_mainBookSetup = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookSetup, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer1884 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1884->SetFlexibleDirection( wxBOTH );
    flexGridSizer1884->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1884->AddGrowableCol(0);
    flexGridSizer1884->AddGrowableRow(0);
    m_mainBookSetup->SetSizer(flexGridSizer1884);
    
    m_notebook4561 = new wxNotebook(m_mainBookSetup, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookSetup, wxSize(-1,-1)), wxBK_DEFAULT);
    m_notebook4561->SetName(wxT("m_notebook4561"));
    wxImageList* m_notebook4561_il = new wxImageList(16, 16);
    m_notebook4561->AssignImageList(m_notebook4561_il);
    
    flexGridSizer1884->Add(m_notebook4561, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_setupConfigPage = new wxPanel(m_notebook4561, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook4561, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_setupConfigPageImgIndex;
    m_setupConfigPageImgIndex = m_notebook4561_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("system-settings")));
    m_notebook4561->AddPage(m_setupConfigPage, _("Main Config"), true, m_setupConfigPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer3705 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3705->SetFlexibleDirection( wxBOTH );
    flexGridSizer3705->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3705->AddGrowableCol(0);
    flexGridSizer3705->AddGrowableRow(0);
    m_setupConfigPage->SetSizer(flexGridSizer3705);
    
    wxArrayString m_pgMgrSetupArr;
    wxUnusedVar(m_pgMgrSetupArr);
    wxArrayInt m_pgMgrSetupIntArr;
    wxUnusedVar(m_pgMgrSetupIntArr);
    m_pgMgrSetup = new wxPropertyGridManager(m_setupConfigPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupConfigPage, wxSize(-1,-1)), wxPG_DESCRIPTION|wxPG_TOOLBAR|wxPG_LIMITED_EDITING|wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    m_pgMgrSetup->SetToolTip(_("rtrt"));
    
    flexGridSizer3705->Add(m_pgMgrSetup, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_setupToolMagazine = new wxPanel(m_notebook4561, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook4561, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_setupToolMagazineImgIndex;
    m_setupToolMagazineImgIndex = m_notebook4561_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("database")));
    m_notebook4561->AddPage(m_setupToolMagazine, _("Tool Magazine"), false, m_setupToolMagazineImgIndex);
    
    wxFlexGridSizer* flexGridSizer45651 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer45651->SetFlexibleDirection( wxBOTH );
    flexGridSizer45651->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer45651->AddGrowableCol(0);
    flexGridSizer45651->AddGrowableRow(0);
    m_setupToolMagazine->SetSizer(flexGridSizer45651);
    
    m_toolMagazinePlaceholder = new wxPanel(m_setupToolMagazine, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_setupToolMagazine, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_toolMagazinePlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_toolMagazinePlaceholder->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer45651->Add(m_toolMagazinePlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_setupSpeedWizard = new wxPanel(m_notebook4561, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook4561, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_setupSpeedWizard->Hide();
    int m_setupSpeedWizardImgIndex;
    m_setupSpeedWizardImgIndex = m_notebook4561_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("tools-wizard")));
    m_notebook4561->AddPage(m_setupSpeedWizard, _("Wizard Speed"), false, m_setupSpeedWizardImgIndex);
    
    wxFlexGridSizer* flexGridSizer4565 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer4565->SetFlexibleDirection( wxBOTH );
    flexGridSizer4565->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_setupSpeedWizard->SetSizer(flexGridSizer4565);
    
    m_staticText4575 = new wxStaticText(m_setupSpeedWizard, wxID_ANY, _("Placeholder . . ."), wxDefaultPosition, wxDLG_UNIT(m_setupSpeedWizard, wxSize(-1,-1)), 0);
    wxFont m_staticText4575Font(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_ITALIC, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText4575->SetFont(m_staticText4575Font);
    
    flexGridSizer4565->Add(m_staticText4575, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine4645 = new wxStaticLine(m_mainBookSetup, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookSetup, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1884->Add(m_staticLine4645, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    wxFlexGridSizer* flexGridSizer4541 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4541->SetFlexibleDirection( wxBOTH );
    flexGridSizer4541->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4541->AddGrowableCol(0);
    flexGridSizer4541->AddGrowableRow(0);
    
    flexGridSizer1884->Add(flexGridSizer4541, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_loadConfiguration = new wxButton(m_mainBookSetup, wxID_ANY, _("Restore Configuration"), wxDefaultPosition, wxDLG_UNIT(m_mainBookSetup, wxSize(-1,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_loadConfiguration->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("reload")), wxLEFT);
    m_loadConfiguration->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4541->Add(m_loadConfiguration, 0, wxALL, WXC_FROM_DIP(1));
    m_loadConfiguration->SetMinSize(wxSize(-1,26));
    
    m_saveConfiguration = new wxButton(m_mainBookSetup, wxID_ANY, _("Save Configuration"), wxDefaultPosition, wxDLG_UNIT(m_mainBookSetup, wxSize(-1,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_saveConfiguration->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxLEFT);
    m_saveConfiguration->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4541->Add(m_saveConfiguration, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    m_saveConfiguration->SetMinSize(wxSize(-1,26));
    
    m_mainBookReference = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookReference, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer1885 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer1885->SetFlexibleDirection( wxBOTH );
    flexGridSizer1885->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1885->AddGrowableCol(0);
    flexGridSizer1885->AddGrowableRow(0);
    m_mainBookReference->SetSizer(flexGridSizer1885);
    
    wxFlexGridSizer* flexGridSizer1393 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer1393->SetFlexibleDirection( wxBOTH );
    flexGridSizer1393->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1393->AddGrowableCol(0);
    flexGridSizer1393->AddGrowableCol(1);
    flexGridSizer1393->AddGrowableRow(0);
    
    flexGridSizer1885->Add(flexGridSizer1393, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer777 = new wxFlexGridSizer(9, 1, 0, 0);
    flexGridSizer777->SetFlexibleDirection( wxBOTH );
    flexGridSizer777->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer777->AddGrowableCol(0);
    flexGridSizer777->AddGrowableRow(2);
    
    flexGridSizer1393->Add(flexGridSizer777, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText779 = new wxStaticText(m_mainBookReference, wxID_ANY, _("Manually motion control"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    wxFont m_staticText779Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText779->SetFont(m_staticText779Font);
    
    flexGridSizer777->Add(m_staticText779, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine783 = new wxStaticLine(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer777->Add(m_staticLine783, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer547 = new wxFlexGridSizer(18, 3, 1, 0);
    flexGridSizer547->SetFlexibleDirection( wxBOTH );
    flexGridSizer547->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer547->AddGrowableCol(1);
    flexGridSizer547->AddGrowableRow(1);
    flexGridSizer547->AddGrowableRow(4);
    
    flexGridSizer777->Add(flexGridSizer547, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText821 = new wxStaticText(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText821, 0, wxALL, WXC_FROM_DIP(5));
    
    m_spinButtonX = new wxSpinButton(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxSP_HORIZONTAL);
    m_spinButtonX->SetRange(0, 100);
    m_spinButtonX->SetValue(0);
    
    flexGridSizer547->Add(m_spinButtonX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText63169 = new wxStaticText(m_mainBookReference, wxID_ANY, _("+x"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText63169, 0, wxALL, WXC_FROM_DIP(5));
    
    m_spinButtonY = new wxSpinButton(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxSP_VERTICAL);
    m_spinButtonY->SetRange(0, 100);
    m_spinButtonY->SetValue(0);
    
    flexGridSizer547->Add(m_spinButtonY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_moveXYAxisCtl = new wxTextCtrl(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxTE_MULTILINE|wxHSCROLL);
    m_moveXYAxisCtl->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_moveXYAxisCtlFont(8, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Courier New"));
    m_moveXYAxisCtl->SetFont(m_moveXYAxisCtlFont);
    
    flexGridSizer547->Add(m_moveXYAxisCtl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText823 = new wxStaticText(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText823, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText6316 = new wxStaticText(m_mainBookReference, wxID_ANY, _("+y"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText6316, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText825 = new wxStaticText(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText825, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText827 = new wxStaticText(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText827, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText631 = new wxStaticText(m_mainBookReference, wxID_ANY, _("+z"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText631, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText832 = new wxStaticText(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText832, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText834 = new wxStaticText(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer547->Add(m_staticText834, 0, wxALL, WXC_FROM_DIP(2));
    
    m_spinButtonZ = new wxSpinButton(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxSP_VERTICAL);
    m_spinButtonZ->SetRange(0, 100);
    m_spinButtonZ->SetValue(0);
    
    flexGridSizer547->Add(m_spinButtonZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_moveZAxisCtl = new wxTextCtrl(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxTE_MULTILINE|wxHSCROLL);
    m_moveZAxisCtl->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_moveZAxisCtlFont(8, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Courier New"));
    m_moveZAxisCtl->SetFont(m_moveZAxisCtlFont);
    
    flexGridSizer547->Add(m_moveZAxisCtl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText830 = new wxStaticText(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,1)), 0);
    
    flexGridSizer547->Add(m_staticText830, 0, wxALL, WXC_FROM_DIP(0));
    m_staticText830->SetMinSize(wxSize(-1,1));
    
    m_staticText836 = new wxStaticText(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,1)), 0);
    
    flexGridSizer547->Add(m_staticText836, 0, wxALL, WXC_FROM_DIP(0));
    m_staticText836->SetMinSize(wxSize(-1,1));
    
    wxFlexGridSizer* flexGridSizer1390 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer1390->SetFlexibleDirection( wxBOTH );
    flexGridSizer1390->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer777->Add(flexGridSizer1390, 0, wxALL|wxALIGN_RIGHT|wxALIGN_BOTTOM, WXC_FROM_DIP(0));
    
    m_includingWpt = new wxCheckBox(m_mainBookReference, wxID_ANY, _("Incl. Workpiece thickness?"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    m_includingWpt->SetValue(false);
    
    flexGridSizer1390->Add(m_includingWpt, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(9));
    
    m_setZero = new wxButton(m_mainBookReference, wxID_ANY, _("Set curent Position to Zero"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    m_setZero->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_setZero->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer1390->Add(m_setZero, 0, wxALL|wxALIGN_BOTTOM, WXC_FROM_DIP(5));
    
    flexGridSizer1390->Add(10, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer1163 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1163->SetFlexibleDirection( wxBOTH );
    flexGridSizer1163->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1163->AddGrowableCol(0);
    
    flexGridSizer1393->Add(flexGridSizer1163, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer1152 = new wxFlexGridSizer(9, 1, 0, 0);
    flexGridSizer1152->SetFlexibleDirection( wxBOTH );
    flexGridSizer1152->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1152->AddGrowableCol(0);
    
    flexGridSizer1163->Add(flexGridSizer1152, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_staticText1156 = new wxStaticText(m_mainBookReference, wxID_ANY, _(" Predefined Positions:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    wxFont m_staticText1156Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText1156->SetFont(m_staticText1156Font);
    
    flexGridSizer1152->Add(m_staticText1156, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine1158 = new wxStaticLine(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1152->Add(m_staticLine1158, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer1165 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1165->SetFlexibleDirection( wxBOTH );
    flexGridSizer1165->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1165->AddGrowableCol(0);
    
    flexGridSizer1152->Add(flexGridSizer1165, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText1171 = new wxStaticText(m_mainBookReference, wxID_ANY, _("Home:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    m_staticText1171->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText1171Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1171Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1171->SetFont(m_staticText1171Font);
    
    flexGridSizer1165->Add(m_staticText1171, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticText1173 = new wxStaticText(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer1165->Add(m_staticText1173, 0, wxALL, WXC_FROM_DIP(1));
    
    wxArrayString m_homeDefintionArr;
    m_homeDefintionArr.Add(wxT("a) X(min), Y(min), Z(Top)"));
    m_homeDefintionArr.Add(wxT("b) X(max), Y(max), Z(Top)"));
    m_homeDefintionArr.Add(wxT("c) X(mid), Y(mid), Z(Top)"));
    m_homeDefintionArr.Add(wxT("d) X(mid), Y(mid), Z(mid)"));
    m_homeDefintion = new wxComboBox(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), m_homeDefintionArr, wxCB_READONLY);
    m_homeDefintion->SetSelection(0);
    
    flexGridSizer1165->Add(m_homeDefintion, 0, wxALL, WXC_FROM_DIP(2));
    
    m_moveHome = new wxButton(m_mainBookReference, wxID_ANY, _("Move to Home"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(110,-1)), 0);
    m_moveHome->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveHome, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_moveHome->SetMinSize(wxSize(110,-1));
    
    m_staticLine2177 = new wxStaticLine(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2177, 0, wxALL|wxEXPAND, WXC_FROM_DIP(4));
    
    m_staticLine2179 = new wxStaticLine(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2179, 0, wxALL|wxEXPAND, WXC_FROM_DIP(4));
    
    wxFlexGridSizer* flexGridSizer2180 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2180->SetFlexibleDirection( wxBOTH );
    flexGridSizer2180->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2180->AddGrowableCol(0);
    flexGridSizer2180->AddGrowableRow(0);
    
    flexGridSizer1165->Add(flexGridSizer2180, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText2182 = new wxStaticText(m_mainBookReference, wxID_ANY, _("Move Mode:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(114,-1)), 0);
    
    flexGridSizer2180->Add(m_staticText2182, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(5));
    m_staticText2182->SetMinSize(wxSize(114,-1));
    
    wxArrayString m_zeroMoveModeXYArr;
    m_zeroMoveModeXYArr.Add(wxT("1D"));
    m_zeroMoveModeXYArr.Add(wxT("2D"));
    m_zeroMoveModeXY = new wxComboBox(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), m_zeroMoveModeXYArr, wxCB_READONLY);
    m_zeroMoveModeXY->SetToolTip(_("1D: Each axis moves separatly\n2D: X and Y moves simultaneously"));
    m_zeroMoveModeXY->SetSelection(0);
    
    flexGridSizer2180->Add(m_zeroMoveModeXY, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_moveXYtoZero = new wxButton(m_mainBookReference, wxID_ANY, _("Move XY to Zero"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(110,-1)), 0);
    m_moveXYtoZero->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveXYtoZero, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_moveXYtoZero->SetMinSize(wxSize(110,-1));
    
    wxFlexGridSizer* flexGridSizer218027 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer218027->SetFlexibleDirection( wxBOTH );
    flexGridSizer218027->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer218027->AddGrowableCol(0);
    flexGridSizer218027->AddGrowableRow(0);
    
    flexGridSizer1165->Add(flexGridSizer218027, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText218228 = new wxStaticText(m_mainBookReference, wxID_ANY, _("Move Mode:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(114,-1)), 0);
    
    flexGridSizer218027->Add(m_staticText218228, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(5));
    m_staticText218228->SetMinSize(wxSize(114,-1));
    
    wxArrayString m_zeroMoveModeXYZArr;
    m_zeroMoveModeXYZArr.Add(wxT("1D"));
    m_zeroMoveModeXYZArr.Add(wxT("2D"));
    m_zeroMoveModeXYZArr.Add(wxT("3D"));
    m_zeroMoveModeXYZ = new wxComboBox(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), m_zeroMoveModeXYZArr, wxCB_READONLY);
    m_zeroMoveModeXYZ->SetToolTip(_("1D: Each axis moves separatly\n2D: Z moves separatly as well as X and Y moves simultaneously\n3D: X, Y and Z moves simultaneously"));
    m_zeroMoveModeXYZ->SetSelection(0);
    
    flexGridSizer218027->Add(m_zeroMoveModeXYZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_moveXYZtoZero = new wxButton(m_mainBookReference, wxID_ANY, _("Move XYZ to Zero"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(110,-1)), 0);
    m_moveXYZtoZero->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveXYZtoZero, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_moveXYZtoZero->SetMinSize(wxSize(110,-1));
    
    wxFlexGridSizer* flexGridSizer21802730 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer21802730->SetFlexibleDirection( wxBOTH );
    flexGridSizer21802730->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21802730->AddGrowableCol(0);
    flexGridSizer21802730->AddGrowableRow(0);
    
    flexGridSizer1165->Add(flexGridSizer21802730, 0, wxALL, WXC_FROM_DIP(0));
    
    m_staticText21822831 = new wxStaticText(m_mainBookReference, wxID_ANY, _("Move Mode:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(114,-1)), 0);
    
    flexGridSizer21802730->Add(m_staticText21822831, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(5));
    m_staticText21822831->SetMinSize(wxSize(114,-1));
    
    wxArrayString m_zeroMoveModeZArr;
    m_zeroMoveModeZArr.Add(wxT("1D"));
    m_zeroMoveModeZ = new wxComboBox(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), m_zeroMoveModeZArr, wxCB_READONLY);
    m_zeroMoveModeZ->SetToolTip(_("1D: Each axis moves separatly"));
    m_zeroMoveModeZ->SetSelection(0);
    
    flexGridSizer21802730->Add(m_zeroMoveModeZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_moveZtoZero = new wxButton(m_mainBookReference, wxID_ANY, _("Move Z to Zero"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(110,-1)), 0);
    m_moveZtoZero->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    
    flexGridSizer1165->Add(m_moveZtoZero, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    m_moveZtoZero->SetMinSize(wxSize(110,-1));
    
    m_staticLine2191 = new wxStaticLine(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2191, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticLine2193 = new wxStaticLine(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2193, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticText1177233 = new wxStaticText(m_mainBookReference, wxID_ANY, _("XY Axis:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    m_staticText1177233->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText1177233Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1177233Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1177233->SetFont(m_staticText1177233Font);
    
    flexGridSizer1165->Add(m_staticText1177233, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText11772 = new wxStaticText(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer1165->Add(m_staticText11772, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer2439 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2439->SetFlexibleDirection( wxBOTH );
    flexGridSizer2439->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2439, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_xToMax = new wxButton(m_mainBookReference, wxID_ANY, _("Move X Axis to Max"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), 0);
    m_xToMax->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_xToMax->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_xToMax->SetToolTip(_("Moves the X axis to the physical MAX position"));
    
    flexGridSizer2439->Add(m_xToMax, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_xToMax->SetMinSize(wxSize(140,-1));
    
    m_xToMid = new wxButton(m_mainBookReference, wxID_ANY, _("Move X Axis to Mid"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), 0);
    m_xToMid->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_xToMid->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_xToMid->SetToolTip(_("Moves the X axis to the physical MID position"));
    
    flexGridSizer2439->Add(m_xToMid, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_xToMid->SetMinSize(wxSize(140,-1));
    
    m_xToMin = new wxButton(m_mainBookReference, wxID_ANY, _("Move X Axis to Min"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), 0);
    m_xToMin->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_xToMin->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_xToMin->SetToolTip(_("Moves the X axis to the physical MIN position"));
    
    flexGridSizer2439->Add(m_xToMin, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_xToMin->SetMinSize(wxSize(140,-1));
    
    wxFlexGridSizer* flexGridSizer2440 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2440->SetFlexibleDirection( wxBOTH );
    flexGridSizer2440->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2440, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_yToMax = new wxButton(m_mainBookReference, wxID_ANY, _("Move Y Axis to Max"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), 0);
    m_yToMax->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_yToMax->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_yToMax->SetToolTip(_("Moves the Y axis to the physical MAX position"));
    
    flexGridSizer2440->Add(m_yToMax, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_yToMax->SetMinSize(wxSize(140,-1));
    
    m_yToMid = new wxButton(m_mainBookReference, wxID_ANY, _("Move Y Axis to Mid"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), 0);
    m_yToMid->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_yToMid->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_yToMid->SetToolTip(_("Moves the Y axis to the physical MID position"));
    
    flexGridSizer2440->Add(m_yToMid, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_yToMid->SetMinSize(wxSize(140,-1));
    
    m_yToMin = new wxButton(m_mainBookReference, wxID_ANY, _("Move Y Axis to Min"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), 0);
    m_yToMin->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_yToMin->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_yToMin->SetToolTip(_("Moves the Y axis to the physical MIN position"));
    
    flexGridSizer2440->Add(m_yToMin, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_yToMin->SetMinSize(wxSize(140,-1));
    
    m_staticLine2195 = new wxStaticLine(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2195, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticLine2197 = new wxStaticLine(m_mainBookReference, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1165->Add(m_staticLine2197, 0, wxALL|wxEXPAND, WXC_FROM_DIP(6));
    
    m_staticText1175 = new wxStaticText(m_mainBookReference, wxID_ANY, _("Z Axis:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    m_staticText1175->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText1175Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText1175Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText1175->SetFont(m_staticText1175Font);
    
    flexGridSizer1165->Add(m_staticText1175, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticText1177 = new wxStaticText(m_mainBookReference, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(-1,-1)), 0);
    
    flexGridSizer1165->Add(m_staticText1177, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer2434 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2434->SetFlexibleDirection( wxBOTH );
    flexGridSizer2434->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2434, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_zToMax = new wxButton(m_mainBookReference, wxID_ANY, _("Move Z Axis to Max"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), 0);
    m_zToMax->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_zToMax->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToMax->SetToolTip(_("Moves the Z axis to the physical MAX position"));
    
    flexGridSizer2434->Add(m_zToMax, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_zToMax->SetMinSize(wxSize(140,-1));
    
    m_zToMid = new wxButton(m_mainBookReference, wxID_ANY, _("Move Z Axis to Mid"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), 0);
    m_zToMid->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_zToMid->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToMid->SetToolTip(_("Moves the Z axis to the physical MID position"));
    
    flexGridSizer2434->Add(m_zToMid, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_zToMid->SetMinSize(wxSize(140,-1));
    
    m_zToMin = new wxButton(m_mainBookReference, wxID_ANY, _("Move Z Axis to Min"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), 0);
    m_zToMin->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_zToMin->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToMin->SetToolTip(_("Moves the Z axis to the physical MIN position"));
    
    flexGridSizer2434->Add(m_zToMin, 0, wxALL|wxALIGN_LEFT, WXC_FROM_DIP(3));
    m_zToMin->SetMinSize(wxSize(140,-1));
    
    wxFlexGridSizer* flexGridSizer2435 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer2435->SetFlexibleDirection( wxBOTH );
    flexGridSizer2435->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1165->Add(flexGridSizer2435, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_zToTop = new wxButton(m_mainBookReference, wxID_ANY, _("Move Z Axis to Top"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), 0);
    m_zToTop->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_zToTop->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToTop->SetToolTip(_("Moves the Z axis to the logical MAX position.\nDepending on the current setup."));
    
    flexGridSizer2435->Add(m_zToTop, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_zToTop->SetMinSize(wxSize(140,-1));
    
    m_staticText2438 = new wxStaticText(m_mainBookReference, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), wxALIGN_CENTRE);
    
    flexGridSizer2435->Add(m_staticText2438, 0, wxALL, WXC_FROM_DIP(8));
    m_staticText2438->SetMinSize(wxSize(140,-1));
    
    m_zToBottom = new wxButton(m_mainBookReference, wxID_ANY, _("Move Z Axis to Bottom"), wxDefaultPosition, wxDLG_UNIT(m_mainBookReference, wxSize(140,-1)), 0);
    m_zToBottom->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    m_zToBottom->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_zToBottom->SetToolTip(_("Moves the Z axis to the logical MIN position.\nDepending on the current setup."));
    
    flexGridSizer2435->Add(m_zToBottom, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    m_zToBottom->SetMinSize(wxSize(140,-1));
    
    m_mainBookManual = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookManual, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer862 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer862->SetFlexibleDirection( wxBOTH );
    flexGridSizer862->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer862->AddGrowableCol(0);
    flexGridSizer862->AddGrowableCol(1);
    flexGridSizer862->AddGrowableRow(0);
    m_mainBookManual->SetSizer(flexGridSizer862);
    
    wxFlexGridSizer* flexGridSizer418 = new wxFlexGridSizer(10, 1, 0, 0);
    flexGridSizer418->SetFlexibleDirection( wxBOTH );
    flexGridSizer418->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer418->AddGrowableCol(0);
    
    flexGridSizer862->Add(flexGridSizer418, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer1169 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1169->SetFlexibleDirection( wxBOTH );
    flexGridSizer1169->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1169->AddGrowableCol(0);
    
    flexGridSizer418->Add(flexGridSizer1169, 1, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer2081 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer2081->SetFlexibleDirection( wxBOTH );
    flexGridSizer2081->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1169->Add(flexGridSizer2081, 0, wxALL, WXC_FROM_DIP(2));
    
    m_checkManuallyXY = new wxCheckBox(m_mainBookManual, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    m_checkManuallyXY->SetValue(true);
    
    flexGridSizer2081->Add(m_checkManuallyXY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText1160 = new wxStaticText(m_mainBookManual, wxID_ANY, _("Manually moving Coordinates:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    wxFont m_staticText1160Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText1160->SetFont(m_staticText1160Font);
    
    flexGridSizer2081->Add(m_staticText1160, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticLine1162 = new wxStaticLine(m_mainBookManual, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1169->Add(m_staticLine1162, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer1522 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1522->SetFlexibleDirection( wxBOTH );
    flexGridSizer1522->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1522->AddGrowableCol(1);
    
    flexGridSizer1169->Add(flexGridSizer1522, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxArrayString m_mmRadioCoordinatesArr;
    m_mmRadioCoordinatesArr.Add(_("Absolute"));
    m_mmRadioCoordinatesArr.Add(_("Relative"));
    m_mmRadioCoordinates = new wxRadioBox(m_mainBookManual, wxID_ANY, _("Coordinates"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), m_mmRadioCoordinatesArr, 1, wxRA_SPECIFY_ROWS);
    m_mmRadioCoordinates->SetSelection(1);
    
    flexGridSizer1522->Add(m_mmRadioCoordinates, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer1523 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer1523->SetFlexibleDirection( wxBOTH );
    flexGridSizer1523->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1522->Add(flexGridSizer1523, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    flexGridSizer1523->Add(42, 0, 1, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer1590 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1590->SetFlexibleDirection( wxBOTH );
    flexGridSizer1590->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1590->AddGrowableCol(0);
    flexGridSizer1590->AddGrowableRow(0);
    flexGridSizer1590->AddGrowableRow(1);
    
    flexGridSizer1169->Add(flexGridSizer1590, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer7893 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer7893->SetFlexibleDirection( wxBOTH );
    flexGridSizer7893->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7893->AddGrowableCol(2);
    flexGridSizer7893->AddGrowableRow(1);
    
    flexGridSizer1590->Add(flexGridSizer7893, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText793 = new wxStaticText(m_mainBookManual, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer7893->Add(m_staticText793, 0, wxALL, WXC_FROM_DIP(5));
    
    m_minManuallyXSlider = new wxButton(m_mainBookManual, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_minManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_minManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_minManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minManuallyXSlider->SetFont(m_minManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_minManuallyXSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_minManuallyXSlider->SetMinSize(wxSize(30,26));
    
    m_metricX = new wxTextCtrl(m_mainBookManual, wxID_ANY, wxT("0,000"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxTE_RIGHT);
    m_metricX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    #if wxVERSION_NUMBER >= 3000
    m_metricX->SetHint(wxT(""));
    #endif
    
    flexGridSizer7893->Add(m_metricX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_maxManuallyXSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_maxManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_maxManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_maxManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxManuallyXSlider->SetFont(m_maxManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_maxManuallyXSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_maxManuallyXSlider->SetMinSize(wxSize(30,26));
    
    m_zeroManuallyXSlider = new wxButton(m_mainBookManual, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(26,26)), 0);
    m_zeroManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_zeroManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_zeroManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zeroManuallyXSlider->SetFont(m_zeroManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_zeroManuallyXSlider, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    m_zeroManuallyXSlider->SetMinSize(wxSize(26,26));
    
    m_signManuallyXSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+/-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_signManuallyXSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_signManuallyXSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_signManuallyXSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_signManuallyXSlider->SetFont(m_signManuallyXSliderFont);
    
    flexGridSizer7893->Add(m_signManuallyXSlider, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(0));
    m_signManuallyXSlider->SetMinSize(wxSize(30,26));
    
    m_mmUnitX = new wxStaticText(m_mainBookManual, wxID_ANY, _("<unit>"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer7893->Add(m_mmUnitX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_xManuallySlider = new wxSlider(m_mainBookManual, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxSL_SELRANGE|wxSL_LABELS|wxSL_HORIZONTAL);
    
    flexGridSizer1590->Add(m_xManuallySlider, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer1591 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1591->SetFlexibleDirection( wxBOTH );
    flexGridSizer1591->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1591->AddGrowableCol(0);
    flexGridSizer1591->AddGrowableRow(0);
    flexGridSizer1591->AddGrowableRow(1);
    
    flexGridSizer1169->Add(flexGridSizer1591, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer7894 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer7894->SetFlexibleDirection( wxBOTH );
    flexGridSizer7894->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7894->AddGrowableCol(2);
    flexGridSizer7894->AddGrowableRow(1);
    
    flexGridSizer1591->Add(flexGridSizer7894, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText797 = new wxStaticText(m_mainBookManual, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer7894->Add(m_staticText797, 0, wxALL, WXC_FROM_DIP(5));
    
    m_minManuallyYSlider = new wxButton(m_mainBookManual, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_minManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_minManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_minManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minManuallyYSlider->SetFont(m_minManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_minManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_minManuallyYSlider->SetMinSize(wxSize(30,26));
    
    m_metricY = new wxTextCtrl(m_mainBookManual, wxID_ANY, wxT("0,000"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(120,-1)), wxTE_RIGHT);
    m_metricY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    #if wxVERSION_NUMBER >= 3000
    m_metricY->SetHint(wxT(""));
    #endif
    
    flexGridSizer7894->Add(m_metricY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_maxManuallyYSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_maxManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_maxManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_maxManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxManuallyYSlider->SetFont(m_maxManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_maxManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_maxManuallyYSlider->SetMinSize(wxSize(30,26));
    
    m_zeroManuallyYSlider = new wxButton(m_mainBookManual, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(26,26)), 0);
    m_zeroManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_zeroManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_zeroManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zeroManuallyYSlider->SetFont(m_zeroManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_zeroManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_zeroManuallyYSlider->SetMinSize(wxSize(26,26));
    
    m_signManuallyYSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+/-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_signManuallyYSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_signManuallyYSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_signManuallyYSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_signManuallyYSlider->SetFont(m_signManuallyYSliderFont);
    
    flexGridSizer7894->Add(m_signManuallyYSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_signManuallyYSlider->SetMinSize(wxSize(30,26));
    
    m_mmUnitY = new wxStaticText(m_mainBookManual, wxID_ANY, _("<unit>"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer7894->Add(m_mmUnitY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_yManuallySlider = new wxSlider(m_mainBookManual, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxSL_SELRANGE|wxSL_LABELS|wxSL_HORIZONTAL);
    
    flexGridSizer1591->Add(m_yManuallySlider, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText2073 = new wxStaticText(m_mainBookManual, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,50)), 0);
    
    flexGridSizer1591->Add(m_staticText2073, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2073->SetMinSize(wxSize(-1,50));
    
    m_staticLine2047 = new wxStaticLine(m_mainBookManual, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1169->Add(m_staticLine2047, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer2078 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer2078->SetFlexibleDirection( wxBOTH );
    flexGridSizer2078->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1169->Add(flexGridSizer2078, 0, wxALL, WXC_FROM_DIP(5));
    
    m_checkManuallyZ = new wxCheckBox(m_mainBookManual, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    m_checkManuallyZ->SetValue(false);
    
    flexGridSizer2078->Add(m_checkManuallyZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText2075 = new wxStaticText(m_mainBookManual, wxID_ANY, _("Manually Z Axis Moving:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    wxFont m_staticText2075Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText2075->SetFont(m_staticText2075Font);
    
    flexGridSizer2078->Add(m_staticText2075, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer15911 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer15911->SetFlexibleDirection( wxBOTH );
    flexGridSizer15911->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer15911->AddGrowableCol(0);
    flexGridSizer15911->AddGrowableRow(0);
    flexGridSizer15911->AddGrowableRow(1);
    
    flexGridSizer1169->Add(flexGridSizer15911, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer78942 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer78942->SetFlexibleDirection( wxBOTH );
    flexGridSizer78942->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer78942->AddGrowableCol(2);
    flexGridSizer78942->AddGrowableRow(1);
    
    flexGridSizer15911->Add(flexGridSizer78942, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText7973 = new wxStaticText(m_mainBookManual, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer78942->Add(m_staticText7973, 0, wxALL, WXC_FROM_DIP(5));
    
    m_minManuallyZSlider = new wxButton(m_mainBookManual, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_minManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_minManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_minManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_minManuallyZSlider->SetFont(m_minManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_minManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_minManuallyZSlider->SetMinSize(wxSize(30,26));
    
    m_metricZ = new wxTextCtrl(m_mainBookManual, wxID_ANY, wxT("0,000"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(120,-1)), wxTE_RIGHT);
    m_metricZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    #if wxVERSION_NUMBER >= 3000
    m_metricZ->SetHint(wxT(""));
    #endif
    
    flexGridSizer78942->Add(m_metricZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_maxManuallyZSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_maxManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_maxManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_maxManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_maxManuallyZSlider->SetFont(m_maxManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_maxManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_maxManuallyZSlider->SetMinSize(wxSize(30,26));
    
    m_zeroManuallyZSlider = new wxButton(m_mainBookManual, wxID_ANY, _("0"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(26,26)), 0);
    m_zeroManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_zeroManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    wxFont m_zeroManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_zeroManuallyZSlider->SetFont(m_zeroManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_zeroManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_zeroManuallyZSlider->SetMinSize(wxSize(26,26));
    
    m_signManuallyZSlider = new wxButton(m_mainBookManual, wxID_ANY, _("+/-"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(30,26)), 0);
    m_signManuallyZSlider->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    m_signManuallyZSlider->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_signManuallyZSliderFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_signManuallyZSlider->SetFont(m_signManuallyZSliderFont);
    
    flexGridSizer78942->Add(m_signManuallyZSlider, 0, wxALL, WXC_FROM_DIP(0));
    m_signManuallyZSlider->SetMinSize(wxSize(30,26));
    
    m_mmUnitZ = new wxStaticText(m_mainBookManual, wxID_ANY, _("<unit>"), wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), 0);
    
    flexGridSizer78942->Add(m_mmUnitZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_zManuallySlider = new wxSlider(m_mainBookManual, wxID_ANY, 50, 0, 100, wxDefaultPosition, wxDLG_UNIT(m_mainBookManual, wxSize(-1,-1)), wxSL_SELRANGE|wxSL_LABELS|wxSL_HORIZONTAL);
    
    flexGridSizer15911->Add(m_zManuallySlider, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_mainBookTest = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookTest, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer2205 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2205->SetFlexibleDirection( wxBOTH );
    flexGridSizer2205->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2205->AddGrowableCol(0);
    flexGridSizer2205->AddGrowableRow(0);
    m_mainBookTest->SetSizer(flexGridSizer2205);
    
    m_treebookTest = new wxTreebook(m_mainBookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookTest, wxSize(-1,-1)), wxBK_LEFT);
    m_treebookTest->SetName(wxT("m_treebookTest"));
    wxImageList* m_treebookTest_il = new wxImageList(16, 16);
    m_treebookTest->AssignImageList(m_treebookTest_il);
    
    flexGridSizer2205->Add(m_treebookTest, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testIntervalPage = new wxPanel(m_treebookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookTest, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testIntervalPageImgIndex;
    m_testIntervalPageImgIndex = m_treebookTest_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_treebookTest->AddPage(m_testIntervalPage, _("Interval"), false, m_testIntervalPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer2089 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2089->SetFlexibleDirection( wxBOTH );
    flexGridSizer2089->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2089->AddGrowableCol(0);
    m_testIntervalPage->SetSizer(flexGridSizer2089);
    
    wxFlexGridSizer* flexGridSizer2157 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2157->SetFlexibleDirection( wxBOTH );
    flexGridSizer2157->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2157->AddGrowableCol(0);
    
    flexGridSizer2089->Add(flexGridSizer2157, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText2117 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Test::Interval Move:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    wxFont m_staticText2117Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText2117->SetFont(m_staticText2117Font);
    
    flexGridSizer2157->Add(m_staticText2117, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine2253 = new wxStaticLine(m_testIntervalPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2157->Add(m_staticLine2253, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxArrayString m_testIntervalModeArr;
    m_testIntervalModeArr.Add(wxT("A: loop(+/-x), loop(+/-y),loop(+/-z)"));
    m_testIntervalModeArr.Add(wxT("B: loop(+x,+y,+z) loop(-x,-y,-z)"));
    m_testIntervalModeArr.Add(wxT("C: loop(+/-x,y,z)"));
    m_testIntervalMode = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testIntervalModeArr, wxCB_READONLY);
    m_testIntervalMode->SetSelection(0);
    
    flexGridSizer2157->Add(m_testIntervalMode, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer2103 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer2103->SetFlexibleDirection( wxBOTH );
    flexGridSizer2103->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer2103, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText2105 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Axis"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2105, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2105->SetMinSize(wxSize(20,-1));
    
    m_staticText2107 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Count"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(65,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2107, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2107->SetMinSize(wxSize(65,-1));
    
    m_staticText2109 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Distance (+/-)"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(93,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2109, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2109->SetMinSize(wxSize(93,-1));
    
    m_staticText2149 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("First Direction"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(82,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2149, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2149->SetMinSize(wxSize(82,-1));
    
    m_staticText2115 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Mode"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(54,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2115, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2115->SetMinSize(wxSize(54,-1));
    
    m_staticText2165 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Counter"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer2103->Add(m_staticText2165, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine2111 = new wxStaticLine(m_testIntervalPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2089->Add(m_staticLine2111, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer2091 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer2091->SetFlexibleDirection( wxBOTH );
    flexGridSizer2091->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer2091, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testAxisX = new wxStaticText(m_testIntervalPage, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testAxisX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testAxisXFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testAxisXFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testAxisX->SetFont(m_testAxisXFont);
    
    flexGridSizer2091->Add(m_testAxisX, 0, wxALL, WXC_FROM_DIP(5));
    m_testAxisX->SetMinSize(wxSize(20,-1));
    
    m_testCountX = new wxSpinCtrl(m_testIntervalPage, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxSP_ARROW_KEYS);
    m_testCountX->SetRange(0, 100);
    m_testCountX->SetValue(1);
    
    flexGridSizer2091->Add(m_testCountX, 0, wxALL, WXC_FROM_DIP(2));
    m_testCountX->SetMinSize(wxSize(70,-1));
    
    m_testDistanceX = new wxTextCtrl(m_testIntervalPage, wxID_ANY, wxT("10.000"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_testDistanceX->SetHint(wxT(""));
    #endif
    
    flexGridSizer2091->Add(m_testDistanceX, 0, wxALL, WXC_FROM_DIP(2));
    m_testDistanceX->SetMinSize(wxSize(70,-1));
    
    m_staticText2101 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer2091->Add(m_staticText2101, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_testFirstXArr;
    m_testFirstXArr.Add(wxT("First +"));
    m_testFirstXArr.Add(wxT("First -"));
    m_testFirstX = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testFirstXArr, wxCB_READONLY);
    m_testFirstX->SetSelection(0);
    
    flexGridSizer2091->Add(m_testFirstX, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText2151 = new wxStaticText(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(12,-1)), 0);
    
    flexGridSizer2091->Add(m_staticText2151, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testModeX = new wxCheckBox(m_testIntervalPage, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    m_testModeX->SetValue(true);
    
    flexGridSizer2091->Add(m_testModeX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDurationCounterX = new wxStaticText(m_testIntervalPage, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(40,-1)), wxALIGN_RIGHT);
    
    flexGridSizer2091->Add(m_testDurationCounterX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDurationCounterX->SetMinSize(wxSize(40,-1));
    
    wxFlexGridSizer* flexGridSizer209111 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer209111->SetFlexibleDirection( wxBOTH );
    flexGridSizer209111->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer209111, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testAxisY = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testAxisY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testAxisYFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testAxisYFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testAxisY->SetFont(m_testAxisYFont);
    
    flexGridSizer209111->Add(m_testAxisY, 0, wxALL, WXC_FROM_DIP(5));
    m_testAxisY->SetMinSize(wxSize(20,-1));
    
    m_testCountY = new wxSpinCtrl(m_testIntervalPage, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxSP_ARROW_KEYS);
    m_testCountY->SetRange(0, 100);
    m_testCountY->SetValue(1);
    
    flexGridSizer209111->Add(m_testCountY, 0, wxALL, WXC_FROM_DIP(2));
    m_testCountY->SetMinSize(wxSize(70,-1));
    
    m_testDistanceY = new wxTextCtrl(m_testIntervalPage, wxID_ANY, wxT("10.000"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_testDistanceY->SetHint(wxT(""));
    #endif
    
    flexGridSizer209111->Add(m_testDistanceY, 0, wxALL, WXC_FROM_DIP(2));
    m_testDistanceY->SetMinSize(wxSize(70,-1));
    
    m_staticText210115 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer209111->Add(m_staticText210115, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_testFirstYArr;
    m_testFirstYArr.Add(wxT("First +"));
    m_testFirstYArr.Add(wxT("First -"));
    m_testFirstY = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testFirstYArr, wxCB_READONLY);
    m_testFirstY->SetSelection(0);
    
    flexGridSizer209111->Add(m_testFirstY, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText215123 = new wxStaticText(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(12,-1)), 0);
    
    flexGridSizer209111->Add(m_staticText215123, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testModeY = new wxCheckBox(m_testIntervalPage, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    m_testModeY->SetValue(true);
    
    flexGridSizer209111->Add(m_testModeY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDurationCounterY = new wxStaticText(m_testIntervalPage, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(40,-1)), wxALIGN_RIGHT);
    
    flexGridSizer209111->Add(m_testDurationCounterY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDurationCounterY->SetMinSize(wxSize(40,-1));
    
    wxFlexGridSizer* flexGridSizer20911117 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer20911117->SetFlexibleDirection( wxBOTH );
    flexGridSizer20911117->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2089->Add(flexGridSizer20911117, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testAxisZ = new wxStaticText(m_testIntervalPage, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testAxisZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testAxisZFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testAxisZFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testAxisZ->SetFont(m_testAxisZFont);
    
    flexGridSizer20911117->Add(m_testAxisZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testAxisZ->SetMinSize(wxSize(20,-1));
    
    m_testCountZ = new wxSpinCtrl(m_testIntervalPage, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxSP_ARROW_KEYS);
    m_testCountZ->SetRange(0, 100);
    m_testCountZ->SetValue(1);
    
    flexGridSizer20911117->Add(m_testCountZ, 0, wxALL, WXC_FROM_DIP(2));
    m_testCountZ->SetMinSize(wxSize(70,-1));
    
    m_testDistanceZ = new wxTextCtrl(m_testIntervalPage, wxID_ANY, wxT("10.000"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(70,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_testDistanceZ->SetHint(wxT(""));
    #endif
    
    flexGridSizer20911117->Add(m_testDistanceZ, 0, wxALL, WXC_FROM_DIP(2));
    m_testDistanceZ->SetMinSize(wxSize(70,-1));
    
    m_staticText21011521 = new wxStaticText(m_testIntervalPage, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    
    flexGridSizer20911117->Add(m_staticText21011521, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_testFirstZArr;
    m_testFirstZArr.Add(wxT("First +"));
    m_testFirstZArr.Add(wxT("First -"));
    m_testFirstZ = new wxComboBox(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), m_testFirstZArr, wxCB_READONLY);
    m_testFirstZ->SetSelection(0);
    
    flexGridSizer20911117->Add(m_testFirstZ, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText215124 = new wxStaticText(m_testIntervalPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(12,-1)), 0);
    
    flexGridSizer20911117->Add(m_staticText215124, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testModeZ = new wxCheckBox(m_testIntervalPage, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(-1,-1)), 0);
    m_testModeZ->SetValue(true);
    
    flexGridSizer20911117->Add(m_testModeZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDurationCounterZ = new wxStaticText(m_testIntervalPage, wxID_ANY, _("-"), wxDefaultPosition, wxDLG_UNIT(m_testIntervalPage, wxSize(40,-1)), wxALIGN_RIGHT);
    
    flexGridSizer20911117->Add(m_testDurationCounterZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDurationCounterZ->SetMinSize(wxSize(40,-1));
    
    m_testDimensions = new wxPanel(m_treebookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookTest, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testDimensionsImgIndex;
    m_testDimensionsImgIndex = m_treebookTest_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_treebookTest->AddPage(m_testDimensions, _("Dimensions"), false, m_testDimensionsImgIndex);
    
    wxFlexGridSizer* flexGridSizer2319 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2319->SetFlexibleDirection( wxBOTH );
    flexGridSizer2319->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2319->AddGrowableCol(0);
    m_testDimensions->SetSizer(flexGridSizer2319);
    
    wxFlexGridSizer* flexGridSizer21573 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer21573->SetFlexibleDirection( wxBOTH );
    flexGridSizer21573->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21573->AddGrowableCol(0);
    
    flexGridSizer2319->Add(flexGridSizer21573, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText21174 = new wxStaticText(m_testDimensions, wxID_ANY, _("Test::Meassure max Dimensions:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    wxFont m_staticText21174Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText21174->SetFont(m_staticText21174Font);
    
    flexGridSizer21573->Add(m_staticText21174, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine22535 = new wxStaticLine(m_testDimensions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer21573->Add(m_staticLine22535, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer2375 = new wxFlexGridSizer(0, 6, 0, 0);
    flexGridSizer2375->SetFlexibleDirection( wxBOTH );
    flexGridSizer2375->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2375->AddGrowableCol(5);
    
    flexGridSizer2319->Add(flexGridSizer2375, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText2377 = new wxStaticText(m_testDimensions, wxID_ANY, _("Axis"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2377, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText2418 = new wxStaticText(m_testDimensions, wxID_ANY, _("Mode"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(54,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2418, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2418->SetMinSize(wxSize(54,-1));
    
    m_staticText2381 = new wxStaticText(m_testDimensions, wxID_ANY, _("Min reached"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2381, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2381->SetMinSize(wxSize(90,-1));
    
    m_staticText2379 = new wxStaticText(m_testDimensions, wxID_ANY, _("Max reached"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2379, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2379->SetMinSize(wxSize(90,-1));
    
    m_staticText2383 = new wxStaticText(m_testDimensions, wxID_ANY, _("Result Value"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(120,-1)), 0);
    
    flexGridSizer2375->Add(m_staticText2383, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText2383->SetMinSize(wxSize(190,-1));
    
    m_staticLine2385 = new wxStaticLine(m_testDimensions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2319->Add(m_staticLine2385, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer2363 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer2363->SetFlexibleDirection( wxBOTH );
    flexGridSizer2363->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2363->AddGrowableCol(7);
    
    flexGridSizer2319->Add(flexGridSizer2363, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimAxisX = new wxStaticText(m_testDimensions, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testDimAxisX->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testDimAxisXFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testDimAxisXFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testDimAxisX->SetFont(m_testDimAxisXFont);
    
    flexGridSizer2363->Add(m_testDimAxisX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimAxisX->SetMinSize(wxSize(20,-1));
    
    m_testDimModeX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimModeX->SetValue(true);
    
    flexGridSizer2363->Add(m_testDimModeX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimMinX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMinX->SetValue(false);
    m_testDimMinX->Enable(false);
    
    flexGridSizer2363->Add(m_testDimMinX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMinX->SetMinSize(wxSize(90,-1));
    
    m_testDimMaxX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMaxX->SetValue(false);
    m_testDimMaxX->Enable(false);
    
    flexGridSizer2363->Add(m_testDimMaxX, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMaxX->SetMinSize(wxSize(90,-1));
    
    m_testDimResultX = new wxTextCtrl(m_testDimensions, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_testDimResultX->SetHint(wxT(""));
    #endif
    
    flexGridSizer2363->Add(m_testDimResultX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText2431 = new wxStaticText(m_testDimensions, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer2363->Add(m_staticText2431, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimResultStateX = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimResultStateX->SetValue(false);
    m_testDimResultStateX->Enable(false);
    
    flexGridSizer2363->Add(m_testDimResultStateX, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimTakeX = new wxButton(m_testDimensions, wxID_ANY, _("Take over X"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeX->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    m_testDimTakeX->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer2363->Add(m_testDimTakeX, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer23631 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer23631->SetFlexibleDirection( wxBOTH );
    flexGridSizer23631->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer23631->AddGrowableCol(7);
    
    flexGridSizer2319->Add(flexGridSizer23631, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimAxisY = new wxStaticText(m_testDimensions, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testDimAxisY->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testDimAxisYFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testDimAxisYFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testDimAxisY->SetFont(m_testDimAxisYFont);
    
    flexGridSizer23631->Add(m_testDimAxisY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimAxisY->SetMinSize(wxSize(20,-1));
    
    m_testDimModeY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimModeY->SetValue(true);
    
    flexGridSizer23631->Add(m_testDimModeY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimMinY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMinY->SetValue(false);
    m_testDimMinY->Enable(false);
    
    flexGridSizer23631->Add(m_testDimMinY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMinY->SetMinSize(wxSize(90,-1));
    
    m_testDimMaxY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMaxY->SetValue(false);
    m_testDimMaxY->Enable(false);
    
    flexGridSizer23631->Add(m_testDimMaxY, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMaxY->SetMinSize(wxSize(90,-1));
    
    m_testDimResultY = new wxTextCtrl(m_testDimensions, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_testDimResultY->SetHint(wxT(""));
    #endif
    
    flexGridSizer23631->Add(m_testDimResultY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_testDimUnitX6 = new wxStaticText(m_testDimensions, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer23631->Add(m_testDimUnitX6, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimResultStateY = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimResultStateY->SetValue(false);
    m_testDimResultStateY->Enable(false);
    
    flexGridSizer23631->Add(m_testDimResultStateY, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimTakeY = new wxButton(m_testDimensions, wxID_ANY, _("Take over Y"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeY->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    m_testDimTakeY->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer23631->Add(m_testDimTakeY, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer23637 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer23637->SetFlexibleDirection( wxBOTH );
    flexGridSizer23637->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer23637->AddGrowableCol(7);
    
    flexGridSizer2319->Add(flexGridSizer23637, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimAxisZ = new wxStaticText(m_testDimensions, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(20,-1)), wxALIGN_CENTRE);
    m_testDimAxisZ->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    wxFont m_testDimAxisZFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_testDimAxisZFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_testDimAxisZ->SetFont(m_testDimAxisZFont);
    
    flexGridSizer23637->Add(m_testDimAxisZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimAxisZ->SetMinSize(wxSize(20,-1));
    
    m_testDimModeZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Active"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimModeZ->SetValue(true);
    
    flexGridSizer23637->Add(m_testDimModeZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimMinZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMinZ->SetValue(false);
    m_testDimMinZ->Enable(false);
    
    flexGridSizer23637->Add(m_testDimMinZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMinZ->SetMinSize(wxSize(90,-1));
    
    m_testDimMaxZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimMaxZ->SetValue(false);
    m_testDimMaxZ->Enable(false);
    
    flexGridSizer23637->Add(m_testDimMaxZ, 0, wxALL, WXC_FROM_DIP(5));
    m_testDimMaxZ->SetMinSize(wxSize(90,-1));
    
    m_testDimResultZ = new wxTextCtrl(m_testDimensions, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_testDimResultZ->SetHint(wxT(""));
    #endif
    
    flexGridSizer23637->Add(m_testDimResultZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_testDimUnitX12 = new wxStaticText(m_testDimensions, wxID_ANY, _("mm"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    
    flexGridSizer23637->Add(m_testDimUnitX12, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimResultStateZ = new wxCheckBox(m_testDimensions, wxID_ANY, _("Ok"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimResultStateZ->SetValue(false);
    m_testDimResultStateZ->Enable(false);
    
    flexGridSizer23637->Add(m_testDimResultStateZ, 0, wxALL, WXC_FROM_DIP(5));
    
    m_testDimTakeZ = new wxButton(m_testDimensions, wxID_ANY, _("Take over Z"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeZ->SetBackgroundColour(wxColour(wxT("rgb(255,255,128)")));
    m_testDimTakeZ->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer23637->Add(m_testDimTakeZ, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticLine2429 = new wxStaticLine(m_testDimensions, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2319->Add(m_staticLine2429, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testDimTakeAll = new wxButton(m_testDimensions, wxID_ANY, _("Take over All"), wxDefaultPosition, wxDLG_UNIT(m_testDimensions, wxSize(-1,-1)), 0);
    m_testDimTakeAll->SetBackgroundColour(wxColour(wxT("rgb(128,128,0)")));
    m_testDimTakeAll->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_testDimTakeAll->SetToolTip(_("Take over to Configuration"));
    
    flexGridSizer2319->Add(m_testDimTakeAll, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_testLimitPage = new wxPanel(m_treebookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookTest, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testLimitPageImgIndex;
    m_testLimitPageImgIndex = m_treebookTest_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_treebookTest->AddPage(m_testLimitPage, _("Limit"), false, m_testLimitPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer2249 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2249->SetFlexibleDirection( wxBOTH );
    flexGridSizer2249->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2249->AddGrowableCol(0);
    flexGridSizer2249->AddGrowableRow(1);
    m_testLimitPage->SetSizer(flexGridSizer2249);
    
    wxFlexGridSizer* flexGridSizer21571 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer21571->SetFlexibleDirection( wxBOTH );
    flexGridSizer21571->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21571->AddGrowableCol(0);
    
    flexGridSizer2249->Add(flexGridSizer21571, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText21172 = new wxStaticText(m_testLimitPage, wxID_ANY, _("Test::Evaluate End Switch States:"), wxDefaultPosition, wxDLG_UNIT(m_testLimitPage, wxSize(-1,-1)), 0);
    wxFont m_staticText21172Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText21172->SetFont(m_staticText21172Font);
    
    flexGridSizer21571->Add(m_staticText21172, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine22533 = new wxStaticLine(m_testLimitPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testLimitPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer21571->Add(m_staticLine22533, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer2269 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2269->SetFlexibleDirection( wxBOTH );
    flexGridSizer2269->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2269->AddGrowableCol(0);
    flexGridSizer2269->AddGrowableRow(0);
    
    flexGridSizer2249->Add(flexGridSizer2269, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testToggleEndSwitch = new wxToggleButton(m_testLimitPage, wxID_ANY, _("Start End Switch Evaluation"), wxDefaultPosition, wxDLG_UNIT(m_testLimitPage, wxSize(-1,-1)), 0);
    m_testToggleEndSwitch->SetBackgroundColour(wxColour(wxT("rgb(128,255,0)")));
    m_testToggleEndSwitch->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_testToggleEndSwitchFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_testToggleEndSwitch->SetFont(m_testToggleEndSwitchFont);
    m_testToggleEndSwitch->SetValue(false);
    
    flexGridSizer2269->Add(m_testToggleEndSwitch, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testToolPage = new wxPanel(m_treebookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookTest, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_testToolPageImgIndex;
    m_testToolPageImgIndex = m_treebookTest_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-typedef")));
    m_treebookTest->AddPage(m_testToolPage, _("Tool"), false, m_testToolPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer2251 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer2251->SetFlexibleDirection( wxBOTH );
    flexGridSizer2251->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2251->AddGrowableCol(0);
    flexGridSizer2251->AddGrowableRow(1);
    m_testToolPage->SetSizer(flexGridSizer2251);
    
    wxFlexGridSizer* flexGridSizer215715 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer215715->SetFlexibleDirection( wxBOTH );
    flexGridSizer215715->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer215715->AddGrowableCol(0);
    
    flexGridSizer2251->Add(flexGridSizer215715, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText211726 = new wxStaticText(m_testToolPage, wxID_ANY, _("Test::Running Tool:"), wxDefaultPosition, wxDLG_UNIT(m_testToolPage, wxSize(-1,-1)), 0);
    wxFont m_staticText211726Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText211726->SetFont(m_staticText211726Font);
    
    flexGridSizer215715->Add(m_staticText211726, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticLine225337 = new wxStaticLine(m_testToolPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_testToolPage, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer215715->Add(m_staticLine225337, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer2275 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2275->SetFlexibleDirection( wxBOTH );
    flexGridSizer2275->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2275->AddGrowableCol(0);
    flexGridSizer2275->AddGrowableRow(0);
    
    flexGridSizer2251->Add(flexGridSizer2275, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_testToggleTool = new wxToggleButton(m_testToolPage, wxID_ANY, _("Switch Tool On"), wxDefaultPosition, wxDLG_UNIT(m_testToolPage, wxSize(-1,-1)), 0);
    m_testToggleTool->SetBackgroundColour(wxColour(wxT("rgb(255,0,0)")));
    m_testToggleTool->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_testToggleToolFont(18, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_testToggleTool->SetFont(m_testToggleToolFont);
    m_testToggleTool->SetValue(false);
    
    flexGridSizer2275->Add(m_testToggleTool, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestSuite = new wxPanel(m_treebookTest, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_treebookTest, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_ctrlTestSuiteImgIndex;
    m_ctrlTestSuiteImgIndex = m_treebookTest_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-class")));
    m_treebookTest->AddPage(m_ctrlTestSuite, _("Ctrl Test Suite"), false, m_ctrlTestSuiteImgIndex);
    
    wxFlexGridSizer* flexGridSizer24722 = new wxFlexGridSizer(10, 1, 0, 0);
    flexGridSizer24722->SetFlexibleDirection( wxBOTH );
    flexGridSizer24722->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer24722->AddGrowableCol(0);
    m_ctrlTestSuite->SetSizer(flexGridSizer24722);
    
    wxFlexGridSizer* flexGridSizer21573253 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer21573253->SetFlexibleDirection( wxBOTH );
    flexGridSizer21573253->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21573253->AddGrowableCol(0);
    
    flexGridSizer24722->Add(flexGridSizer21573253, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer25094 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer25094->SetFlexibleDirection( wxBOTH );
    flexGridSizer25094->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer25094->AddGrowableCol(1);
    
    flexGridSizer21573253->Add(flexGridSizer25094, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText21174365 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("The underlying tests running under CNC TestSuite control"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    wxFont m_staticText21174365Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("@Arial Unicode MS"));
    m_staticText21174365->SetFont(m_staticText21174365Font);
    
    flexGridSizer25094->Add(m_staticText21174365, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_ctrlTestSelectedId = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    m_ctrlTestSelectedId->Enable(false);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestSelectedId->SetHint(wxT(""));
    #endif
    
    flexGridSizer25094->Add(m_ctrlTestSelectedId, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_staticLine22535477 = new wxStaticLine(m_ctrlTestSuite, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer21573253->Add(m_staticLine22535477, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer24808 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer24808->SetFlexibleDirection( wxBOTH );
    flexGridSizer24808->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer24808->AddGrowableCol(0);
    flexGridSizer24808->AddGrowableRow(1);
    
    flexGridSizer24722->Add(flexGridSizer24808, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText25139 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Cases:"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    wxFont m_staticText25139Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText25139Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText25139->SetFont(m_staticText25139Font);
    
    flexGridSizer24808->Add(m_staticText25139, 0, wxALL, WXC_FROM_DIP(2));
    
    m_scrollWin2571 = new wxScrolledWindow(m_ctrlTestSuite, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,120)), wxHSCROLL|wxVSCROLL);
    m_scrollWin2571->SetScrollRate(5, 5);
    
    flexGridSizer24808->Add(m_scrollWin2571, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer2573 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2573->SetFlexibleDirection( wxBOTH );
    flexGridSizer2573->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2573->AddGrowableCol(0);
    flexGridSizer2573->AddGrowableRow(0);
    m_scrollWin2571->SetSizer(flexGridSizer2573);
    
    wxArrayString m_ctrlTestSelectionArr;
    m_ctrlTestSelection = new wxListBox(m_scrollWin2571, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWin2571, wxSize(-1,-1)), m_ctrlTestSelectionArr, wxLB_HSCROLL|wxLB_SINGLE|wxHSCROLL|wxVSCROLL);
    m_ctrlTestSelection->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_ctrlTestSelectionFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_ctrlTestSelectionFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_ctrlTestSelection->SetFont(m_ctrlTestSelectionFont);
    
    flexGridSizer2573->Add(m_ctrlTestSelection, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_scrollWin2571->SetMinSize(wxSize(-1,120));
    
    m_staticText251911 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Description:"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    wxFont m_staticText251911Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText251911Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText251911->SetFont(m_staticText251911Font);
    
    flexGridSizer24808->Add(m_staticText251911, 0, wxALL, WXC_FROM_DIP(5));
    
    m_ctrlTestDescription = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,100)), wxTE_READONLY|wxTE_MULTILINE);
    m_ctrlTestDescription->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer24808->Add(m_ctrlTestDescription, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_ctrlTestDescription->SetMinSize(wxSize(-1,100));
    
    wxFlexGridSizer* flexGridSizer248413 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer248413->SetFlexibleDirection( wxBOTH );
    flexGridSizer248413->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer248413->AddGrowableCol(0);
    
    flexGridSizer24722->Add(flexGridSizer248413, 1, wxALL|wxEXPAND, WXC_FROM_DIP(4));
    
    m_staticText2486121314 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Parameter 1 - (4 Byte Integer)"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    m_staticText2486121314->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer248413->Add(m_staticText2486121314, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestParam1 = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestParam1->SetHint(wxT(""));
    #endif
    
    flexGridSizer248413->Add(m_ctrlTestParam1, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText24861216 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Parameter 2 - (4 Byte Integer)"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    m_staticText24861216->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer248413->Add(m_staticText24861216, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestParam2 = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestParam2->SetHint(wxT(""));
    #endif
    
    flexGridSizer248413->Add(m_ctrlTestParam2, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText24861418 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Parameter 3 - (4 Byte Integer)"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    m_staticText24861418->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer248413->Add(m_staticText24861418, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestParam3 = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestParam3->SetHint(wxT(""));
    #endif
    
    flexGridSizer248413->Add(m_ctrlTestParam3, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText24861520 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Parameter 4 - (4 Byte Integer)"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    m_staticText24861520->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer248413->Add(m_staticText24861520, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestParam4 = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestParam4->SetHint(wxT(""));
    #endif
    
    flexGridSizer248413->Add(m_ctrlTestParam4, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_staticText248622 = new wxStaticText(m_ctrlTestSuite, wxID_ANY, _("Test Parameter 5 - (4 Byte Integer)"), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), 0);
    m_staticText248622->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVECAPTION));
    
    flexGridSizer248413->Add(m_staticText248622, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_ctrlTestParam5 = new wxTextCtrl(m_ctrlTestSuite, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_ctrlTestSuite, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_ctrlTestParam5->SetHint(wxT(""));
    #endif
    
    flexGridSizer248413->Add(m_ctrlTestParam5, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(2));
    
    m_mainBookPreviewPanel = new wxPanel(m_mainViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainViewBook->AddPage(m_mainBookPreviewPanel, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer3892 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3892->SetFlexibleDirection( wxBOTH );
    flexGridSizer3892->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3892->AddGrowableCol(0);
    flexGridSizer3892->AddGrowableRow(1);
    m_mainBookPreviewPanel->SetSizer(flexGridSizer3892);
    
    m_panel4398 = new wxPanel(m_mainBookPreviewPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookPreviewPanel, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panel4398->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    flexGridSizer3892->Add(m_panel4398, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4400 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer4400->SetFlexibleDirection( wxBOTH );
    flexGridSizer4400->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_panel4398->SetSizer(flexGridSizer4400);
    
    m_staticText4402 = new wxStaticText(m_panel4398, wxID_ANY, _("File Manager Preview . . ."), wxDefaultPosition, wxDLG_UNIT(m_panel4398, wxSize(-1,-1)), 0);
    m_staticText4402->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText4402Font(14, wxFONTFAMILY_SWISS, wxFONTSTYLE_ITALIC, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_staticText4402->SetFont(m_staticText4402Font);
    
    flexGridSizer4400->Add(m_staticText4402, 0, wxALL, WXC_FROM_DIP(5));
    
    m_filePreviewPlaceholder = new wxPanel(m_mainBookPreviewPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainBookPreviewPanel, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_filePreviewPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_filePreviewPlaceholder->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer3892->Add(m_filePreviewPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_currentFileMangerPreviewFileName = new wxTextCtrl(m_mainBookPreviewPanel, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_mainBookPreviewPanel, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    #if wxVERSION_NUMBER >= 3000
    m_currentFileMangerPreviewFileName->SetHint(wxT(""));
    #endif
    
    flexGridSizer3892->Add(m_currentFileMangerPreviewFileName, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelZView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(40,-1)), wxTAB_TRAVERSAL);
    m_panelZView->SetBackgroundColour(wxColour(wxT("rgb(255,128,64)")));
    
    m_auimgrMain->AddPane(m_panelZView, wxAuiPaneInfo().Name(wxT("ZView")).Caption(_("Z Axis")).Direction(wxAUI_DOCK_RIGHT).Layer(0).Row(1).Position(0).BestSize(40,100).MinSize(40,100).MaxSize(40,100).Fixed().CaptionVisible(true).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false));
    
    wxFlexGridSizer* flexGridSizer4571 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4571->SetFlexibleDirection( wxBOTH );
    flexGridSizer4571->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4571->AddGrowableCol(0);
    flexGridSizer4571->AddGrowableRow(0);
    m_panelZView->SetSizer(flexGridSizer4571);
    
    wxFlexGridSizer* flexGridSizer3488 = new wxFlexGridSizer(8, 1, 0, 0);
    flexGridSizer3488->SetFlexibleDirection( wxBOTH );
    flexGridSizer3488->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3488->AddGrowableCol(0);
    flexGridSizer3488->AddGrowableRow(0);
    
    flexGridSizer4571->Add(flexGridSizer3488, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_zView = new CncZView(m_panelZView, wxID_ANY);
    flexGridSizer3488->Add(m_zView, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_zView->SetMinSize(wxSize(32,-1));
    
    m_infoToolDiameter = new wxStaticText(m_panelZView, wxID_ANY, _("0.0"), wxDefaultPosition, wxDLG_UNIT(m_panelZView, wxSize(-1,-1)), 0);
    m_infoToolDiameter->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_infoToolDiameterFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_infoToolDiameter->SetFont(m_infoToolDiameterFont);
    m_infoToolDiameter->SetToolTip(_("Tool Diameter [mm]"));
    
    flexGridSizer3488->Add(m_infoToolDiameter, 0, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(0));
    
    flexGridSizer3488->Add(0, 1, 1, wxALL, WXC_FROM_DIP(0));
    
    m_scrollWinMonitor = new wxScrolledWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxHSCROLL|wxVSCROLL);
    m_scrollWinMonitor->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_scrollWinMonitor->SetScrollRate(5, 5);
    
    m_auimgrMain->AddPane(m_scrollWinMonitor, wxAuiPaneInfo().Name(wxT("Outbound")).Caption(_("CNC Monitor")).Direction(wxAUI_DOCK_CENTER).Layer(0).Row(2).Position(0).BestSize(200,200).MinSize(10,10).MaxSize(200,200).CaptionVisible(true).MaximizeButton(true).CloseButton(false).MinimizeButton(true).PinButton(false));
    
    wxFlexGridSizer* flexGridSizer4348 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4348->SetFlexibleDirection( wxBOTH );
    flexGridSizer4348->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4348->AddGrowableCol(0);
    flexGridSizer4348->AddGrowableRow(1);
    m_scrollWinMonitor->SetSizer(flexGridSizer4348);
    
    wxArrayString m_monitorViewSelectorArr;
    m_monitorViewSelectorArr.Add(wxT("CNC Preview"));
    m_monitorViewSelectorArr.Add(wxT("Template Preview"));
    m_monitorViewSelector = new wxChoice(m_scrollWinMonitor, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWinMonitor, wxSize(-1,-1)), m_monitorViewSelectorArr, wxBORDER_NONE);
    wxFont m_monitorViewSelectorFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_monitorViewSelector->SetFont(m_monitorViewSelectorFont);
    m_monitorViewSelector->SetSelection(0);
    
    flexGridSizer4348->Add(m_monitorViewSelector, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_monitorViewBook = new wxSimplebook(m_scrollWinMonitor, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWinMonitor, wxSize(-1,-1)), wxBK_DEFAULT);
    m_monitorViewBook->SetName(wxT("m_monitorViewBook"));
    m_monitorViewBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer4348->Add(m_monitorViewBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_monitorBookCncPanel = new wxPanel(m_monitorViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_monitorViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_monitorBookCncPanel->SetToolTip(_("ee"));
    m_monitorViewBook->AddPage(m_monitorBookCncPanel, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer649 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer649->SetFlexibleDirection( wxBOTH );
    flexGridSizer649->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer649->AddGrowableCol(0);
    flexGridSizer649->AddGrowableRow(0);
    m_monitorBookCncPanel->SetSizer(flexGridSizer649);
    
    m_outboundNotebook = new wxNotebook(m_monitorBookCncPanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_monitorBookCncPanel, wxSize(-1,-1)), wxBK_DEFAULT);
    m_outboundNotebook->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_outboundNotebook->SetName(wxT("m_outboundNotebook"));
    wxImageList* m_outboundNotebook_il = new wxImageList(16, 16);
    m_outboundNotebook->AssignImageList(m_outboundNotebook_il);
    
    flexGridSizer649->Add(m_outboundNotebook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_cncParameters = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_cncParametersImgIndex;
    m_cncParametersImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("brick-go1")));
    m_outboundNotebook->AddPage(m_cncParameters, _("CNC Values"), false, m_cncParametersImgIndex);
    
    wxFlexGridSizer* flexGridSizer1076 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer1076->SetFlexibleDirection( wxBOTH );
    flexGridSizer1076->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1076->AddGrowableCol(0);
    flexGridSizer1076->AddGrowableRow(0);
    m_cncParameters->SetSizer(flexGridSizer1076);
    
    m_notebookConfig = new wxListbook(m_cncParameters, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncParameters, wxSize(-1,-1)), wxLB_DEFAULT|wxBK_DEFAULT);
    m_notebookConfig->SetToolTip(_("qwewe"));
    m_notebookConfig->SetName(wxT("m_notebookConfig"));
    wxImageList* m_notebookConfig_il = new wxImageList(16, 16);
    m_notebookConfig->AssignImageList(m_notebookConfig_il);
    
    flexGridSizer1076->Add(m_notebookConfig, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panel2601 = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_panel2601ImgIndex;
    m_panel2601ImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-database")));
    m_notebookConfig->AddPage(m_panel2601, _("Summary"), true, m_panel2601ImgIndex);
    
    wxFlexGridSizer* flexGridSizer2603 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer2603->SetFlexibleDirection( wxBOTH );
    flexGridSizer2603->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2603->AddGrowableCol(0);
    flexGridSizer2603->AddGrowableRow(2);
    m_panel2601->SetSizer(flexGridSizer2603);
    
    m_staticText11481 = new wxStaticText(m_panel2601, wxID_ANY, _("Configuration Summary"), wxDefaultPosition, wxDLG_UNIT(m_panel2601, wxSize(-1,-1)), 0);
    wxFont m_staticText11481Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText11481->SetFont(m_staticText11481Font);
    
    flexGridSizer2603->Add(m_staticText11481, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    flexGridSizer2603->Add(0, 8, 1, wxALL, WXC_FROM_DIP(0));
    
    m_dvListCtrlConfigSummary = new wxDataViewListCtrl(m_panel2601, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel2601, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE|wxALWAYS_SHOW_SB);
    m_dvListCtrlConfigSummary->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer2603->Add(m_dvListCtrlConfigSummary, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_dvListCtrlConfigSummary->AppendTextColumn(_("Parameter"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(200), wxALIGN_LEFT);
    m_dvListCtrlConfigSummary->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(120), wxALIGN_RIGHT);
    m_dvListCtrlConfigSummary->AppendTextColumn(_("Unit"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    wxFlexGridSizer* flexGridSizer2609 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2609->SetFlexibleDirection( wxBOTH );
    flexGridSizer2609->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2609->AddGrowableCol(0);
    flexGridSizer2609->AddGrowableRow(0);
    
    flexGridSizer2603->Add(flexGridSizer2609, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btCancelRun = new wxButton(m_panel2601, wxID_ANY, _("Cancel Run"), wxDefaultPosition, wxDLG_UNIT(m_panel2601, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btCancelRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-execute_stop")), wxLEFT);
    m_btCancelRun->SetBitmapMargins(2,2);
    #endif
    m_btCancelRun->Enable(false);
    
    flexGridSizer2609->Add(m_btCancelRun, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    
    m_btConfirmRun = new wxButton(m_panel2601, wxID_ANY, _("Confirm Run"), wxDefaultPosition, wxDLG_UNIT(m_panel2601, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btConfirmRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-ok")), wxLEFT);
    m_btConfirmRun->SetBitmapMargins(2,2);
    #endif
    m_btConfirmRun->Enable(false);
    
    flexGridSizer2609->Add(m_btConfirmRun, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(3));
    
    m_cncSetters = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_cncSettersImgIndex;
    m_cncSettersImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-struct")));
    m_notebookConfig->AddPage(m_cncSetters, _("CNC Setter"), false, m_cncSettersImgIndex);
    
    wxFlexGridSizer* flexGridSizer1142 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1142->SetFlexibleDirection( wxBOTH );
    flexGridSizer1142->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1142->AddGrowableCol(0);
    flexGridSizer1142->AddGrowableRow(1);
    m_cncSetters->SetSizer(flexGridSizer1142);
    
    wxFlexGridSizer* flexGridSizer4691 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer4691->SetFlexibleDirection( wxBOTH );
    flexGridSizer4691->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4691->AddGrowableCol(0);
    flexGridSizer4691->AddGrowableRow(0);
    
    flexGridSizer1142->Add(flexGridSizer4691, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1150 = new wxStaticText(m_cncSetters, wxID_ANY, _("Processed Setter Values:"), wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), 0);
    wxFont m_staticText1150Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1150->SetFont(m_staticText1150Font);
    
    flexGridSizer4691->Add(m_staticText1150, 0, wxALL, WXC_FROM_DIP(5));
    
    m_setterListCount = new wxTextCtrl(m_cncSetters, wxID_ANY, wxT("# 0"), wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_setterListCount->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_MENU));
    m_setterListCount->SetForegroundColour(wxColour(wxT("rgb(0,0,64)")));
    wxFont m_setterListCountFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_setterListCount->SetFont(m_setterListCountFont);
    #if wxVERSION_NUMBER >= 3000
    m_setterListCount->SetHint(wxT(""));
    #endif
    
    flexGridSizer4691->Add(m_setterListCount, 0, wxALL, WXC_FROM_DIP(7));
    
    m_btClearSetterList = new wxButton(m_cncSetters, wxID_ANY, _("Clear"), wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClearSetterList->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btClearSetterList->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4691->Add(m_btClearSetterList, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_setterList = new wxListCtrl(m_cncSetters, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_cncSetters, wxSize(-1,-1)), wxLC_REPORT);
    m_setterList->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer1142->Add(m_setterList, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_controllerConfiguration = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_controllerConfigurationImgIndex;
    m_controllerConfigurationImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-member_public")));
    m_notebookConfig->AddPage(m_controllerConfiguration, _("Ctrl Config"), false, m_controllerConfigurationImgIndex);
    
    wxFlexGridSizer* flexGridSizer1306 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer1306->SetFlexibleDirection( wxBOTH );
    flexGridSizer1306->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1306->AddGrowableCol(0);
    flexGridSizer1306->AddGrowableRow(1);
    m_controllerConfiguration->SetSizer(flexGridSizer1306);
    
    wxFlexGridSizer* flexGridSizer1311 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer1311->SetFlexibleDirection( wxBOTH );
    flexGridSizer1311->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1311->AddGrowableCol(0);
    flexGridSizer1311->AddGrowableRow(0);
    
    flexGridSizer1306->Add(flexGridSizer1311, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText12831 = new wxStaticText(m_controllerConfiguration, wxID_ANY, _("Requested Controller Config"), wxDefaultPosition, wxDLG_UNIT(m_controllerConfiguration, wxSize(-1,-1)), 0);
    wxFont m_staticText12831Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText12831->SetFont(m_staticText12831Font);
    
    flexGridSizer1311->Add(m_staticText12831, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btRequestCtlConfig = new wxButton(m_controllerConfiguration, wxID_ANY, _("Request"), wxDefaultPosition, wxDLG_UNIT(m_controllerConfiguration, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btRequestCtlConfig->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_btRequestCtlConfig->SetBitmapMargins(2,2);
    #endif
    m_btRequestCtlConfig->SetToolTip(_("Request Controller Configuration"));
    
    flexGridSizer1311->Add(m_btRequestCtlConfig, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerConfig = new wxDataViewListCtrl(m_controllerConfiguration, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_controllerConfiguration, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlControllerConfig->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer1306->Add(m_dvListCtrlControllerConfig, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerConfig->AppendTextColumn(_("PID"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_RIGHT);
    m_dvListCtrlControllerConfig->AppendTextColumn(_("Key"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerConfig->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_controllerPinReport = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_controllerPinReport->SetToolTip(_("Request Controller Pin Report"));
    int m_controllerPinReportImgIndex;
    m_controllerPinReportImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-ToolPin")));
    m_notebookConfig->AddPage(m_controllerPinReport, _("Ctrl Pin Report"), false, m_controllerPinReportImgIndex);
    
    wxFlexGridSizer* flexGridSizer13061 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer13061->SetFlexibleDirection( wxBOTH );
    flexGridSizer13061->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer13061->AddGrowableCol(0);
    flexGridSizer13061->AddGrowableRow(1);
    m_controllerPinReport->SetSizer(flexGridSizer13061);
    
    wxFlexGridSizer* flexGridSizer13112 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer13112->SetFlexibleDirection( wxBOTH );
    flexGridSizer13112->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer13112->AddGrowableCol(0);
    
    flexGridSizer13061->Add(flexGridSizer13112, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText128313 = new wxStaticText(m_controllerPinReport, wxID_ANY, _("Conroller Pin Report"), wxDefaultPosition, wxDLG_UNIT(m_controllerPinReport, wxSize(-1,-1)), 0);
    wxFont m_staticText128313Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText128313->SetFont(m_staticText128313Font);
    
    flexGridSizer13112->Add(m_staticText128313, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btRequestCtlPins = new wxButton(m_controllerPinReport, wxID_ANY, _("Request"), wxDefaultPosition, wxDLG_UNIT(m_controllerPinReport, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btRequestCtlPins->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_btRequestCtlPins->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer13112->Add(m_btRequestCtlPins, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerPins = new wxDataViewListCtrl(m_controllerPinReport, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_controllerPinReport, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlControllerPins->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer13061->Add(m_dvListCtrlControllerPins, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerPins->AppendTextColumn(_("PIN"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_RIGHT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Description"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Type"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Mode"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerPins->AppendTextColumn(_("Value"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_conrollerMessages = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_conrollerMessagesImgIndex;
    m_conrollerMessagesImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-archive")));
    m_notebookConfig->AddPage(m_conrollerMessages, _("Ctrl Messages"), false, m_conrollerMessagesImgIndex);
    
    wxFlexGridSizer* flexGridSizer2577 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2577->SetFlexibleDirection( wxBOTH );
    flexGridSizer2577->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2577->AddGrowableCol(0);
    flexGridSizer2577->AddGrowableRow(1);
    m_conrollerMessages->SetSizer(flexGridSizer2577);
    
    wxFlexGridSizer* flexGridSizer2586 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2586->SetFlexibleDirection( wxBOTH );
    flexGridSizer2586->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2586->AddGrowableCol(0);
    
    flexGridSizer2577->Add(flexGridSizer2586, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText1283132 = new wxStaticText(m_conrollerMessages, wxID_ANY, _("Controller Message History"), wxDefaultPosition, wxDLG_UNIT(m_conrollerMessages, wxSize(-1,-1)), 0);
    wxFont m_staticText1283132Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1283132->SetFont(m_staticText1283132Font);
    
    flexGridSizer2586->Add(m_staticText1283132, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btClearMsgHistory = new wxButton(m_conrollerMessages, wxID_ANY, _("Clear"), wxDefaultPosition, wxDLG_UNIT(m_conrollerMessages, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClearMsgHistory->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btClearMsgHistory->SetBitmapMargins(2,2);
    #endif
    m_btClearMsgHistory->SetToolTip(_("Clear the Message Histroy"));
    
    flexGridSizer2586->Add(m_btClearMsgHistory, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_controllerMsgHistory = new wxTextCtrl(m_conrollerMessages, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_conrollerMessages, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE);
    m_controllerMsgHistory->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_controllerMsgHistoryFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_controllerMsgHistory->SetFont(m_controllerMsgHistoryFont);
    
    flexGridSizer2577->Add(m_controllerMsgHistory, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_controllerErrorInfo = new wxPanel(m_notebookConfig, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookConfig, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_controllerErrorInfoImgIndex;
    m_controllerErrorInfoImgIndex = m_notebookConfig_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-patch")));
    m_notebookConfig->AddPage(m_controllerErrorInfo, _("Ctrl Error Info"), false, m_controllerErrorInfoImgIndex);
    
    wxFlexGridSizer* flexGridSizer13062 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer13062->SetFlexibleDirection( wxBOTH );
    flexGridSizer13062->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer13062->AddGrowableCol(0);
    flexGridSizer13062->AddGrowableRow(1);
    m_controllerErrorInfo->SetSizer(flexGridSizer13062);
    
    wxFlexGridSizer* flexGridSizer13113 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer13113->SetFlexibleDirection( wxBOTH );
    flexGridSizer13113->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer13113->AddGrowableCol(0);
    
    flexGridSizer13062->Add(flexGridSizer13113, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText128314 = new wxStaticText(m_controllerErrorInfo, wxID_ANY, _("Requested Controller Error Info"), wxDefaultPosition, wxDLG_UNIT(m_controllerErrorInfo, wxSize(-1,-1)), 0);
    wxFont m_staticText128314Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText128314->SetFont(m_staticText128314Font);
    
    flexGridSizer13113->Add(m_staticText128314, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btRequestCtlErrorInfo = new wxButton(m_controllerErrorInfo, wxID_ANY, _("Request"), wxDefaultPosition, wxDLG_UNIT(m_controllerErrorInfo, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btRequestCtlErrorInfo->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_btRequestCtlErrorInfo->SetBitmapMargins(2,2);
    #endif
    m_btRequestCtlErrorInfo->SetToolTip(_("Request Controller Error Info"));
    
    flexGridSizer13113->Add(m_btRequestCtlErrorInfo, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerErrorInfo = new wxDataViewListCtrl(m_controllerErrorInfo, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_controllerErrorInfo, wxSize(-1,-1)), wxDV_ROW_LINES|wxDV_SINGLE);
    m_dvListCtrlControllerErrorInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer13062->Add(m_dvListCtrlControllerErrorInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_dvListCtrlControllerErrorInfo->AppendTextColumn(_("#"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_RIGHT);
    m_dvListCtrlControllerErrorInfo->AppendTextColumn(_("Error Code"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_RIGHT);
    m_dvListCtrlControllerErrorInfo->AppendTextColumn(_("Error Text"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_dvListCtrlControllerErrorInfo->AppendTextColumn(_("Info"), wxDATAVIEW_CELL_INERT, WXC_FROM_DIP(-2), wxALIGN_LEFT);
    m_3DPane = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_3DPaneImgIndex;
    m_3DPaneImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("package-x-generic1")));
    m_outboundNotebook->AddPage(m_3DPane, _("CNC Motion Monitor"), false, m_3DPaneImgIndex);
    
    wxFlexGridSizer* flexGridSizer3486 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3486->SetFlexibleDirection( wxBOTH );
    flexGridSizer3486->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3486->AddGrowableCol(0);
    flexGridSizer3486->AddGrowableRow(0);
    m_3DPane->SetSizer(flexGridSizer3486);
    
    wxFlexGridSizer* flexGridSizer3491 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3491->SetFlexibleDirection( wxBOTH );
    flexGridSizer3491->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3491->AddGrowableCol(0);
    flexGridSizer3491->AddGrowableRow(1);
    
    flexGridSizer3486->Add(flexGridSizer3491, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer3497 = new wxFlexGridSizer(1, 20, 0, 0);
    flexGridSizer3497->SetFlexibleDirection( wxBOTH );
    flexGridSizer3497->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3497->AddGrowableCol(0);
    flexGridSizer3497->AddGrowableRow(0);
    
    flexGridSizer3491->Add(flexGridSizer3497, 1, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer3520 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer3520->SetFlexibleDirection( wxBOTH );
    flexGridSizer3520->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3497->Add(flexGridSizer3520, 1, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_toolStateTrafficLight = new wxStaticBitmap(m_3DPane, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("circle_red16")), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), 0 );
    m_toolStateTrafficLight->SetToolTip(_("Tool State"));
    
    flexGridSizer3520->Add(m_toolStateTrafficLight, 1, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer4584 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4584->SetFlexibleDirection( wxBOTH );
    flexGridSizer4584->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3520->Add(flexGridSizer4584, 0, wxALL, WXC_FROM_DIP(0));
    
    flexGridSizer4584->Add(0, 7, 1, wxALL, WXC_FROM_DIP(0));
    
    m_toolId = new wxTextCtrl(m_3DPane, wxID_ANY, wxT("-1"), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(12,-1)), wxTE_READONLY|wxBORDER_NONE);
    wxFont m_toolIdFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_toolId->SetFont(m_toolIdFont);
    m_toolId->SetToolTip(_("Current Tool ID"));
    #if wxVERSION_NUMBER >= 3000
    m_toolId->SetHint(wxT(""));
    #endif
    
    flexGridSizer4584->Add(m_toolId, 0, wxALL, WXC_FROM_DIP(0));
    m_toolId->SetMinSize(wxSize(12,-1));
    
    m_lableWorkpieceThickness = new wxStaticBitmap(m_3DPane, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("distribute-vertical-equal")), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), 0 );
    m_lableWorkpieceThickness->SetToolTip(_("Workpiece thickness 0.000 mm"));
    
    flexGridSizer3520->Add(m_lableWorkpieceThickness, 0, wxALL, WXC_FROM_DIP(5));
    
    m_switchMonitoing = new wxBitmapToggleButton(m_3DPane, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    m_switchMonitoing->SetToolTip(_("Switch Monitoring (normal/minimal)"));
    m_switchMonitoing->SetValue(true);
    
    flexGridSizer3497->Add(m_switchMonitoing, 0, wxALL, WXC_FROM_DIP(0));
    m_switchMonitoing->SetMinSize(wxSize(24,24));
    
    m_staticLine3525 = new wxStaticLine(m_3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), wxLI_VERTICAL|wxLI_HORIZONTAL);
    
    flexGridSizer3497->Add(m_staticLine3525, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_motionMonitorOptionDlg = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_motionMonitorOptionDlg->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("anonymous_simple_weather_symbols_5")), wxLEFT);
    m_motionMonitorOptionDlg->SetBitmapMargins(2,2);
    #endif
    m_motionMonitorOptionDlg->SetToolTip(_("Option Dialog"));
    
    flexGridSizer3497->Add(m_motionMonitorOptionDlg, 0, wxALL, WXC_FROM_DIP(0));
    m_motionMonitorOptionDlg->SetMinSize(wxSize(24,24));
    
    m_3D_Refreh = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Refreh->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_3D_Refreh->SetBitmapMargins(2,2);
    #endif
    m_3D_Refreh->SetToolTip(_("Refresh Motion Monitor"));
    
    flexGridSizer3497->Add(m_3D_Refreh, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Refreh->SetMinSize(wxSize(24,24));
    
    m_3D_Clear = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Clear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_3D_Clear->SetBitmapMargins(2,2);
    #endif
    m_3D_Clear->SetToolTip(_("Clear Motion Monitor"));
    
    flexGridSizer3497->Add(m_3D_Clear, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Clear->SetMinSize(wxSize(24,24));
    
    flexGridSizer3497->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine47803 = new wxStaticLine(m_3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3497->Add(m_staticLine47803, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText16032 = new wxStaticText(m_3DPane, wxID_ANY, _("Render\nResolution:"), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), 0);
    wxFont m_staticText16032Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_staticText16032->SetFont(m_staticText16032Font);
    
    flexGridSizer3497->Add(m_staticText16032, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    flexGridSizer3497->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    wxArrayString m_cbCurveLibResolutionArr;
    m_cbCurveLibResolutionArr.Add(wxT("0.001"));
    m_cbCurveLibResolutionArr.Add(wxT("0.002"));
    m_cbCurveLibResolutionArr.Add(wxT("0.003"));
    m_cbCurveLibResolutionArr.Add(wxT("0.004"));
    m_cbCurveLibResolutionArr.Add(wxT("0.005"));
    m_cbCurveLibResolutionArr.Add(wxT("0.006"));
    m_cbCurveLibResolutionArr.Add(wxT("0.007"));
    m_cbCurveLibResolutionArr.Add(wxT("0.008"));
    m_cbCurveLibResolutionArr.Add(wxT("0.009"));
    m_cbCurveLibResolutionArr.Add(wxT("0.010"));
    m_cbCurveLibResolutionArr.Add(wxT("0.020"));
    m_cbCurveLibResolutionArr.Add(wxT("0.030"));
    m_cbCurveLibResolutionArr.Add(wxT("0.050"));
    m_cbCurveLibResolutionArr.Add(wxT("0.060"));
    m_cbCurveLibResolutionArr.Add(wxT("0.070"));
    m_cbCurveLibResolutionArr.Add(wxT("0.080"));
    m_cbCurveLibResolutionArr.Add(wxT("0.090"));
    m_cbCurveLibResolutionArr.Add(wxT("0.100"));
    m_cbCurveLibResolution = new wxComboBox(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), m_cbCurveLibResolutionArr, wxCB_READONLY);
    
    flexGridSizer3497->Add(m_cbCurveLibResolution, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_staticLine4780 = new wxStaticLine(m_3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3497->Add(m_staticLine4780, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    flexGridSizer3497->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText32334 = new wxStaticText(m_3DPane, wxID_ANY, _("Display\nInterval [ms]:"), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), 0);
    wxFont m_staticText32334Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_staticText32334->SetFont(m_staticText32334Font);
    
    flexGridSizer3497->Add(m_staticText32334, 0, wxALL, WXC_FROM_DIP(0));
    
    m_displayInterval = new wxSlider(m_3DPane, wxID_ANY, 50, 0, 1000, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(60,-1)), wxSL_HORIZONTAL);
    
    flexGridSizer3497->Add(m_displayInterval, 0, wxALL, WXC_FROM_DIP(0));
    m_displayInterval->SetMinSize(wxSize(60,-1));
    
    wxFlexGridSizer* flexGridSizer2309 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2309->SetFlexibleDirection( wxBOTH );
    flexGridSizer2309->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2309->AddGrowableCol(0);
    flexGridSizer2309->AddGrowableRow(0);
    
    flexGridSizer3491->Add(flexGridSizer2309, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4878 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4878->SetFlexibleDirection( wxBOTH );
    flexGridSizer4878->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4878->AddGrowableCol(0);
    flexGridSizer4878->AddGrowableRow(0);
    
    flexGridSizer2309->Add(flexGridSizer4878, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_3DOutboundControl = new wxPanel(m_3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_3DOutboundControl->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    flexGridSizer4878->Add(m_3DOutboundControl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer2360 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer2360->SetFlexibleDirection( wxBOTH );
    flexGridSizer2360->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2360->AddGrowableCol(1);
    flexGridSizer2360->AddGrowableRow(0);
    m_3DOutboundControl->SetSizer(flexGridSizer2360);
    
    wxFlexGridSizer* flexGridSizer48671 = new wxFlexGridSizer(6, 1, 0, 0);
    flexGridSizer48671->SetFlexibleDirection( wxBOTH );
    flexGridSizer48671->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer48671->AddGrowableCol(0);
    flexGridSizer48671->AddGrowableRow(0);
    flexGridSizer48671->AddGrowableRow(2);
    flexGridSizer48671->AddGrowableRow(4);
    
    flexGridSizer2360->Add(flexGridSizer48671, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_rotatePaneZ3D = new wxPanel(m_3DOutboundControl, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DOutboundControl, wxSize(5,-1)), wxTAB_TRAVERSAL);
    m_rotatePaneZ3D->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer48671->Add(m_rotatePaneZ3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_rotatePaneZ3D->SetMinSize(wxSize(5,-1));
    
    m_staticText487556 = new wxStaticText(m_3DOutboundControl, wxID_ANY, _("Z"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundControl, wxSize(-1,-1)), 0);
    m_staticText487556->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText487556Font(6, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText487556->SetFont(m_staticText487556Font);
    
    flexGridSizer48671->Add(m_staticText487556, 0, wxALL, WXC_FROM_DIP(0));
    
    m_rotatePaneY3D = new wxPanel(m_3DOutboundControl, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DOutboundControl, wxSize(5,-1)), wxTAB_TRAVERSAL);
    m_rotatePaneY3D->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer48671->Add(m_rotatePaneY3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_rotatePaneY3D->SetMinSize(wxSize(5,-1));
    
    m_staticText48755 = new wxStaticText(m_3DOutboundControl, wxID_ANY, _("Y"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundControl, wxSize(-1,-1)), 0);
    m_staticText48755->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText48755Font(6, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText48755->SetFont(m_staticText48755Font);
    
    flexGridSizer48671->Add(m_staticText48755, 0, wxALL, WXC_FROM_DIP(0));
    
    m_rotatePaneX3D = new wxPanel(m_3DOutboundControl, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DOutboundControl, wxSize(5,-1)), wxTAB_TRAVERSAL);
    m_rotatePaneX3D->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer48671->Add(m_rotatePaneX3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_rotatePaneX3D->SetMinSize(wxSize(5,-1));
    
    m_staticText4875 = new wxStaticText(m_3DOutboundControl, wxID_ANY, _("X"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundControl, wxSize(-1,-1)), 0);
    m_staticText4875->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText4875Font(6, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText4875->SetFont(m_staticText4875Font);
    
    flexGridSizer48671->Add(m_staticText4875, 0, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4973 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4973->SetFlexibleDirection( wxBOTH );
    flexGridSizer4973->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4973->AddGrowableCol(0);
    flexGridSizer4973->AddGrowableRow(0);
    
    flexGridSizer2360->Add(flexGridSizer4973, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_drawPane3D = new wxPanel(m_3DOutboundControl, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DOutboundControl, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_drawPane3D->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_drawPane3D->SetToolTip(_("OpenGl Control placeholder"));
    
    flexGridSizer4973->Add(m_drawPane3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4867 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4867->SetFlexibleDirection( wxBOTH );
    flexGridSizer4867->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4867->AddGrowableCol(0);
    flexGridSizer4867->AddGrowableRow(0);
    
    flexGridSizer2360->Add(flexGridSizer4867, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_scalePane3D = new wxPanel(m_3DOutboundControl, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DOutboundControl, wxSize(5,-1)), wxTAB_TRAVERSAL);
    m_scalePane3D->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer4867->Add(m_scalePane3D, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_scalePane3D->SetMinSize(wxSize(5,-1));
    
    m_3DOutboundStatistics = new wxPanel(m_3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    flexGridSizer4878->Add(m_3DOutboundStatistics, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4888 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4888->SetFlexibleDirection( wxBOTH );
    flexGridSizer4888->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4888->AddGrowableCol(0);
    flexGridSizer4888->AddGrowableRow(1);
    m_3DOutboundStatistics->SetSizer(flexGridSizer4888);
    
    wxFlexGridSizer* flexGridSizer4901 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer4901->SetFlexibleDirection( wxBOTH );
    flexGridSizer4901->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4901->AddGrowableCol(1);
    flexGridSizer4901->AddGrowableRow(0);
    
    flexGridSizer4888->Add(flexGridSizer4901, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4902 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer4902->SetFlexibleDirection( wxBOTH );
    flexGridSizer4902->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer4901->Add(flexGridSizer4902, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btShowHideStatistics = new wxButton(m_3DOutboundStatistics, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(20,20)), 0);
    
    flexGridSizer4902->Add(m_btShowHideStatistics, 0, wxALL, WXC_FROM_DIP(1));
    m_btShowHideStatistics->SetMinSize(wxSize(20,20));
    
    m_staticText4884 = new wxStaticText(m_3DOutboundStatistics, wxID_ANY, _("Statistics"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), 0);
    wxFont m_staticText4884Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText4884->SetFont(m_staticText4884Font);
    
    flexGridSizer4902->Add(m_staticText4884, 0, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(4));
    
    wxFlexGridSizer* flexGridSizer4961 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4961->SetFlexibleDirection( wxBOTH );
    flexGridSizer4961->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4961->AddGrowableCol(0);
    flexGridSizer4961->AddGrowableRow(0);
    
    flexGridSizer4901->Add(flexGridSizer4961, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_probeModePanel = new wxPanel(m_3DOutboundStatistics, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,24)), wxTAB_TRAVERSAL);
    m_probeModePanel->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer4961->Add(m_probeModePanel, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(3));
    
    wxFlexGridSizer* flexGridSizer4965 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4965->SetFlexibleDirection( wxBOTH );
    flexGridSizer4965->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4965->AddGrowableCol(1);
    flexGridSizer4965->AddGrowableRow(0);
    m_probeModePanel->SetSizer(flexGridSizer4965);
    
    m_btProbeMode = new wxBitmapToggleButton(m_probeModePanel, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("feed")), wxDefaultPosition, wxDLG_UNIT(m_probeModePanel, wxSize(-1,-1)), wxBU_EXACTFIT|wxBU_BOTTOM);
    m_btProbeMode->SetToolTip(_("Probe mode ..."));
    m_btProbeMode->SetValue(true);
    
    flexGridSizer4965->Add(m_btProbeMode, 0, wxALL, WXC_FROM_DIP(1));
    
    m_probeModeLabel = new wxStaticText(m_probeModePanel, wxID_ANY, _("Probe Mode"), wxDefaultPosition, wxDLG_UNIT(m_probeModePanel, wxSize(-1,-1)), 0);
    wxFont m_probeModeLabelFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_probeModeLabel->SetFont(m_probeModeLabelFont);
    
    flexGridSizer4965->Add(m_probeModeLabel, 0, wxALL|wxEXPAND|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    m_probeModePanel->SetMinSize(wxSize(-1,24));
    
    wxFlexGridSizer* flexGridSizer2803 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer2803->SetFlexibleDirection( wxBOTH );
    flexGridSizer2803->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2803->AddGrowableCol(0);
    flexGridSizer2803->AddGrowableRow(0);
    
    flexGridSizer4901->Add(flexGridSizer2803, 1, wxALL|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(0));
    
    m_staticText1128 = new wxStaticText(m_3DOutboundStatistics, wxID_ANY, _("Crossing:"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), 0);
    wxFont m_staticText1128Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1128->SetFont(m_staticText1128Font);
    
    flexGridSizer2803->Add(m_staticText1128, 0, wxALL, WXC_FROM_DIP(1));
    
    m_crossings = new wxTextCtrl(m_3DOutboundStatistics, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(25,14)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_crossings->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_crossingsFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_crossings->SetFont(m_crossingsFont);
    #if wxVERSION_NUMBER >= 3000
    m_crossings->SetHint(wxT(""));
    #endif
    
    flexGridSizer2803->Add(m_crossings, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    m_crossings->SetMinSize(wxSize(25,14));
    
    m_staticText1966 = new wxStaticText(m_3DOutboundStatistics, wxID_ANY, _("from"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), 0);
    wxFont m_staticText1966Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText1966->SetFont(m_staticText1966Font);
    
    flexGridSizer2803->Add(m_staticText1966, 0, wxALL, WXC_FROM_DIP(1));
    
    m_passingCount = new wxTextCtrl(m_3DOutboundStatistics, wxID_ANY, wxT("1"), wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(25,14)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_passingCount->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_passingCountFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_passingCount->SetFont(m_passingCountFont);
    m_passingCount->SetToolTip(_("Crossings"));
    #if wxVERSION_NUMBER >= 3000
    m_passingCount->SetHint(wxT(""));
    #endif
    
    flexGridSizer2803->Add(m_passingCount, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(1));
    m_passingCount->SetMinSize(wxSize(25,14));
    
    m_statisticBook = new wxNotebook(m_3DOutboundStatistics, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DOutboundStatistics, wxSize(-1,-1)), wxBK_BOTTOM|wxBK_DEFAULT);
    wxFont m_statisticBookFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_statisticBook->SetFont(m_statisticBookFont);
    m_statisticBook->SetName(wxT("m_statisticBook"));
    wxImageList* m_statisticBook_il = new wxImageList(16, 16);
    m_statisticBook->AssignImageList(m_statisticBook_il);
    
    flexGridSizer4888->Add(m_statisticBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_statisticPageSum = new wxPanel(m_statisticBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statisticBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_statisticPageSumImgIndex;
    m_statisticPageSumImgIndex = m_statisticBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("tools-sum")));
    m_statisticBook->AddPage(m_statisticPageSum, _("Summary"), false, m_statisticPageSumImgIndex);
    
    wxFlexGridSizer* flexGridSizer3499 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3499->SetFlexibleDirection( wxBOTH );
    flexGridSizer3499->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3499->AddGrowableCol(0);
    flexGridSizer3499->AddGrowableRow(0);
    m_statisticPageSum->SetSizer(flexGridSizer3499);
    
    m_statisticSummaryListCtrl = new wxListCtrl(m_statisticPageSum, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statisticPageSum, wxSize(-1,-1)), wxLC_REPORT);
    m_statisticSummaryListCtrl->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer3499->Add(m_statisticSummaryListCtrl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4957 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4957->SetFlexibleDirection( wxBOTH );
    flexGridSizer4957->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4957->AddGrowableCol(0);
    flexGridSizer4957->AddGrowableRow(0);
    
    flexGridSizer3499->Add(flexGridSizer4957, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_checkBoxStatisticUpdate = new wxCheckBox(m_statisticPageSum, wxID_ANY, _("Continuous update"), wxDefaultPosition, wxDLG_UNIT(m_statisticPageSum, wxSize(-1,-1)), 0);
    m_checkBoxStatisticUpdate->SetValue(false);
    
    flexGridSizer4957->Add(m_checkBoxStatisticUpdate, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_statisticPageVecties = new wxPanel(m_statisticBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statisticBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_statisticPageVectiesImgIndex;
    m_statisticPageVectiesImgIndex = m_statisticBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("draw-vector")));
    m_statisticBook->AddPage(m_statisticPageVecties, _("Vecties"), false, m_statisticPageVectiesImgIndex);
    
    wxFlexGridSizer* flexGridSizer4915 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4915->SetFlexibleDirection( wxBOTH );
    flexGridSizer4915->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4915->AddGrowableCol(1);
    flexGridSizer4915->AddGrowableRow(0);
    m_statisticPageVecties->SetSizer(flexGridSizer4915);
    
    wxFlexGridSizer* flexGridSizer4953 = new wxFlexGridSizer(10, 1, 0, 0);
    flexGridSizer4953->SetFlexibleDirection( wxBOTH );
    flexGridSizer4953->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer4915->Add(flexGridSizer4953, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_3D_Trace3 = new wxButton(m_statisticPageVecties, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statisticPageVecties, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Trace3->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_3D_Trace3->SetBitmapMargins(2,2);
    #endif
    m_3D_Trace3->SetToolTip(_("Trace Montion Monitor Data"));
    
    flexGridSizer4953->Add(m_3D_Trace3, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Trace3->SetMinSize(wxSize(24,24));
    
    m_3D_Trace4 = new wxButton(m_statisticPageVecties, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statisticPageVecties, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Trace4->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("edit-copy-7")), wxLEFT);
    m_3D_Trace4->SetBitmapMargins(2,2);
    #endif
    m_3D_Trace4->SetToolTip(_("Trace Montion Monitor Data"));
    
    flexGridSizer4953->Add(m_3D_Trace4, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Trace4->SetMinSize(wxSize(24,24));
    
    m_3D_Trace = new wxButton(m_statisticPageVecties, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statisticPageVecties, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Trace->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("trace")), wxLEFT);
    m_3D_Trace->SetBitmapMargins(2,2);
    #endif
    m_3D_Trace->SetToolTip(_("Trace Montion Monitor Data"));
    
    flexGridSizer4953->Add(m_3D_Trace, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Trace->SetMinSize(wxSize(24,24));
    
    m_vectiesListCtrl = new wxListCtrl(m_statisticPageVecties, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statisticPageVecties, wxSize(-1,-1)), wxLC_REPORT);
    m_vectiesListCtrl->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer4915->Add(m_vectiesListCtrl, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer2311 = new wxFlexGridSizer(30, 1, 0, 0);
    flexGridSizer2311->SetFlexibleDirection( wxBOTH );
    flexGridSizer2311->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2311->AddGrowableCol(0);
    
    flexGridSizer2309->Add(flexGridSizer2311, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_3D_Top = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Top->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewUp")), wxLEFT);
    m_3D_Top->SetBitmapMargins(2,2);
    #endif
    m_3D_Top->SetToolTip(_("Show from Top"));
    
    flexGridSizer2311->Add(m_3D_Top, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Top->SetMinSize(wxSize(24,24));
    
    m_3D_Bottom = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Bottom->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewDown")), wxLEFT);
    m_3D_Bottom->SetBitmapMargins(2,2);
    #endif
    m_3D_Bottom->SetToolTip(_("Show from Bottom"));
    
    flexGridSizer2311->Add(m_3D_Bottom, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Bottom->SetMinSize(wxSize(24,24));
    
    m_3D_Front = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Front->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewFront")), wxLEFT);
    m_3D_Front->SetBitmapMargins(2,2);
    #endif
    m_3D_Front->SetToolTip(_("Show from Front"));
    
    flexGridSizer2311->Add(m_3D_Front, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Front->SetMinSize(wxSize(24,24));
    
    m_3D_Rear = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Rear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewButtom")), wxLEFT);
    m_3D_Rear->SetBitmapMargins(2,2);
    #endif
    m_3D_Rear->SetToolTip(_("Show from Rear"));
    
    flexGridSizer2311->Add(m_3D_Rear, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Rear->SetMinSize(wxSize(24,24));
    
    m_3D_Left = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Left->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewLeft")), wxLEFT);
    m_3D_Left->SetBitmapMargins(2,2);
    #endif
    m_3D_Left->SetToolTip(_("Show from Left"));
    
    flexGridSizer2311->Add(m_3D_Left, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Left->SetMinSize(wxSize(24,24));
    
    m_3D_Right = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Right->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewRight")), wxLEFT);
    m_3D_Right->SetBitmapMargins(2,2);
    #endif
    m_3D_Right->SetToolTip(_("Show from Right"));
    
    flexGridSizer2311->Add(m_3D_Right, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Right->SetMinSize(wxSize(24,24));
    
    m_staticLine3483 = new wxStaticLine(m_3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2311->Add(m_staticLine3483, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_3D_Perspective1 = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), wxBORDER_THEME);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective1->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso1")), wxLEFT);
    m_3D_Perspective1->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective1->SetToolTip(_("Show 3D - ISO1"));
    
    flexGridSizer2311->Add(m_3D_Perspective1, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective1->SetMinSize(wxSize(24,24));
    
    m_3D_Perspective2 = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective2->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso2")), wxLEFT);
    m_3D_Perspective2->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective2->SetToolTip(_("Show 3D - ISO2"));
    
    flexGridSizer2311->Add(m_3D_Perspective2, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective2->SetMinSize(wxSize(24,24));
    
    m_3D_Perspective3 = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective3->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso3")), wxLEFT);
    m_3D_Perspective3->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective3->SetToolTip(_("Show 3D - ISO3"));
    
    flexGridSizer2311->Add(m_3D_Perspective3, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective3->SetMinSize(wxSize(24,24));
    
    m_3D_Perspective4 = new wxButton(m_3DPane, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_3D_Perspective4->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("ViewIso4")), wxLEFT);
    m_3D_Perspective4->SetBitmapMargins(2,2);
    #endif
    m_3D_Perspective4->SetToolTip(_("Show 3D - ISO4"));
    
    flexGridSizer2311->Add(m_3D_Perspective4, 0, wxALL, WXC_FROM_DIP(0));
    m_3D_Perspective4->SetMinSize(wxSize(24,24));
    
    m_staticLine2341 = new wxStaticLine(m_3DPane, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_3DPane, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer2311->Add(m_staticLine2341, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_svgEmuResult = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_svgEmuResult->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    int m_svgEmuResultImgIndex;
    m_svgEmuResultImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("layer-novisible")));
    m_outboundNotebook->AddPage(m_svgEmuResult, _("SVG Output"), false, m_svgEmuResultImgIndex);
    
    wxFlexGridSizer* flexGridSizer585 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer585->SetFlexibleDirection( wxBOTH );
    flexGridSizer585->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer585->AddGrowableCol(1);
    flexGridSizer585->AddGrowableRow(0);
    m_svgEmuResult->SetSizer(flexGridSizer585);
    
    wxFlexGridSizer* flexGridSizer766 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer766->SetFlexibleDirection( wxBOTH );
    flexGridSizer766->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer585->Add(flexGridSizer766, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_svgEmuOpenFileAsSource = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuOpenFileAsSource->SetBitmap(wxArtProvider::GetBitmap(wxART_FILE_OPEN, wxART_BUTTON, wxDefaultSize), wxLEFT);
    m_svgEmuOpenFileAsSource->SetBitmapMargins(2,2);
    #endif
    m_svgEmuOpenFileAsSource->SetToolTip(_("Open SVG extern as Source"));
    
    flexGridSizer766->Add(m_svgEmuOpenFileAsSource, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuOpenFileAsSource->SetMinSize(wxSize(24,24));
    
    m_svgEmuOpenFileAsSvg = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuOpenFileAsSvg->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-gtk")), wxLEFT);
    m_svgEmuOpenFileAsSvg->SetBitmapMargins(2,2);
    #endif
    m_svgEmuOpenFileAsSvg->SetToolTip(_("Open SVG extern as SVG"));
    
    flexGridSizer766->Add(m_svgEmuOpenFileAsSvg, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuOpenFileAsSvg->SetMinSize(wxSize(24,24));
    
    m_svgEmuReload = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuReload->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-debugger_restart")), wxLEFT);
    m_svgEmuReload->SetBitmapMargins(2,2);
    #endif
    m_svgEmuReload->SetToolTip(_("Reload SVG"));
    
    flexGridSizer766->Add(m_svgEmuReload, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuReload->SetMinSize(wxSize(24,24));
    
    m_svgEmuClear = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuClear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_svgEmuClear->SetBitmapMargins(2,2);
    #endif
    m_svgEmuClear->SetToolTip(_("Clear SVG"));
    
    flexGridSizer766->Add(m_svgEmuClear, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuClear->SetMinSize(wxSize(24,24));
    
    flexGridSizer766->Add(0, 10, 1, wxALL, WXC_FROM_DIP(5));
    
    m_svgEmuToggleOrigPath = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuToggleOrigPath->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-find_and_replace")), wxLEFT);
    m_svgEmuToggleOrigPath->SetBitmapMargins(2,2);
    #endif
    m_svgEmuToggleOrigPath->SetToolTip(_("Show/Hide Original Path"));
    
    flexGridSizer766->Add(m_svgEmuToggleOrigPath, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuToggleOrigPath->SetMinSize(wxSize(24,24));
    
    flexGridSizer766->Add(0, 20, 1, wxALL, WXC_FROM_DIP(5));
    
    m_svgEmuZoomHome = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuZoomHome->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-home")), wxLEFT);
    m_svgEmuZoomHome->SetBitmapMargins(2,2);
    #endif
    m_svgEmuZoomHome->SetToolTip(_("Home"));
    
    flexGridSizer766->Add(m_svgEmuZoomHome, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuZoomHome->SetMinSize(wxSize(24,24));
    
    m_svgEmuZoomMinus = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuZoomMinus->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-minus")), wxLEFT);
    m_svgEmuZoomMinus->SetBitmapMargins(2,2);
    #endif
    m_svgEmuZoomMinus->SetToolTip(_("Zoom -"));
    
    flexGridSizer766->Add(m_svgEmuZoomMinus, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuZoomMinus->SetMinSize(wxSize(24,24));
    
    m_svgEmuZoomPlus = new wxButton(m_svgEmuResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_svgEmuZoomPlus->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-plus")), wxLEFT);
    m_svgEmuZoomPlus->SetBitmapMargins(2,2);
    #endif
    m_svgEmuZoomPlus->SetToolTip(_("Zoom +"));
    
    flexGridSizer766->Add(m_svgEmuZoomPlus, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuZoomPlus->SetMinSize(wxSize(24,24));
    
    #if wxUSE_WEBVIEW
    m_svgView = wxWebView::New(m_svgEmuResult, wxID_ANY, _("about:blank"), wxDefaultPosition, wxDLG_UNIT(m_svgEmuResult, wxSize(-1,-1)), wxWebViewBackendDefault, 0);
    m_svgView->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer585->Add(m_svgView, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    #endif // wxUSE_WEBVIEW
    
    m_svgEmuSource = new wxPanel(m_outboundNotebook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_outboundNotebook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_svgEmuSourceImgIndex;
    m_svgEmuSourceImgIndex = m_outboundNotebook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("script-code")));
    m_outboundNotebook->AddPage(m_svgEmuSource, _("SVG Source"), false, m_svgEmuSourceImgIndex);
    
    wxFlexGridSizer* flexGridSizer1891 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1891->SetFlexibleDirection( wxBOTH );
    flexGridSizer1891->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1891->AddGrowableCol(1);
    flexGridSizer1891->AddGrowableRow(0);
    m_svgEmuSource->SetSizer(flexGridSizer1891);
    
    wxFlexGridSizer* flexGridSizer1899 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer1899->SetFlexibleDirection( wxBOTH );
    flexGridSizer1899->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer1891->Add(flexGridSizer1899, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_svgEmuToggleWordWrap = new wxBitmapToggleButton(m_svgEmuSource, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-word_wrap")), wxDefaultPosition, wxDLG_UNIT(m_svgEmuSource, wxSize(24,24)), 0);
    m_svgEmuToggleWordWrap->SetToolTip(_("Toggle Word Wrap Mode"));
    m_svgEmuToggleWordWrap->SetValue(true);
    
    flexGridSizer1899->Add(m_svgEmuToggleWordWrap, 0, wxALL, WXC_FROM_DIP(0));
    m_svgEmuToggleWordWrap->SetMinSize(wxSize(24,24));
    
    m_stcEmuSource = new wxStyledTextCtrl(m_svgEmuSource, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_svgEmuSource, wxSize(-1,-1)), 0);
    // Configure the fold margin
    m_stcEmuSource->SetMarginType     (4, wxSTC_MARGIN_SYMBOL);
    m_stcEmuSource->SetMarginMask     (4, wxSTC_MASK_FOLDERS);
    m_stcEmuSource->SetMarginSensitive(4, true);
    m_stcEmuSource->SetMarginWidth    (4, 0);
    
    // Configure the tracker margin
    m_stcEmuSource->SetMarginWidth(1, 0);
    
    // Configure the symbol margin
    m_stcEmuSource->SetMarginType (2, wxSTC_MARGIN_SYMBOL);
    m_stcEmuSource->SetMarginMask (2, ~(wxSTC_MASK_FOLDERS));
    m_stcEmuSource->SetMarginWidth(2, 0);
    m_stcEmuSource->SetMarginSensitive(2, true);
    
    // Configure the line numbers margin
    int m_stcEmuSource_PixelWidth = 4 + 5 *m_stcEmuSource->TextWidth(wxSTC_STYLE_LINENUMBER, wxT("9"));
    m_stcEmuSource->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_stcEmuSource->SetMarginWidth(0,m_stcEmuSource_PixelWidth);
    
    // Configure the line symbol margin
    m_stcEmuSource->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_stcEmuSource->SetMarginMask(3, 0);
    m_stcEmuSource->SetMarginWidth(3,1);
    // Select the lexer
    m_stcEmuSource->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_stcEmuSource->StyleClearAll();
    m_stcEmuSource->SetWrapMode(0);
    m_stcEmuSource->SetIndentationGuides(0);
    m_stcEmuSource->SetKeyWords(0, wxT(""));
    m_stcEmuSource->SetKeyWords(1, wxT(""));
    m_stcEmuSource->SetKeyWords(2, wxT(""));
    m_stcEmuSource->SetKeyWords(3, wxT(""));
    m_stcEmuSource->SetKeyWords(4, wxT(""));
    
    flexGridSizer1891->Add(m_stcEmuSource, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_monitorTemplatePanel = new wxPanel(m_monitorViewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_monitorViewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_monitorViewBook->AddPage(m_monitorTemplatePanel, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer4359 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4359->SetFlexibleDirection( wxBOTH );
    flexGridSizer4359->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4359->AddGrowableCol(0);
    flexGridSizer4359->AddGrowableRow(0);
    m_monitorTemplatePanel->SetSizer(flexGridSizer4359);
    
    m_monitorTemplatePreviewPlaceHolder = new wxPanel(m_monitorTemplatePanel, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_monitorTemplatePanel, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_monitorTemplatePreviewPlaceHolder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_monitorTemplatePreviewPlaceHolder->SetToolTip(_("only a placeholder"));
    
    flexGridSizer4359->Add(m_monitorTemplatePreviewPlaceHolder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelSpeed = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_panelSpeed, wxAuiPaneInfo().Name(wxT("SpeedView")).Caption(_("Speed")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(1).Position(0).BestSize(80,-1).Fixed().CaptionVisible(true).MaximizeButton(false).CloseButton(true).MinimizeButton(true).PinButton(false));
    
    wxFlexGridSizer* flexGridSizer28011 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer28011->SetFlexibleDirection( wxBOTH );
    flexGridSizer28011->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer28011->AddGrowableCol(0);
    flexGridSizer28011->AddGrowableRow(1);
    m_panelSpeed->SetSizer(flexGridSizer28011);
    
    m_staticText28052 = new wxStaticText(m_panelSpeed, wxID_ANY, _("Current Config"), wxDefaultPosition, wxDLG_UNIT(m_panelSpeed, wxSize(-1,-1)), wxALIGN_CENTRE);
    m_staticText28052->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_staticText28052->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText28052Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText28052->SetFont(m_staticText28052Font);
    
    flexGridSizer28011->Add(m_staticText28052, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_speedView = new CncSpeedView(m_panelSpeed, wxID_ANY);
    flexGridSizer28011->Add(m_speedView, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_scrollWinFile = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_scrollWinFile, wxAuiPaneInfo().Name(wxT("TemplateManager")).Caption(_("Cnc File Manager")).Direction(wxAUI_DOCK_LEFT).Layer(0).Row(0).Position(0).BestSize(160,100).MinSize(100,100).MaxSize(100,100).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    
    wxFlexGridSizer* flexGridSizer1628 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer1628->SetFlexibleDirection( wxBOTH );
    flexGridSizer1628->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1628->AddGrowableCol(0);
    flexGridSizer1628->AddGrowableRow(3);
    m_scrollWinFile->SetSizer(flexGridSizer1628);
    
    m_keepFileManagerPreview = new wxCheckBox(m_scrollWinFile, wxID_ANY, _("Keep Preview"), wxDefaultPosition, wxDLG_UNIT(m_scrollWinFile, wxSize(-1,-1)), 0);
    m_keepFileManagerPreview->SetValue(false);
    wxFont m_keepFileManagerPreviewFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_keepFileManagerPreview->SetFont(m_keepFileManagerPreviewFont);
    m_keepFileManagerPreview->SetToolTip(_("Keep the Template Manger Preview\nafter the control leaved"));
    
    flexGridSizer1628->Add(m_keepFileManagerPreview, 0, wxALL, WXC_FROM_DIP(1));
    
    m_lruList = new wxListCtrl(m_scrollWinFile, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWinFile, wxSize(-1,110)), wxLC_SINGLE_SEL|wxLC_REPORT);
    m_lruList->SetToolTip(_("rwerew"));
    
    flexGridSizer1628->Add(m_lruList, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticLine4345 = new wxStaticLine(m_scrollWinFile, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWinFile, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer1628->Add(m_staticLine4345, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_mainFileViewPlaceholder = new wxPanel(m_scrollWinFile, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWinFile, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainFileViewPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_mainFileViewPlaceholder->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer1628->Add(m_mainFileViewPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_scrollWinLogger = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_scrollWinLogger, wxAuiPaneInfo().Name(wxT("Logger")).Caption(_("CNC Logger")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(1).Position(0).BestSize(100,140).MinSize(100,140).MaxSize(100,140).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    
    wxFlexGridSizer* flexGridSizer869 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer869->SetFlexibleDirection( wxBOTH );
    flexGridSizer869->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer869->AddGrowableCol(0);
    flexGridSizer869->AddGrowableRow(0);
    m_scrollWinLogger->SetSizer(flexGridSizer869);
    
    wxFlexGridSizer* flexGridSizer3158 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3158->SetFlexibleDirection( wxBOTH );
    flexGridSizer3158->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3158->AddGrowableCol(1);
    flexGridSizer3158->AddGrowableRow(0);
    
    flexGridSizer869->Add(flexGridSizer3158, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer1863 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer1863->SetFlexibleDirection( wxBOTH );
    flexGridSizer1863->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3158->Add(flexGridSizer1863, 0, wxALL, WXC_FROM_DIP(0));
    
    m_clearLogger = new wxBitmapButton(m_scrollWinLogger, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_clearLogger->SetToolTip(_("Clear Logger Panel"));
    
    flexGridSizer1863->Add(m_clearLogger, 0, wxALL, WXC_FROM_DIP(1));
    
    m_copyLogger = new wxBitmapButton(m_scrollWinLogger, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("edit-copy-7")), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_copyLogger->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_copyLogger->SetToolTip(_("Copy Logger Panel"));
    
    flexGridSizer1863->Add(m_copyLogger, 0, wxALL, WXC_FROM_DIP(1));
    
    m_showLoggerOnDemand = new wxCheckBox(m_scrollWinLogger, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), 0);
    m_showLoggerOnDemand->SetValue(true);
    m_showLoggerOnDemand->SetToolTip(_("Show on demand"));
    
    flexGridSizer1863->Add(m_showLoggerOnDemand, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer2520 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2520->SetFlexibleDirection( wxBOTH );
    flexGridSizer2520->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2520->AddGrowableCol(0);
    flexGridSizer2520->AddGrowableRow(0);
    
    flexGridSizer3158->Add(flexGridSizer2520, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_logger = new wxTextCtrl(m_scrollWinLogger, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxHSCROLL|wxVSCROLL);
    m_logger->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BACKGROUND));
    m_logger->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    wxFont m_loggerFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_logger->SetFont(m_loggerFont);
    m_logger->SetToolTip(_("Logger Output"));
    
    flexGridSizer2520->Add(m_logger, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_tmpTraceInfo = new wxTextCtrl(m_scrollWinLogger, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_scrollWinLogger, wxSize(-1,24)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxTE_DONTWRAP);
    m_tmpTraceInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_tmpTraceInfo->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_tmpTraceInfoFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_tmpTraceInfo->SetFont(m_tmpTraceInfoFont);
    m_tmpTraceInfo->SetToolTip(_("Trace Information"));
    
    flexGridSizer869->Add(m_tmpTraceInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_tmpTraceInfo->SetMinSize(wxSize(-1,24));
    
    m_statusBar = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_statusBar->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_GRAYTEXT));
    
    m_auimgrMain->AddPane(m_statusBar, wxAuiPaneInfo().Name(wxT("StatusBar")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(0).Position(0).BestSize(100,26).MinSize(100,26).MaxSize(100,26).Fixed().CaptionVisible(false).MaximizeButton(false).CloseButton(false).MinimizeButton(false).PinButton(false));
    
    wxFlexGridSizer* flexGridSizer436 = new wxFlexGridSizer(1, 36, 0, 0);
    flexGridSizer436->SetFlexibleDirection( wxBOTH );
    flexGridSizer436->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer436->AddGrowableCol(2);
    flexGridSizer436->AddGrowableCol(4);
    flexGridSizer436->AddGrowableRow(1);
    m_statusBar->SetSizer(flexGridSizer436);
    
    wxFlexGridSizer* flexGridSizer3696 = new wxFlexGridSizer(1, 4, 0, 0);
    flexGridSizer3696->SetFlexibleDirection( wxBOTH );
    flexGridSizer3696->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer436->Add(flexGridSizer3696, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText395 = new wxStaticText(m_statusBar, wxID_ANY, _("Total time consumed:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    m_staticText395->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    
    flexGridSizer3696->Add(m_staticText395, 0, wxALL, WXC_FROM_DIP(3));
    m_staticText395->SetMinSize(wxSize(-1,18));
    
    m_cmdDuration = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("00:00:00.000"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(70,18)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_cmdDuration->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_cmdDuration->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    #if wxVERSION_NUMBER >= 3000
    m_cmdDuration->SetHint(wxT(""));
    #endif
    
    flexGridSizer3696->Add(m_cmdDuration, 0, wxALL, WXC_FROM_DIP(3));
    m_cmdDuration->SetMinSize(wxSize(70,18));
    
    m_staticLine602 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine602, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3697 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3697->SetFlexibleDirection( wxBOTH );
    flexGridSizer3697->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3697->AddGrowableCol(0);
    flexGridSizer3697->AddGrowableRow(0);
    
    flexGridSizer436->Add(flexGridSizer3697, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_inputFileName = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("<Template Name>"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(150,-1)), wxTE_READONLY|wxTE_CENTRE|wxBORDER_NONE);
    m_inputFileName->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_inputFileName->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    #if wxVERSION_NUMBER >= 3000
    m_inputFileName->SetHint(wxT(""));
    #endif
    
    flexGridSizer3697->Add(m_inputFileName, 0, wxALL|wxEXPAND, WXC_FROM_DIP(3));
    
    m_staticLine6801 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine6801, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3698 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3698->SetFlexibleDirection( wxBOTH );
    flexGridSizer3698->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3698->AddGrowableCol(1);
    flexGridSizer3698->AddGrowableRow(0);
    
    flexGridSizer436->Add(flexGridSizer3698, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_svgParseMode = new wxStaticText(m_statusBar, wxID_ANY, _("pM"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,-1)), wxALIGN_CENTRE);
    m_svgParseMode->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_svgParseMode->SetToolTip(_("SVG Parse Mode"));
    
    flexGridSizer3698->Add(m_svgParseMode, 0, wxALL, WXC_FROM_DIP(3));
    m_svgParseMode->SetMinSize(wxSize(50,-1));
    
    m_activityPanel = new wxPanel(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(80,16)), wxTAB_TRAVERSAL);
    m_activityPanel->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_activityPanel->SetToolTip(_("Activity Control"));
    
    flexGridSizer3698->Add(m_activityPanel, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_activityPanel->SetMinSize(wxSize(80,16));
    
    m_staticLine680 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine680, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3694 = new wxFlexGridSizer(1, 12, 0, 0);
    flexGridSizer3694->SetFlexibleDirection( wxBOTH );
    flexGridSizer3694->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer436->Add(flexGridSizer3694, 0, wxALL, WXC_FROM_DIP(2));
    
    LableF = new wxStaticText(m_statusBar, wxID_ANY, _("F:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    LableF->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    
    flexGridSizer3694->Add(LableF, 0, wxALL, WXC_FROM_DIP(3));
    LableF->SetMinSize(wxSize(-1,18));
    
    m_feedSpeed = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_feedSpeed->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_feedSpeed->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_feedSpeed->SetToolTip(_("Controller Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_feedSpeed->SetHint(wxT(""));
    #endif
    
    flexGridSizer3694->Add(m_feedSpeed, 0, wxALL, WXC_FROM_DIP(3));
    m_feedSpeed->SetMinSize(wxSize(50,20));
    
    m_refPosTrafficLight = new wxStaticBitmap(m_statusBar, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(26,-1)), 0 );
    
    flexGridSizer3694->Add(m_refPosTrafficLight, 0, wxALL, WXC_FROM_DIP(3));
    m_refPosTrafficLight->SetMinSize(wxSize(26,-1));
    
    LableX = new wxStaticText(m_statusBar, wxID_ANY, _("X:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    LableX->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    
    flexGridSizer3694->Add(LableX, 0, wxALL, WXC_FROM_DIP(3));
    LableX->SetMinSize(wxSize(-1,18));
    
    m_xAxis = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_xAxis->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_xAxis->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_xAxis->SetToolTip(_("Application Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_xAxis->SetHint(wxT(""));
    #endif
    
    flexGridSizer3694->Add(m_xAxis, 0, wxALL, WXC_FROM_DIP(3));
    m_xAxis->SetMinSize(wxSize(50,20));
    
    m_xAxisCtl = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_xAxisCtl->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_xAxisCtl->SetForegroundColour(wxColour(wxT("rgb(128,128,255)")));
    m_xAxisCtl->SetToolTip(_("Controller Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_xAxisCtl->SetHint(wxT(""));
    #endif
    
    flexGridSizer3694->Add(m_xAxisCtl, 0, wxALL, WXC_FROM_DIP(3));
    m_xAxisCtl->SetMinSize(wxSize(50,20));
    
    LabelY = new wxStaticText(m_statusBar, wxID_ANY, _("Y:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    LabelY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    
    flexGridSizer3694->Add(LabelY, 0, wxALL, WXC_FROM_DIP(3));
    LabelY->SetMinSize(wxSize(-1,18));
    
    m_yAxis = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_yAxis->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_yAxis->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    m_yAxis->SetToolTip(_("Application Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_yAxis->SetHint(wxT(""));
    #endif
    
    flexGridSizer3694->Add(m_yAxis, 0, wxALL, WXC_FROM_DIP(3));
    m_yAxis->SetMinSize(wxSize(50,20));
    
    m_yAxisCtl = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_yAxisCtl->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_yAxisCtl->SetForegroundColour(wxColour(wxT("rgb(128,128,255)")));
    m_yAxisCtl->SetToolTip(_("Controller Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_yAxisCtl->SetHint(wxT(""));
    #endif
    
    flexGridSizer3694->Add(m_yAxisCtl, 0, wxALL, WXC_FROM_DIP(3));
    m_yAxisCtl->SetMinSize(wxSize(50,20));
    
    LableZ = new wxStaticText(m_statusBar, wxID_ANY, _("Z:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,18)), 0);
    LableZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_ACTIVEBORDER));
    
    flexGridSizer3694->Add(LableZ, 0, wxALL, WXC_FROM_DIP(3));
    LableZ->SetMinSize(wxSize(-1,18));
    
    m_zAxis = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_zAxis->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_zAxis->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    m_zAxis->SetToolTip(_("Application Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_zAxis->SetHint(wxT(""));
    #endif
    
    flexGridSizer3694->Add(m_zAxis, 0, wxALL, WXC_FROM_DIP(3));
    m_zAxis->SetMinSize(wxSize(50,20));
    
    m_zAxisCtl = new wxTextCtrl(m_statusBar, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(50,20)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_zAxisCtl->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DDKSHADOW));
    m_zAxisCtl->SetForegroundColour(wxColour(wxT("rgb(128,128,255)")));
    m_zAxisCtl->SetToolTip(_("Controller Pos"));
    #if wxVERSION_NUMBER >= 3000
    m_zAxisCtl->SetHint(wxT(""));
    #endif
    
    flexGridSizer3694->Add(m_zAxisCtl, 0, wxALL, WXC_FROM_DIP(3));
    m_zAxisCtl->SetMinSize(wxSize(50,20));
    
    wxArrayString m_unitArr;
    m_unitArr.Add(wxT("mm"));
    m_unitArr.Add(wxT("steps"));
    m_unit = new wxComboBox(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,19)), m_unitArr, wxCB_SORT|wxCB_READONLY);
    m_unit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    wxFont m_unitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_unit->SetFont(m_unitFont);
    m_unit->SetToolTip(_("Select the Display Unit"));
    m_unit->SetSelection(0);
    
    flexGridSizer436->Add(m_unit, 0, wxALL, WXC_FROM_DIP(3));
    m_unit->SetMinSize(wxSize(-1,19));
    
    m_staticLine60234 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine60234, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3695 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer3695->SetFlexibleDirection( wxBOTH );
    flexGridSizer3695->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer436->Add(flexGridSizer3695, 0, wxALL, WXC_FROM_DIP(2));
    
    m_staticText1196 = new wxStaticText(m_statusBar, wxID_ANY, _("End Switches:"), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0);
    m_staticText1196->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHTTEXT));
    
    flexGridSizer3695->Add(m_staticText1196, 0, wxALL, WXC_FROM_DIP(3));
    
    m_xMinLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_xMinLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_xMinLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_xMinLimit->SetFont(m_xMinLimitFont);
    m_xMinLimit->SetToolTip(_("X Min Limit"));
    
    flexGridSizer3695->Add(m_xMinLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_xMinLimit->SetMinSize(wxSize(10,16));
    
    m_xMaxLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_xMaxLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_xMaxLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_xMaxLimit->SetFont(m_xMaxLimitFont);
    m_xMaxLimit->SetToolTip(_("X Max Limit"));
    
    flexGridSizer3695->Add(m_xMaxLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_xMaxLimit->SetMinSize(wxSize(10,16));
    
    m_yMinLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_yMinLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_yMinLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_yMinLimit->SetFont(m_yMinLimitFont);
    m_yMinLimit->SetToolTip(_("Y Min Limit"));
    
    flexGridSizer3695->Add(m_yMinLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_yMinLimit->SetMinSize(wxSize(10,16));
    
    m_yMaxLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_yMaxLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_yMaxLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_yMaxLimit->SetFont(m_yMaxLimitFont);
    m_yMaxLimit->SetToolTip(_("Y Max Limit"));
    
    flexGridSizer3695->Add(m_yMaxLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_yMaxLimit->SetMinSize(wxSize(10,16));
    
    m_zMinLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_zMinLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_zMinLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_zMinLimit->SetFont(m_zMinLimitFont);
    m_zMinLimit->SetToolTip(_("Z Min Limit"));
    
    flexGridSizer3695->Add(m_zMinLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_zMinLimit->SetMinSize(wxSize(10,16));
    
    m_zMaxLimit = new wxStaticText(m_statusBar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(10,16)), wxALIGN_CENTRE);
    m_zMaxLimit->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_zMaxLimitFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI Semibold"));
    m_zMaxLimit->SetFont(m_zMaxLimitFont);
    m_zMaxLimit->SetToolTip(_("Z Max Limit"));
    
    flexGridSizer3695->Add(m_zMaxLimit, 0, wxALL, WXC_FROM_DIP(3));
    m_zMaxLimit->SetMinSize(wxSize(10,16));
    
    m_staticLine602341 = new wxStaticLine(m_statusBar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer436->Add(m_staticLine602341, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_updateManagerUpdate = new wxStaticBitmap(m_statusBar, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("bookmark-2")), wxDefaultPosition, wxDLG_UNIT(m_statusBar, wxSize(-1,-1)), 0 );
    m_updateManagerUpdate->SetToolTip(_("Update Manager Thread Heartbeat"));
    
    flexGridSizer436->Add(m_updateManagerUpdate, 0, wxALL, WXC_FROM_DIP(5));
    
    m_svgUnitCalulator = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    wxFont m_svgUnitCalulatorFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_svgUnitCalulator->SetFont(m_svgUnitCalulatorFont);
    
    m_auimgrMain->AddPane(m_svgUnitCalulator, wxAuiPaneInfo().Name(wxT("UnitCalculator")).Direction(wxAUI_DOCK_TOP).Layer(0).Row(1).Position(0).BestSize(100,24).MinSize(100,24).MaxSize(100,24).Fixed().CaptionVisible(false).MaximizeButton(false).CloseButton(true).MinimizeButton(false).PinButton(true));
    
    wxFlexGridSizer* flexGridSizer3251 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer3251->SetFlexibleDirection( wxBOTH );
    flexGridSizer3251->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3251->AddGrowableCol(4);
    flexGridSizer3251->AddGrowableRow(0);
    m_svgUnitCalulator->SetSizer(flexGridSizer3251);
    
    m_staticText3261 = new wxStaticText(m_svgUnitCalulator, wxID_ANY, _("From"), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,-1)), 0);
    m_staticText3261->SetToolTip(_("SVG Unit Calculator"));
    
    flexGridSizer3251->Add(m_staticText3261, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbUCUnitFromArr;
    m_cbUCUnitFromArr.Add(wxT("px"));
    m_cbUCUnitFromArr.Add(wxT("pc"));
    m_cbUCUnitFromArr.Add(wxT("pt"));
    m_cbUCUnitFromArr.Add(wxT("mm"));
    m_cbUCUnitFromArr.Add(wxT("cm"));
    m_cbUCUnitFromArr.Add(wxT("m"));
    m_cbUCUnitFromArr.Add(wxT("in"));
    m_cbUCUnitFromArr.Add(wxT("ft"));
    m_cbUCUnitFrom = new wxComboBox(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,20)), m_cbUCUnitFromArr, wxCB_READONLY);
    wxFont m_cbUCUnitFromFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbUCUnitFrom->SetFont(m_cbUCUnitFromFont);
    m_cbUCUnitFrom->SetToolTip(_("SVG Unit Calculator - Unit from"));
    m_cbUCUnitFrom->SetSelection(0);
    
    flexGridSizer3251->Add(m_cbUCUnitFrom, 0, wxALL, WXC_FROM_DIP(2));
    m_cbUCUnitFrom->SetMinSize(wxSize(-1,20));
    
    m_staticText3259 = new wxStaticText(m_svgUnitCalulator, wxID_ANY, _("to"), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,-1)), 0);
    wxFont m_staticText3259Font(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText3259->SetFont(m_staticText3259Font);
    m_staticText3259->SetToolTip(_("SVG Unit Calculator"));
    
    flexGridSizer3251->Add(m_staticText3259, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbUCUnitToArr;
    m_cbUCUnitToArr.Add(wxT("px"));
    m_cbUCUnitToArr.Add(wxT("pc"));
    m_cbUCUnitToArr.Add(wxT("pt"));
    m_cbUCUnitToArr.Add(wxT("mm"));
    m_cbUCUnitToArr.Add(wxT("cm"));
    m_cbUCUnitToArr.Add(wxT("m"));
    m_cbUCUnitToArr.Add(wxT("in"));
    m_cbUCUnitToArr.Add(wxT("ft"));
    m_cbUCUnitTo = new wxComboBox(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,20)), m_cbUCUnitToArr, wxCB_READONLY);
    wxFont m_cbUCUnitToFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbUCUnitTo->SetFont(m_cbUCUnitToFont);
    m_cbUCUnitTo->SetToolTip(_("SVG Unit Calculator - Unit To"));
    m_cbUCUnitTo->SetSelection(3);
    
    flexGridSizer3251->Add(m_cbUCUnitTo, 0, wxALL, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer3266 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3266->SetFlexibleDirection( wxBOTH );
    flexGridSizer3266->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3266->AddGrowableCol(0);
    flexGridSizer3266->AddGrowableCol(1);
    
    flexGridSizer3251->Add(flexGridSizer3266, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_cbUCValueFrom = new wxTextCtrl(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,20)), 0);
    wxFont m_cbUCValueFromFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbUCValueFrom->SetFont(m_cbUCValueFromFont);
    m_cbUCValueFrom->SetToolTip(_("SVG Unit Calculator - Value From"));
    #if wxVERSION_NUMBER >= 3000
    m_cbUCValueFrom->SetHint(wxT(""));
    #endif
    
    flexGridSizer3266->Add(m_cbUCValueFrom, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_cbUCValueFrom->SetMinSize(wxSize(-1,20));
    
    m_cbUCValueTo = new wxTextCtrl(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(-1,-1)), wxTE_READONLY);
    wxFont m_cbUCValueToFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbUCValueTo->SetFont(m_cbUCValueToFont);
    m_cbUCValueTo->SetToolTip(_("SVG Unit Calculator - Value to"));
    #if wxVERSION_NUMBER >= 3000
    m_cbUCValueTo->SetHint(wxT(""));
    #endif
    
    flexGridSizer3266->Add(m_cbUCValueTo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_btUCClose = new wxButton(m_svgUnitCalulator, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_svgUnitCalulator, wxSize(20,20)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btUCClose->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("window-close-3")), wxLEFT);
    m_btUCClose->SetBitmapMargins(2,2);
    #endif
    m_btUCClose->SetToolTip(_("SVG Unit Calculator - Close"));
    
    flexGridSizer3251->Add(m_btUCClose, 0, wxALL, WXC_FROM_DIP(2));
    m_btUCClose->SetMinSize(wxSize(20,20));
    
    m_serialSpyView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_serialSpyView, wxAuiPaneInfo().Name(wxT("SerialSpy")).Caption(_("CNC Serial Spy")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(1).Position(0).BestSize(100,100).MinSize(100,100).MaxSize(100,100).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    
    wxFlexGridSizer* flexGridSizer27261 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer27261->SetFlexibleDirection( wxBOTH );
    flexGridSizer27261->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer27261->AddGrowableCol(0);
    flexGridSizer27261->AddGrowableRow(1);
    m_serialSpyView->SetSizer(flexGridSizer27261);
    
    wxFlexGridSizer* flexGridSizer27302 = new wxFlexGridSizer(1, 10, 0, 0);
    flexGridSizer27302->SetFlexibleDirection( wxBOTH );
    flexGridSizer27302->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer27261->Add(flexGridSizer27302, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_enableSerialSpy = new wxButton(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_enableSerialSpy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-connected")), wxLEFT);
    m_enableSerialSpy->SetBitmapMargins(2,2);
    #endif
    m_enableSerialSpy->SetToolTip(_("Enable Serial Spy"));
    
    flexGridSizer27302->Add(m_enableSerialSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_enableSerialSpy->SetMinSize(wxSize(24,24));
    
    m_MarkSerialSpy = new wxButton(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_MarkSerialSpy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("book-add")), wxLEFT);
    m_MarkSerialSpy->SetBitmapMargins(2,2);
    #endif
    m_MarkSerialSpy->SetToolTip(_("Add a Marker"));
    
    flexGridSizer27302->Add(m_MarkSerialSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_MarkSerialSpy->SetMinSize(wxSize(24,24));
    
    m_clearSerialSpy = new wxButton(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_clearSerialSpy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_clearSerialSpy->SetBitmapMargins(2,2);
    #endif
    m_clearSerialSpy->SetToolTip(_("Clear the Spy Trace"));
    
    flexGridSizer27302->Add(m_clearSerialSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_clearSerialSpy->SetMinSize(wxSize(24,24));
    
    wxArrayString m_cbSerialSpyModeArr;
    m_cbSerialSpyModeArr.Add(wxT("Spy - In"));
    m_cbSerialSpyModeArr.Add(wxT("Spy - Out"));
    m_cbSerialSpyModeArr.Add(wxT("Spy - In/Out"));
    m_cbSerialSpyMode = new wxComboBox(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(-1,24)), m_cbSerialSpyModeArr, wxCB_READONLY);
    wxFont m_cbSerialSpyModeFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbSerialSpyMode->SetFont(m_cbSerialSpyModeFont);
    m_cbSerialSpyMode->SetSelection(2);
    
    flexGridSizer27302->Add(m_cbSerialSpyMode, 0, wxALL, WXC_FROM_DIP(1));
    m_cbSerialSpyMode->SetMinSize(wxSize(-1,24));
    
    wxFlexGridSizer* flexGridSizer4704 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4704->SetFlexibleDirection( wxBOTH );
    flexGridSizer4704->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4704->AddGrowableCol(0);
    flexGridSizer4704->AddGrowableRow(0);
    
    flexGridSizer27261->Add(flexGridSizer4704, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer3833 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3833->SetFlexibleDirection( wxBOTH );
    flexGridSizer3833->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3833->AddGrowableCol(0);
    flexGridSizer3833->AddGrowableRow(0);
    
    flexGridSizer4704->Add(flexGridSizer3833, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitter4728 = new wxSplitterWindow(m_serialSpyView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(-1,-1)), wxSP_3D);
    m_splitter4728->SetSashGravity(0.7);
    m_splitter4728->SetMinimumPaneSize(10);
    
    flexGridSizer3833->Add(m_splitter4728, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitterPage4732 = new wxPanel(m_splitter4728, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter4728, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer4740 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4740->SetFlexibleDirection( wxBOTH );
    flexGridSizer4740->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4740->AddGrowableCol(0);
    flexGridSizer4740->AddGrowableRow(0);
    m_splitterPage4732->SetSizer(flexGridSizer4740);
    
    m_serialSpy = new wxTextCtrl(m_splitterPage4732, wxID_ANY, wxT("Only a placeholder;Dont install any events similar the drawPane3D"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage4732, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxALWAYS_SHOW_SB|wxHSCROLL|wxVSCROLL);
    wxFont m_serialSpyFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_serialSpy->SetFont(m_serialSpyFont);
    
    flexGridSizer4740->Add(m_serialSpy, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_splitterPage4736 = new wxPanel(m_splitter4728, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter4728, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitter4728->SplitHorizontally(m_splitterPage4732, m_splitterPage4736, 0);
    
    wxFlexGridSizer* flexGridSizer4738 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4738->SetFlexibleDirection( wxBOTH );
    flexGridSizer4738->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4738->AddGrowableCol(0);
    flexGridSizer4738->AddGrowableRow(0);
    m_splitterPage4736->SetSizer(flexGridSizer4738);
    
    m_serialSpyDetails = new wxTextCtrl(m_splitterPage4736, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage4736, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxALWAYS_SHOW_SB|wxHSCROLL|wxVSCROLL);
    m_serialSpyDetails->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_serialSpyDetails->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_serialSpyDetailsFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_serialSpyDetails->SetFont(m_serialSpyDetailsFont);
    
    flexGridSizer4738->Add(m_serialSpyDetails, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer4706 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer4706->SetFlexibleDirection( wxBOTH );
    flexGridSizer4706->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer4704->Add(flexGridSizer4706, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_clearSerialSpyOnConnect = new wxCheckBox(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(-1,-1)), 0);
    m_clearSerialSpyOnConnect->SetValue(true);
    m_clearSerialSpyOnConnect->SetToolTip(_("Clear on Connect"));
    
    flexGridSizer4706->Add(m_clearSerialSpyOnConnect, 0, wxALL, WXC_FROM_DIP(0));
    
    m_clearSerialSpyBeforNextRun = new wxCheckBox(m_serialSpyView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_serialSpyView, wxSize(-1,-1)), 0);
    m_clearSerialSpyBeforNextRun->SetValue(true);
    m_clearSerialSpyBeforNextRun->SetToolTip(_("Clear before next Run"));
    
    flexGridSizer4706->Add(m_clearSerialSpyBeforNextRun, 0, wxALL, WXC_FROM_DIP(0));
    
    m_debuggerView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_debuggerView, wxAuiPaneInfo().Name(wxT("Debugger")).Caption(_("CNC Debugger")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(1).Position(0).BestSize(100,100).MinSize(100,100).MaxSize(100,100).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    
    wxFlexGridSizer* flexGridSizer4502 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer4502->SetFlexibleDirection( wxBOTH );
    flexGridSizer4502->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4502->AddGrowableCol(0);
    flexGridSizer4502->AddGrowableRow(0);
    m_debuggerView->SetSizer(flexGridSizer4502);
    
    wxArrayString m_debuggerPropertyManagerGridArr;
    wxUnusedVar(m_debuggerPropertyManagerGridArr);
    wxArrayInt m_debuggerPropertyManagerGridIntArr;
    wxUnusedVar(m_debuggerPropertyManagerGridIntArr);
    m_debuggerPropertyManagerGrid = new wxPropertyGridManager(m_debuggerView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_debuggerView, wxSize(-1,-1)), wxPG_TOOLBAR|wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    
    flexGridSizer4502->Add(m_debuggerPropertyManagerGrid, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_positionMonitorView = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(284,140)), wxTAB_TRAVERSAL);
    
    m_auimgrMain->AddPane(m_positionMonitorView, wxAuiPaneInfo().Name(wxT("PositionMonitor")).Caption(_("CNC Position Monitor")).Direction(wxAUI_DOCK_BOTTOM).Layer(0).Row(1).Position(0).BestSize(384,40).MinSize(384,40).MaxSize(384,40).CaptionVisible(true).MaximizeButton(true).CloseButton(true).MinimizeButton(true).PinButton(true));
    m_auimgrMain->Update();
    
    wxFlexGridSizer* flexGridSizer4480 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer4480->SetFlexibleDirection( wxBOTH );
    flexGridSizer4480->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4480->AddGrowableCol(0);
    flexGridSizer4480->AddGrowableRow(1);
    m_positionMonitorView->SetSizer(flexGridSizer4480);
    
    wxFlexGridSizer* flexGridSizer4485 = new wxFlexGridSizer(1, 6, 0, 0);
    flexGridSizer4485->SetFlexibleDirection( wxBOTH );
    flexGridSizer4485->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4485->AddGrowableCol(5);
    flexGridSizer4485->AddGrowableRow(0);
    
    flexGridSizer4480->Add(flexGridSizer4485, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btTogglePosSpy = new wxBitmapToggleButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-connected")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), 0);
    m_btTogglePosSpy->SetToolTip(_("Disable Position Spy"));
    m_btTogglePosSpy->SetValue(true);
    
    flexGridSizer4485->Add(m_btTogglePosSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_btTogglePosSpy->SetMinSize(wxSize(24,24));
    
    m_btCopyPosSpy = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("edit-copy-7")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_btCopyPosSpy->SetToolTip(_("Copy PositionSpy"));
    
    flexGridSizer4485->Add(m_btCopyPosSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_btCopyPosSpy->SetMinSize(wxSize(24,24));
    
    m_btSearchPosSpy = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("system-search-2")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btSearchPosSpy->SetToolTip(_("Search Reference"));
    
    flexGridSizer4485->Add(m_btSearchPosSpy, 0, wxALL, WXC_FROM_DIP(0));
    
    m_btClearPositionSpy = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_btClearPositionSpy->SetToolTip(_("Clear Position Spy"));
    
    flexGridSizer4485->Add(m_btClearPositionSpy, 0, wxALL, WXC_FROM_DIP(0));
    m_btClearPositionSpy->SetMinSize(wxSize(24,24));
    
    wxArrayString m_cbContentPosSpyArr;
    m_cbContentPosSpyArr.Add(wxT("Content - App Pos"));
    m_cbContentPosSpyArr.Add(wxT("Content - Ctl Pos"));
    m_cbContentPosSpy = new wxComboBox(m_positionMonitorView, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,-1)), m_cbContentPosSpyArr, wxCB_READONLY);
    wxFont m_cbContentPosSpyFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_cbContentPosSpy->SetFont(m_cbContentPosSpyFont);
    m_cbContentPosSpy->SetSelection(1);
    
    flexGridSizer4485->Add(m_cbContentPosSpy, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer4524 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4524->SetFlexibleDirection( wxBOTH );
    flexGridSizer4524->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4524->AddGrowableCol(0);
    flexGridSizer4524->AddGrowableRow(0);
    
    flexGridSizer4485->Add(flexGridSizer4524, 1, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4660 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4660->SetFlexibleDirection( wxBOTH );
    flexGridSizer4660->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4660->AddGrowableCol(0);
    flexGridSizer4660->AddGrowableRow(0);
    flexGridSizer4660->AddGrowableRow(1);
    
    flexGridSizer4524->Add(flexGridSizer4660, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_staticText4526 = new wxStaticText(m_positionMonitorView, wxID_ANY, _("(lightly async)"), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,12)), 0);
    wxFont m_staticText4526Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_ITALIC, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText4526->SetFont(m_staticText4526Font);
    
    flexGridSizer4660->Add(m_staticText4526, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    m_staticText4526->SetMinSize(wxSize(-1,12));
    
    m_positionSpyCount = new wxTextCtrl(m_positionMonitorView, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,12)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_positionSpyCount->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_MENU));
    m_positionSpyCount->SetForegroundColour(wxColour(wxT("rgb(0,0,128)")));
    wxFont m_positionSpyCountFont(7, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Courier New"));
    m_positionSpyCount->SetFont(m_positionSpyCountFont);
    #if wxVERSION_NUMBER >= 3000
    m_positionSpyCount->SetHint(wxT(""));
    #endif
    
    flexGridSizer4660->Add(m_positionSpyCount, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_positionSpyCount->SetMinSize(wxSize(-1,12));
    
    flexGridSizer4524->Add(3, 0, 1, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer4714 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4714->SetFlexibleDirection( wxBOTH );
    flexGridSizer4714->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4714->AddGrowableCol(0);
    flexGridSizer4714->AddGrowableRow(0);
    
    flexGridSizer4480->Add(flexGridSizer4714, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer4711 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4711->SetFlexibleDirection( wxBOTH );
    flexGridSizer4711->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4711->AddGrowableCol(0);
    flexGridSizer4711->AddGrowableRow(0);
    
    flexGridSizer4714->Add(flexGridSizer4711, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_positionSpy = new wxListCtrl(m_positionMonitorView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,-1)), 0);
    m_positionSpy->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer4711->Add(m_positionSpy, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_speedPanel = new wxPanel(m_positionMonitorView, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(-1,5)), wxTAB_TRAVERSAL);
    m_speedPanel->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_speedPanel->SetToolTip(_("Feed Speed"));
    
    flexGridSizer4711->Add(m_speedPanel, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_speedPanel->SetMinSize(wxSize(-1,5));
    
    wxFlexGridSizer* flexGridSizer4716 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer4716->SetFlexibleDirection( wxBOTH );
    flexGridSizer4716->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4716->AddGrowableCol(1);
    
    flexGridSizer4714->Add(flexGridSizer4716, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_bmpButton47181 = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-first-view")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_bmpButton47181->SetToolTip(_("Goto - First Ref"));
    
    flexGridSizer4716->Add(m_bmpButton47181, 0, wxALL, WXC_FROM_DIP(0));
    m_bmpButton47181->SetMinSize(wxSize(24,24));
    
    m_bmpButton4718 = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-last-view")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_bmpButton4718->SetToolTip(_("Goto - First Ref"));
    
    flexGridSizer4716->Add(m_bmpButton4718, 0, wxALL, WXC_FROM_DIP(0));
    m_bmpButton4718->SetMinSize(wxSize(24,24));
    
    m_bmpButton47182 = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-up-7")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_bmpButton47182->SetToolTip(_("Goto - Prev Ref"));
    
    flexGridSizer4716->Add(m_bmpButton47182, 0, wxALL, WXC_FROM_DIP(0));
    m_bmpButton47182->SetMinSize(wxSize(24,24));
    
    m_bmpButton47183 = new wxBitmapButton(m_positionMonitorView, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-down-7")), wxDefaultPosition, wxDLG_UNIT(m_positionMonitorView, wxSize(24,24)), wxBU_AUTODRAW);
    m_bmpButton47183->SetToolTip(_("Goto - Next Ref"));
    
    flexGridSizer4716->Add(m_bmpButton47183, 0, wxALL, WXC_FROM_DIP(0));
    m_bmpButton47183->SetMinSize(wxSize(24,24));
    
    m_menuBar = new wxMenuBar(wxMB_DOCKABLE);
    this->SetMenuBar(m_menuBar);
    
    m_menuFile = new wxMenu();
    m_menuBar->Append(m_menuFile, _("&File"));
    
    m_miNewTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("New Template"), wxT(""), wxITEM_NORMAL);
    m_miNewTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-new-3")));
    m_menuFile->Append(m_miNewTemplate);
    
    m_miOpenTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("Open Template"), wxT(""), wxITEM_NORMAL);
    m_miOpenTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-open-5")));
    m_menuFile->Append(m_miOpenTemplate);
    
    m_miReloadTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("Reload Template"), wxT(""), wxITEM_NORMAL);
    m_miReloadTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_reload")));
    m_menuFile->Append(m_miReloadTemplate);
    
    m_miSaveTemplate = new wxMenuItem(m_menuFile, wxID_ANY, _("Save Template"), wxT(""), wxITEM_NORMAL);
    m_miSaveTemplate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-save-6")));
    m_menuFile->Append(m_miSaveTemplate);
    
    m_miSaveTemplateAs = new wxMenuItem(m_menuFile, wxID_ANY, _("Save Template as"), wxT(""), wxITEM_NORMAL);
    m_miSaveTemplateAs->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-save-as (2)")));
    m_menuFile->Append(m_miSaveTemplateAs);
    
    m_miSaveEmuOutput = new wxMenuItem(m_menuFile, wxID_ANY, _("Save Emulator Output as Template"), wxT(""), wxITEM_NORMAL);
    m_miSaveEmuOutput->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-export")));
    m_menuFile->Append(m_miSaveEmuOutput);
    
    m_menuFile->AppendSeparator();
    
    m_miExit = new wxMenuItem(m_menuFile, wxID_ANY, _("Exit"), wxT(""), wxITEM_NORMAL);
    m_miExit->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("application-exit-4")));
    m_menuFile->Append(m_miExit);
    
    m_menuView = new wxMenu();
    m_menuBar->Append(m_menuView, _("View"));
    
    m_miToolbar = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Toolbar"), wxT(""), wxITEM_CHECK);
    m_miToolbar->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miToolbar);
    
    m_miViewStatusbar = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Statusbar"), wxT(""), wxITEM_CHECK);
    m_miViewStatusbar->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miViewStatusbar);
    
    m_miViewTemplateManager = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Template Manager"), wxT(""), wxITEM_CHECK);
    m_miViewTemplateManager->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miViewTemplateManager);
    
    m_miViewMainView = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Source View"), wxT(""), wxITEM_CHECK);
    m_miViewMainView->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miViewMainView);
    
    m_miViewMonitor = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Motion Monitor"), wxT(""), wxITEM_CHECK);
    m_miViewMonitor->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miViewMonitor);
    
    m_miViewZAxis = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Z Axis"), wxT(""), wxITEM_CHECK);
    m_miViewZAxis->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miViewZAxis);
    
    m_miViewPosMonitor = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Position Monitor"), wxT(""), wxITEM_CHECK);
    m_miViewPosMonitor->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miViewPosMonitor);
    
    m_miViewDebugger = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Debugger"), wxT(""), wxITEM_CHECK);
    m_miViewDebugger->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miViewDebugger);
    
    m_miViewSpy = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Serial Spy"), wxT(""), wxITEM_CHECK);
    m_miViewSpy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miViewSpy);
    
    m_miViewLogger = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Logger"), wxT(""), wxITEM_CHECK);
    m_miViewLogger->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miViewLogger);
    
    m_miViewSpeed = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Speed View"), wxT(""), wxITEM_CHECK);
    m_miViewSpeed->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miViewSpeed);
    
    m_miViewUnitCalculator = new wxMenuItem(m_menuView, wxID_ANY, _("CNC Unit Caluclator"), wxT(""), wxITEM_CHECK);
    m_miViewUnitCalculator->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-ok-4")));
    m_menuView->Append(m_miViewUnitCalculator);
    
    m_menuView->AppendSeparator();
    
    m_miViewAll = new wxMenuItem(m_menuView, wxID_ANY, _("View all Panes"), wxT(""), wxITEM_NORMAL);
    m_miViewAll->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-choose-3")));
    m_menuView->Append(m_miViewAll);
    
    m_miHideAll = new wxMenuItem(m_menuView, wxID_ANY, _("Hide all Panes"), wxT(""), wxITEM_NORMAL);
    m_miHideAll->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-close")));
    m_menuView->Append(m_miHideAll);
    
    m_menuPerspective = new wxMenu();
    m_menuBar->Append(m_menuPerspective, _("Perspective"));
    
    m_miPerspectiveRun = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Perspective - Run"), wxT(""), wxITEM_NORMAL);
    m_miPerspectiveRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-choose")));
    m_menuPerspective->Append(m_miPerspectiveRun);
    
    m_miPerspectiveDebug = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Perspective - Debug"), wxT(""), wxITEM_NORMAL);
    m_miPerspectiveDebug->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-choose")));
    m_menuPerspective->Append(m_miPerspectiveDebug);
    
    m_miPerspectiveSource = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Perspective - Source"), wxT(""), wxITEM_NORMAL);
    m_miPerspectiveSource->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("view-choose")));
    m_menuPerspective->Append(m_miPerspectiveSource);
    
    m_menuPerspective->AppendSeparator();
    
    m_menuSavePerspectiveRun = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Save Perspective as Run"), wxT(""), wxITEM_NORMAL);
    m_menuSavePerspectiveRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-save-3")));
    m_menuPerspective->Append(m_menuSavePerspectiveRun);
    
    m_menuSavePerspectiveDebug = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Save Perspective as Debug"), wxT(""), wxITEM_NORMAL);
    m_menuSavePerspectiveDebug->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-save-3")));
    m_menuPerspective->Append(m_menuSavePerspectiveDebug);
    
    m_menuSavePerspectiveSource = new wxMenuItem(m_menuPerspective, wxID_ANY, _("Save Perspective as Source"), wxT(""), wxITEM_NORMAL);
    m_menuSavePerspectiveSource->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("document-save-3")));
    m_menuPerspective->Append(m_menuSavePerspectiveSource);
    
    m_menuMonitoring = new wxMenu();
    m_menuBar->Append(m_menuMonitoring, _("Monitoring"));
    
    m_menuItemUpdCoors = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Update Coordinates"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemUpdCoors);
    m_menuItemUpdCoors->Check();
    
    m_menuItemUpdDraw = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Online Preview"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemUpdDraw);
    m_menuItemUpdDraw->Check();
    
    m_menuItemAllowEvents = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Allow Events"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemAllowEvents);
    m_menuItemAllowEvents->Check();
    
    m_menuItemDisplayUserAgent = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Display User Agent Content"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemDisplayUserAgent);
    m_menuItemDisplayUserAgent->Check();
    
    m_menuItemToolControls = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Update Tool-/Speed-Controls"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemToolControls);
    m_menuItemToolControls->Check();
    
    m_menuMonitoring->AppendSeparator();
    
    m_menuItemDebugSerial = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Spy Serial (very slow)"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemDebugSerial);
    
    m_menuItemFreezeLogger = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Unfreeze Logger"), wxT(""), wxITEM_CHECK);
    m_menuMonitoring->Append(m_menuItemFreezeLogger);
    m_menuItemFreezeLogger->Check();
    
    m_menuMonitoring->AppendSeparator();
    
    m_menuItemMinMonitoring = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Setup Minimal Monitoring"), wxT(""), wxITEM_NORMAL);
    m_menuMonitoring->Append(m_menuItemMinMonitoring);
    
    m_menuItemNormalMonitoring = new wxMenuItem(m_menuMonitoring, wxID_ANY, _("Setup Standard Monitoring"), wxT(""), wxITEM_NORMAL);
    m_menuMonitoring->Append(m_menuItemNormalMonitoring);
    
    m_menuRequestor = new wxMenu();
    m_menuBar->Append(m_menuRequestor, _("Controller Requests"));
    
    m_miRqtIdleMessages = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Request Idle Messages"), wxT(""), wxITEM_CHECK);
    m_menuRequestor->Append(m_miRqtIdleMessages);
    m_miRqtIdleMessages->Check();
    
    m_menuRequestor->AppendSeparator();
    
    m_miRqtVersion = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Software Version"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtVersion);
    
    m_miRqtConfig = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Current Config"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtConfig);
    
    m_miRqtPins = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Pin Report"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtPins);
    
    m_menuErrorCount = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Error Count"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_menuErrorCount);
    
    m_miRqtErrorInfo = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Error Info"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtErrorInfo);
    
    m_menuRequestor->AppendSeparator();
    
    m_menuItemInfoMessage = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Test - Info Message"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_menuItemInfoMessage);
    
    m_menuItemWarningMessage = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Test - Warning Message"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_menuItemWarningMessage);
    
    m_menuItemErrorMessage = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Test - Error Message"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_menuItemErrorMessage);
    
    m_menuRequestor->AppendSeparator();
    
    m_miMotorEnableState = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Enable stepper motors"), wxT(""), wxITEM_CHECK);
    m_menuRequestor->Append(m_miMotorEnableState);
    
    m_menuRequestor->AppendSeparator();
    
    m_miRqtCurPos = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Current Position"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtCurPos);
    
    m_miRqtLimit = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Current Limit State"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miRqtLimit);
    
    m_menuRequestor->AppendSeparator();
    
    m_miReset = new wxMenuItem(m_menuRequestor, wxID_ANY, _("Reset Controller"), wxT(""), wxITEM_NORMAL);
    m_menuRequestor->Append(m_miReset);
    
    m_menuTools = new wxMenu();
    m_menuBar->Append(m_menuTools, _("Tools"));
    
    m_miPathGenerator = new wxMenuItem(m_menuTools, wxID_ANY, _("SVG Path Generator"), wxT(""), wxITEM_NORMAL);
    m_miPathGenerator->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("executable")));
    m_menuTools->Append(m_miPathGenerator);
    
    m_miIniFile = new wxMenuItem(m_menuTools, wxID_ANY, _("Configuration File"), wxT(""), wxITEM_NORMAL);
    m_miIniFile->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("executable")));
    m_menuTools->Append(m_miIniFile);
    
    m_miExternalEditor = new wxMenuItem(m_menuTools, wxID_ANY, _("External Editor"), wxT(""), wxITEM_NORMAL);
    m_miExternalEditor->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("executable")));
    m_menuTools->Append(m_miExternalEditor);
    
    m_miCalculator = new wxMenuItem(m_menuTools, wxID_ANY, _("Calculator"), wxT(""), wxITEM_NORMAL);
    m_miCalculator->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("executable")));
    m_menuTools->Append(m_miCalculator);
    
    m_miPyCam = new wxMenuItem(m_menuTools, wxID_ANY, _("PyCAM"), wxT(""), wxITEM_NORMAL);
    m_miPyCam->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("executable")));
    m_menuTools->Append(m_miPyCam);
    
    m_menuTest = new wxMenu();
    m_menuBar->Append(m_menuTest, _("Test"));
    
    m_miUnitTestFramework = new wxMenuItem(m_menuTest, wxID_ANY, _("Unit Test Framework . . ."), wxT(""), wxITEM_NORMAL);
    m_miUnitTestFramework->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-available-3 (2)")));
    m_menuTest->Append(m_miUnitTestFramework);
    
    m_menuTest->AppendSeparator();
    
    m_miLoopRepeatTest = new wxMenuItem(m_menuTest, wxID_ANY, _("Loop Repeat Test [Run]"), wxT(""), wxITEM_NORMAL);
    m_miLoopRepeatTest->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-available-3 (2)")));
    m_menuTest->Append(m_miLoopRepeatTest);
    
    m_menuTest->AppendSeparator();
    
    m_miTest1 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test Function 1"), wxT(""), wxITEM_NORMAL);
    m_miTest1->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-inactive (2)")));
    m_menuTest->Append(m_miTest1);
    
    m_miTest2 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test Function 2"), wxT(""), wxITEM_NORMAL);
    m_miTest2->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-inactive (2)")));
    m_menuTest->Append(m_miTest2);
    
    m_miTest3 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test Function 3"), wxT(""), wxITEM_NORMAL);
    m_miTest3->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-inactive (2)")));
    m_menuTest->Append(m_miTest3);
    
    m_miTest4 = new wxMenuItem(m_menuTest, wxID_ANY, _("Test Function 4"), wxT(""), wxITEM_NORMAL);
    m_miTest4->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("software-update-inactive (2)")));
    m_menuTest->Append(m_miTest4);
    
    m_menuAbout = new wxMenu();
    m_menuBar->Append(m_menuAbout, _("Help"));
    
    m_menuItem309 = new wxMenuItem(m_menuAbout, wxID_ANY, _("About"), wxT(""), wxITEM_NORMAL);
    m_menuItem309->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("help-about")));
    m_menuAbout->Append(m_menuItem309);
    
    m_startupTimer = new wxTimer;
    m_startupTimer->Start(100, true);
    
    m_serialTimer = new wxTimer;
    m_serialTimer->Start(500, false);
    
    m_traceTimer = new wxTimer;
    m_traceTimer->Start(500, false);
    
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_mainViewBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_mainViewBook);
    } else {
        wxPersistenceManager::Get().Restore(m_mainViewBook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_templateNotebook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_templateNotebook);
    } else {
        wxPersistenceManager::Get().Restore(m_templateNotebook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook4561)){
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook4561);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook4561);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_treebookTest)){
        wxPersistenceManager::Get().RegisterAndRestore(m_treebookTest);
    } else {
        wxPersistenceManager::Get().Restore(m_treebookTest);
    }
    #endif
    m_treebookTest->ExpandNode( 0, true );
    m_treebookTest->ExpandNode( 1, true );
    m_treebookTest->ExpandNode( 2, true );
    m_treebookTest->ExpandNode( 3, true );
    m_treebookTest->ExpandNode( 4, true );
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_monitorViewBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_monitorViewBook);
    } else {
        wxPersistenceManager::Get().Restore(m_monitorViewBook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_outboundNotebook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_outboundNotebook);
    } else {
        wxPersistenceManager::Get().Restore(m_outboundNotebook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebookConfig)){
        wxPersistenceManager::Get().RegisterAndRestore(m_notebookConfig);
    } else {
        wxPersistenceManager::Get().Restore(m_notebookConfig);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_statisticBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_statisticBook);
    } else {
        wxPersistenceManager::Get().Restore(m_statisticBook);
    }
    #endif
    
    SetName(wxT("MainFrameBClass"));
    SetSize(1600,1000);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_ACTIVATE, wxActivateEventHandler(MainFrameBClass::activateMainWindow), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_CLOSE, wxAuiManagerEventHandler(MainFrameBClass::closeAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_MAXIMIZE, wxAuiManagerEventHandler(MainFrameBClass::maximizeAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_RESTORE, wxAuiManagerEventHandler(MainFrameBClass::restoreAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_RENDER, wxAuiManagerEventHandler(MainFrameBClass::renderAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_BUTTON, wxAuiManagerEventHandler(MainFrameBClass::buttonAuiPane), NULL, this);
    m_auimgrMain->Connect(wxEVT_AUI_PANE_ACTIVATED, wxAuiManagerEventHandler(MainFrameBClass::activateAuiPane), NULL, this);
    m_bmpButton4490->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleTemplateManager), NULL, this);
    m_searchConnections->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::searchAvailiablePorts), NULL, this);
    m_portSelector->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectPort), NULL, this);
    m_connect->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::connect), NULL, this);
    m_btSelectReferences->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectReferences), NULL, this);
    m_btSelectManuallyMove->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectManuallyMove), NULL, this);
    m_btSelectSetup->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectSetup), NULL, this);
    m_btSelectTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectTemplate), NULL, this);
    this->Connect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBClass::cfgStepDelayDropDown), NULL, this);
    this->Connect(m_miCfgStepDelayMin->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayMin), NULL, this);
    this->Connect(m_miCfgStepDelayMax->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayMax), NULL, this);
    this->Connect(m_miCfgSimulateArduino->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayArduino), NULL, this);
    m_stepDelay->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::stepDelayChanged), NULL, this);
    m_stepDelay->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::stepDelayThumbtrack), NULL, this);
    m_rcReset->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcReset), NULL, this);
    m_rcDebugConfig->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcDebugConfig), NULL, this);
    m_rcDebug->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcRun), NULL, this);
    m_rcNextBreakpoint->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextBreakpoint), NULL, this);
    m_rcNextStep->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextStep), NULL, this);
    m_rcFinish->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcFinish), NULL, this);
    m_rcRun->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcRun), NULL, this);
    m_rcPause->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcPause), NULL, this);
    m_rcStop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcStop), NULL, this);
    m_btnEmergenyStop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::emergencyStop), NULL, this);
    m_mainViewSelector->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(MainFrameBClass::mainViewSelectorSelected), NULL, this);
    m_openSourceExtern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSourceExtern), NULL, this);
    m_openSvgExtern->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSvgExtern), NULL, this);
    m_saveTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveTemplateFromButton), NULL, this);
    m_reloadTemplate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::reloadTemplateFromButton), NULL, this);
    m_btSvgToggleWordWrap->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleTemplateWordWrapMode), NULL, this);
    m_btPathGenerator->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openSVGPathGenerator), NULL, this);
    m_stcFileContent->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::fileContentKeyDown), NULL, this);
    m_stcFileContent->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::fileContentLeftDown), NULL, this);
    m_stcFileContent->Connect(wxEVT_LEFT_UP, wxMouseEventHandler(MainFrameBClass::fileContentLeftUp), NULL, this);
    m_stcFileContent->Connect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(MainFrameBClass::fileContentRightDown), NULL, this);
    m_stcFileContent->Connect(wxEVT_STC_MARGINCLICK, wxStyledTextEventHandler(MainFrameBClass::marginClickFileContent), NULL, this);
    m_stcFileContent->Connect(wxEVT_KEY_UP, wxKeyEventHandler(MainFrameBClass::fileContentKeyUp), NULL, this);
    m_stcFileContent->Connect(wxEVT_STC_CHANGE, wxStyledTextEventHandler(MainFrameBClass::fileContentChange), NULL, this);
    m_stcFileContent->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::fileContentDClick), NULL, this);
    m_tbCaseSensitive->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbRegEx->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbHighLight->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_svgEditSearch->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::svgEditSearchTextChanged), NULL, this);
    m_svgEditSearch->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::svgEditSelected), NULL, this);
    m_svgEditFind->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFind), NULL, this);
    m_svgEditFindPrev->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFindPrev), NULL, this);
    m_dvListCtrlSvgUAInboundPathList->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAInboundPathList), NULL, this);
    m_dvListCtrlSvgUAUseDirective->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAUseDirectiveList), NULL, this);
    m_dvListCtrlSvgUADetailInfo->Connect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUADetailInfo), NULL, this);
    m_pgMgrSetup->Connect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(MainFrameBClass::setupGridChanged), NULL, this);
    m_pgMgrSetup->Connect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(MainFrameBClass::setupGridChanging), NULL, this);
    m_pgMgrSetup->Connect(wxEVT_PG_SELECTED, wxPropertyGridEventHandler(MainFrameBClass::setupGridSelected), NULL, this);
    m_pgMgrSetup->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::setupGridCommandButton), NULL, this);
    m_loadConfiguration->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::loadConfiguration), NULL, this);
    m_saveConfiguration->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveConfiguration), NULL, this);
    m_spinButtonX->Connect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinUpX), NULL, this);
    m_spinButtonX->Connect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinDownX), NULL, this);
    m_spinButtonY->Connect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinUpY), NULL, this);
    m_spinButtonY->Connect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinDownY), NULL, this);
    m_moveXYAxisCtl->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownXY), NULL, this);
    m_moveXYAxisCtl->Connect(wxEVT_SET_FOCUS, wxFocusEventHandler(MainFrameBClass::setFocusMoveXYAxis), NULL, this);
    m_moveXYAxisCtl->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMoveXYAxis), NULL, this);
    m_spinButtonZ->Connect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinUpZ), NULL, this);
    m_spinButtonZ->Connect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinDownZ), NULL, this);
    m_moveZAxisCtl->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownZ), NULL, this);
    m_moveZAxisCtl->Connect(wxEVT_SET_FOCUS, wxFocusEventHandler(MainFrameBClass::setFocusMoveZAxis), NULL, this);
    m_moveZAxisCtl->Connect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMoveZAxis), NULL, this);
    m_includingWpt->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::updateInclWpt), NULL, this);
    m_setZero->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::setZero), NULL, this);
    m_moveHome->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveHome), NULL, this);
    m_moveXYtoZero->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXY), NULL, this);
    m_moveXYZtoZero->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXYZ), NULL, this);
    m_moveZtoZero->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroZ), NULL, this);
    m_xToMax->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMax), NULL, this);
    m_xToMid->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMid), NULL, this);
    m_xToMin->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMin), NULL, this);
    m_yToMax->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMax), NULL, this);
    m_yToMid->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMid), NULL, this);
    m_yToMin->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMin), NULL, this);
    m_zToMax->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMax), NULL, this);
    m_zToMid->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMid), NULL, this);
    m_zToMin->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMin), NULL, this);
    m_zToTop->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToTop), NULL, this);
    m_zToBottom->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToBottom), NULL, this);
    m_checkManuallyXY->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::checkManuallyXY), NULL, this);
    m_minManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyXSlider), NULL, this);
    m_metricX->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricX), NULL, this);
    m_maxManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyXSlider), NULL, this);
    m_zeroManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyXSlider), NULL, this);
    m_signManuallyXSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyXSlider), NULL, this);
    m_xManuallySlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderX), NULL, this);
    m_xManuallySlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderX), NULL, this);
    m_minManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyYSlider), NULL, this);
    m_metricY->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricY), NULL, this);
    m_maxManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyYSlider), NULL, this);
    m_zeroManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyYSlider), NULL, this);
    m_signManuallyYSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyYSlider), NULL, this);
    m_yManuallySlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderY), NULL, this);
    m_yManuallySlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderY), NULL, this);
    m_checkManuallyZ->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::checkManuallyZ), NULL, this);
    m_minManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyZSlider), NULL, this);
    m_metricZ->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricZ), NULL, this);
    m_maxManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyZSlider), NULL, this);
    m_zeroManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyZSlider), NULL, this);
    m_signManuallyZSlider->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyZSlider), NULL, this);
    m_zManuallySlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderZ), NULL, this);
    m_zManuallySlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderZ), NULL, this);
    m_treebookTest->Connect(wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED, wxTreebookEventHandler(MainFrameBClass::treebookTestChanged), NULL, this);
    m_testIntervalMode->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectTestIntervalMode), NULL, this);
    m_testCountX->Connect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::testCountXSpinCtl), NULL, this);
    m_testCountX->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::testCountXUpdated), NULL, this);
    m_testDimTakeX->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverX), NULL, this);
    m_testDimTakeY->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverY), NULL, this);
    m_testDimTakeZ->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverZ), NULL, this);
    m_testDimTakeAll->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverAll), NULL, this);
    m_testToggleEndSwitch->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testEndSwitchEvaluation), NULL, this);
    m_testToggleTool->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testSwitchToolOnOff), NULL, this);
    m_ctrlTestSelection->Connect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::ctrlTestCaseSelected), NULL, this);
    m_monitorViewSelector->Connect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(MainFrameBClass::monitorViewSelectorSelected), NULL, this);
    m_outboundNotebook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(MainFrameBClass::outboundBookChanged), NULL, this);
    m_outboundNotebook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, wxNotebookEventHandler(MainFrameBClass::outboundBookChanging), NULL, this);
    m_notebookConfig->Connect(wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, wxListbookEventHandler(MainFrameBClass::nootebookConfigChanged), NULL, this);
    m_btCancelRun->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::cancelRun), NULL, this);
    m_btConfirmRun->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::confirmRun), NULL, this);
    m_btClearSetterList->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearSetterList), NULL, this);
    m_btRequestCtlConfig->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerConfigFromButton), NULL, this);
    m_btRequestCtlPins->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerPinsFromButton), NULL, this);
    m_btClearMsgHistory->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearControllerMsgHistory), NULL, this);
    m_btRequestCtlErrorInfo->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerErrorInfoFromButton), NULL, this);
    m_switchMonitoing->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::switchMonitoring), NULL, this);
    m_motionMonitorOptionDlg->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openMotionMonitorOptionDlg), NULL, this);
    m_3D_Refreh->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::refreshMotionMonitor), NULL, this);
    m_3D_Clear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearMotionMonitor), NULL, this);
    m_cbCurveLibResolution->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateCurveLibResolution), NULL, this);
    m_displayInterval->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::displayIntervalThumbtrack), NULL, this);
    m_displayInterval->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::displayIntervalChanged), NULL, this);
    m_displayInterval->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::displayIntervalKeyDown), NULL, this);
    m_btShowHideStatistics->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleMonitorStatistics), NULL, this);
    m_btProbeMode->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clickProbeMode), NULL, this);
    m_3D_Trace3->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearMotionMonitorVecties), NULL, this);
    m_3D_Trace4->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyMotionMonitorVecties), NULL, this);
    m_3D_Trace->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::traceMotionMonitorVecties), NULL, this);
    m_3D_Top->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromTop3D), NULL, this);
    m_3D_Bottom->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromBottom3D), NULL, this);
    m_3D_Front->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromFront3D), NULL, this);
    m_3D_Rear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRear3D), NULL, this);
    m_3D_Left->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromLeft3D), NULL, this);
    m_3D_Right->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRight3D), NULL, this);
    m_3D_Perspective1->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective2->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective3->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective4->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_svgEmuOpenFileAsSource->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuOpenFileAsSource), NULL, this);
    m_svgEmuOpenFileAsSvg->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuOpenFileAsSvg), NULL, this);
    m_svgEmuReload->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuReload), NULL, this);
    m_svgEmuClear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuClear), NULL, this);
    m_svgEmuToggleOrigPath->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuToogleOriginalPath), NULL, this);
    m_svgEmuZoomHome->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomHome), NULL, this);
    m_svgEmuZoomMinus->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomMinus), NULL, this);
    m_svgEmuZoomPlus->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomPlus), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_svgEmuToggleWordWrap->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleEmuWordWrapMode), NULL, this);
    m_stcEmuSource->Connect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(MainFrameBClass::emuContentRightDown), NULL, this);
    m_stcEmuSource->Connect(wxEVT_STC_MARGINCLICK, wxStyledTextEventHandler(MainFrameBClass::marginClickEmuSource), NULL, this);
    m_stcEmuSource->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::emuContentDClick), NULL, this);
    m_lruList->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBClass::lruListItemSelected), NULL, this);
    m_lruList->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBClass::lruListItemActivated), NULL, this);
    m_lruList->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::lruListItemLeave), NULL, this);
    m_clearLogger->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearLogger), NULL, this);
    m_copyLogger->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyLogger), NULL, this);
    m_logger->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::UpdateLogger), NULL, this);
    m_tmpTraceInfo->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::traceTextUpdated), NULL, this);
    m_cmdDuration->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickDurationCount), NULL, this);
    m_unit->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUnit), NULL, this);
    m_xMinLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_xMaxLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMinLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMaxLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMinLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMaxLimit->Connect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_cbUCUnitFrom->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUCUnitFrom), NULL, this);
    m_cbUCUnitTo->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUCUnitTo), NULL, this);
    m_cbUCValueFrom->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::selectUCChangeFrom), NULL, this);
    m_btUCClose->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::closeUnitCalculator), NULL, this);
    m_enableSerialSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::enableSerialSpy), NULL, this);
    m_MarkSerialSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::markSerialSpy), NULL, this);
    m_clearSerialSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearSerialSpy), NULL, this);
    m_cbSerialSpyMode->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectSerialSpyMode), NULL, this);
    m_btTogglePosSpy->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::togglePositionSpy), NULL, this);
    m_btCopyPosSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyPositionSpy), NULL, this);
    m_btSearchPosSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::searchPosSpy), NULL, this);
    m_btClearPositionSpy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearPositionSpy), NULL, this);
    m_cbContentPosSpy->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectPositionSpyContent), NULL, this);
    m_speedPanel->Connect(wxEVT_PAINT, wxPaintEventHandler(MainFrameBClass::onPaintSpeedPanel), NULL, this);
    m_bmpButton47181->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypFirstId), NULL, this);
    m_bmpButton4718->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypLastId), NULL, this);
    m_bmpButton47182->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypPrevId), NULL, this);
    m_bmpButton47183->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypNextId), NULL, this);
    this->Connect(m_miNewTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::newTemplate), NULL, this);
    this->Connect(m_miOpenTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openTemplate), NULL, this);
    this->Connect(m_miReloadTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::reloadTemplate), NULL, this);
    this->Connect(m_miSaveTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplate), NULL, this);
    this->Connect(m_miSaveTemplateAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplateAs), NULL, this);
    this->Connect(m_miSaveEmuOutput->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveEmuOutput), NULL, this);
    this->Connect(m_miExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnExit), NULL, this);
    this->Connect(m_miToolbar->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewToolbar), NULL, this);
    this->Connect(m_miViewStatusbar->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewStatusbar), NULL, this);
    this->Connect(m_miViewTemplateManager->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewTemplateManager), NULL, this);
    this->Connect(m_miViewMainView->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMainView), NULL, this);
    this->Connect(m_miViewMonitor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMonitor), NULL, this);
    this->Connect(m_miViewZAxis->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewZAxis), NULL, this);
    this->Connect(m_miViewPosMonitor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewPosistionMonitor), NULL, this);
    this->Connect(m_miViewDebugger->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewDebugger), NULL, this);
    this->Connect(m_miViewSpy->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewSpy), NULL, this);
    this->Connect(m_miViewLogger->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewLogger), NULL, this);
    this->Connect(m_miViewSpeed->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewSpeed), NULL, this);
    this->Connect(m_miViewUnitCalculator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewUnitCalculator), NULL, this);
    this->Connect(m_miViewAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewAllAuiPanes), NULL, this);
    this->Connect(m_miHideAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::hideAllAuiPanes), NULL, this);
    this->Connect(m_miPerspectiveRun->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspectiveRun), NULL, this);
    this->Connect(m_miPerspectiveDebug->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspectiveDebug), NULL, this);
    this->Connect(m_miPerspectiveSource->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspectiveSource), NULL, this);
    this->Connect(m_menuSavePerspectiveRun->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspectiveRun), NULL, this);
    this->Connect(m_menuSavePerspectiveDebug->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspectiveDebug), NULL, this);
    this->Connect(m_menuSavePerspectiveSource->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspectiveSource), NULL, this);
    this->Connect(m_menuItemUpdCoors->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineUpdateCoordinates), NULL, this);
    this->Connect(m_menuItemUpdDraw->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineOnlineDrawing), NULL, this);
    this->Connect(m_menuItemAllowEvents->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineAllowEvents), NULL, this);
    this->Connect(m_menuItemDisplayUserAgent->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::displayUserAgent), NULL, this);
    this->Connect(m_menuItemToolControls->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::updateToolControls), NULL, this);
    this->Connect(m_menuItemDebugSerial->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineDebugSerial), NULL, this);
    this->Connect(m_menuItemMinMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineMinMonitoring), NULL, this);
    this->Connect(m_menuItemNormalMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineNormalMonitoring), NULL, this);
    this->Connect(m_miRqtVersion->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestVersion), NULL, this);
    this->Connect(m_miRqtConfig->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestConfig), NULL, this);
    this->Connect(m_miRqtPins->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestPins), NULL, this);
    this->Connect(m_menuErrorCount->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestErrorCount), NULL, this);
    this->Connect(m_miRqtErrorInfo->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestErrorInfo), NULL, this);
    this->Connect(m_menuItemInfoMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestInfoMessage), NULL, this);
    this->Connect(m_menuItemWarningMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestWarningMessage), NULL, this);
    this->Connect(m_menuItemErrorMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestErrorMessage), NULL, this);
    this->Connect(m_miMotorEnableState->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestEnableStepperMotors), NULL, this);
    this->Connect(m_miRqtCurPos->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentPos), NULL, this);
    this->Connect(m_miRqtLimit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentLimitState), NULL, this);
    this->Connect(m_miReset->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestReset), NULL, this);
    this->Connect(m_miPathGenerator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openSVGPathGenerator), NULL, this);
    this->Connect(m_miIniFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openConfigurationFile), NULL, this);
    this->Connect(m_miExternalEditor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openExternalEditor), NULL, this);
    this->Connect(m_miCalculator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openCalculator), NULL, this);
    this->Connect(m_miPyCam->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openPyCam), NULL, this);
    this->Connect(m_miUnitTestFramework->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::unitTestFramework), NULL, this);
    this->Connect(m_miLoopRepeatTest->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loopRepeatTest), NULL, this);
    this->Connect(m_miTest1->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction1), NULL, this);
    this->Connect(m_miTest2->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction2), NULL, this);
    this->Connect(m_miTest3->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction3), NULL, this);
    this->Connect(m_miTest4->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction4), NULL, this);
    this->Connect(m_menuItem309->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnAbout), NULL, this);
    m_startupTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::startupTimer), NULL, this);
    m_serialTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::serialTimer), NULL, this);
    m_traceTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::traceTimer), NULL, this);
    
    this->Connect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBClass::ShowAuiToolMenu), NULL, this);
}

MainFrameBClass::~MainFrameBClass()
{
    this->Disconnect(wxEVT_ACTIVATE, wxActivateEventHandler(MainFrameBClass::activateMainWindow), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_CLOSE, wxAuiManagerEventHandler(MainFrameBClass::closeAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_MAXIMIZE, wxAuiManagerEventHandler(MainFrameBClass::maximizeAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_RESTORE, wxAuiManagerEventHandler(MainFrameBClass::restoreAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_RENDER, wxAuiManagerEventHandler(MainFrameBClass::renderAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_BUTTON, wxAuiManagerEventHandler(MainFrameBClass::buttonAuiPane), NULL, this);
    m_auimgrMain->Disconnect(wxEVT_AUI_PANE_ACTIVATED, wxAuiManagerEventHandler(MainFrameBClass::activateAuiPane), NULL, this);
    m_bmpButton4490->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleTemplateManager), NULL, this);
    m_searchConnections->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::searchAvailiablePorts), NULL, this);
    m_portSelector->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectPort), NULL, this);
    m_connect->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::connect), NULL, this);
    m_btSelectReferences->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectReferences), NULL, this);
    m_btSelectManuallyMove->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectManuallyMove), NULL, this);
    m_btSelectSetup->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectSetup), NULL, this);
    m_btSelectTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::onSelectTemplate), NULL, this);
    this->Disconnect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBClass::cfgStepDelayDropDown), NULL, this);
    this->Disconnect(m_miCfgStepDelayMin->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayMin), NULL, this);
    this->Disconnect(m_miCfgStepDelayMax->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayMax), NULL, this);
    this->Disconnect(m_miCfgSimulateArduino->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::cfgStepDelayArduino), NULL, this);
    m_stepDelay->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::stepDelayChanged), NULL, this);
    m_stepDelay->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::stepDelayThumbtrack), NULL, this);
    m_rcReset->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcReset), NULL, this);
    m_rcDebugConfig->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcDebugConfig), NULL, this);
    m_rcDebug->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcRun), NULL, this);
    m_rcNextBreakpoint->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextBreakpoint), NULL, this);
    m_rcNextStep->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcNextStep), NULL, this);
    m_rcFinish->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcFinish), NULL, this);
    m_rcRun->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcRun), NULL, this);
    m_rcPause->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcPause), NULL, this);
    m_rcStop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::rcStop), NULL, this);
    m_btnEmergenyStop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::emergencyStop), NULL, this);
    m_mainViewSelector->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(MainFrameBClass::mainViewSelectorSelected), NULL, this);
    m_openSourceExtern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSourceExtern), NULL, this);
    m_openSvgExtern->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openTemplateSvgExtern), NULL, this);
    m_saveTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveTemplateFromButton), NULL, this);
    m_reloadTemplate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::reloadTemplateFromButton), NULL, this);
    m_btSvgToggleWordWrap->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleTemplateWordWrapMode), NULL, this);
    m_btPathGenerator->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openSVGPathGenerator), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::fileContentKeyDown), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(MainFrameBClass::fileContentLeftDown), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(MainFrameBClass::fileContentLeftUp), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(MainFrameBClass::fileContentRightDown), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_STC_MARGINCLICK, wxStyledTextEventHandler(MainFrameBClass::marginClickFileContent), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_KEY_UP, wxKeyEventHandler(MainFrameBClass::fileContentKeyUp), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_STC_CHANGE, wxStyledTextEventHandler(MainFrameBClass::fileContentChange), NULL, this);
    m_stcFileContent->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::fileContentDClick), NULL, this);
    m_tbCaseSensitive->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbRegEx->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_tbHighLight->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toogleSvgEditSearchFlag), NULL, this);
    m_svgEditSearch->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::svgEditSearchTextChanged), NULL, this);
    m_svgEditSearch->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::svgEditSelected), NULL, this);
    m_svgEditFind->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFind), NULL, this);
    m_svgEditFindPrev->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEditFindPrev), NULL, this);
    m_dvListCtrlSvgUAInboundPathList->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAInboundPathList), NULL, this);
    m_dvListCtrlSvgUAUseDirective->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUAUseDirectiveList), NULL, this);
    m_dvListCtrlSvgUADetailInfo->Disconnect(wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, wxDataViewEventHandler(MainFrameBClass::selectUADetailInfo), NULL, this);
    m_pgMgrSetup->Disconnect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(MainFrameBClass::setupGridChanged), NULL, this);
    m_pgMgrSetup->Disconnect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(MainFrameBClass::setupGridChanging), NULL, this);
    m_pgMgrSetup->Disconnect(wxEVT_PG_SELECTED, wxPropertyGridEventHandler(MainFrameBClass::setupGridSelected), NULL, this);
    m_pgMgrSetup->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::setupGridCommandButton), NULL, this);
    m_loadConfiguration->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::loadConfiguration), NULL, this);
    m_saveConfiguration->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::saveConfiguration), NULL, this);
    m_spinButtonX->Disconnect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinUpX), NULL, this);
    m_spinButtonX->Disconnect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinDownX), NULL, this);
    m_spinButtonY->Disconnect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinUpY), NULL, this);
    m_spinButtonY->Disconnect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinDownY), NULL, this);
    m_moveXYAxisCtl->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownXY), NULL, this);
    m_moveXYAxisCtl->Disconnect(wxEVT_SET_FOCUS, wxFocusEventHandler(MainFrameBClass::setFocusMoveXYAxis), NULL, this);
    m_moveXYAxisCtl->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMoveXYAxis), NULL, this);
    m_spinButtonZ->Disconnect(wxEVT_SPIN_UP, wxSpinEventHandler(MainFrameBClass::mvSpinUpZ), NULL, this);
    m_spinButtonZ->Disconnect(wxEVT_SPIN_DOWN, wxSpinEventHandler(MainFrameBClass::mvSpinDownZ), NULL, this);
    m_moveZAxisCtl->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::keyDownZ), NULL, this);
    m_moveZAxisCtl->Disconnect(wxEVT_SET_FOCUS, wxFocusEventHandler(MainFrameBClass::setFocusMoveZAxis), NULL, this);
    m_moveZAxisCtl->Disconnect(wxEVT_KILL_FOCUS, wxFocusEventHandler(MainFrameBClass::killFocusMoveZAxis), NULL, this);
    m_includingWpt->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::updateInclWpt), NULL, this);
    m_setZero->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::setZero), NULL, this);
    m_moveHome->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveHome), NULL, this);
    m_moveXYtoZero->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXY), NULL, this);
    m_moveXYZtoZero->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroXYZ), NULL, this);
    m_moveZtoZero->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveToZeroZ), NULL, this);
    m_xToMax->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMax), NULL, this);
    m_xToMid->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMid), NULL, this);
    m_xToMin->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveXToMin), NULL, this);
    m_yToMax->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMax), NULL, this);
    m_yToMid->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMid), NULL, this);
    m_yToMin->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveYToMin), NULL, this);
    m_zToMax->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMax), NULL, this);
    m_zToMid->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMid), NULL, this);
    m_zToMin->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToMin), NULL, this);
    m_zToTop->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToTop), NULL, this);
    m_zToBottom->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::moveZToBottom), NULL, this);
    m_checkManuallyXY->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::checkManuallyXY), NULL, this);
    m_minManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyXSlider), NULL, this);
    m_metricX->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricX), NULL, this);
    m_maxManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyXSlider), NULL, this);
    m_zeroManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyXSlider), NULL, this);
    m_signManuallyXSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyXSlider), NULL, this);
    m_xManuallySlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderX), NULL, this);
    m_xManuallySlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderX), NULL, this);
    m_minManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyYSlider), NULL, this);
    m_metricY->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricY), NULL, this);
    m_maxManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyYSlider), NULL, this);
    m_zeroManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyYSlider), NULL, this);
    m_signManuallyYSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyYSlider), NULL, this);
    m_yManuallySlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderY), NULL, this);
    m_yManuallySlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderY), NULL, this);
    m_checkManuallyZ->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(MainFrameBClass::checkManuallyZ), NULL, this);
    m_minManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::minManuallyZSlider), NULL, this);
    m_metricZ->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::updateMetricZ), NULL, this);
    m_maxManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::maxManuallyZSlider), NULL, this);
    m_zeroManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::zeroManuallyZSlider), NULL, this);
    m_signManuallyZSlider->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::signManuallyZSlider), NULL, this);
    m_zManuallySlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::moveManuallySliderZ), NULL, this);
    m_zManuallySlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::changeManuallySliderZ), NULL, this);
    m_treebookTest->Disconnect(wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED, wxTreebookEventHandler(MainFrameBClass::treebookTestChanged), NULL, this);
    m_testIntervalMode->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectTestIntervalMode), NULL, this);
    m_testCountX->Disconnect(wxEVT_SPINCTRL, wxSpinEventHandler(MainFrameBClass::testCountXSpinCtl), NULL, this);
    m_testCountX->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::testCountXUpdated), NULL, this);
    m_testDimTakeX->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverX), NULL, this);
    m_testDimTakeY->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverY), NULL, this);
    m_testDimTakeZ->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverZ), NULL, this);
    m_testDimTakeAll->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testDimTakeOverAll), NULL, this);
    m_testToggleEndSwitch->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testEndSwitchEvaluation), NULL, this);
    m_testToggleTool->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::testSwitchToolOnOff), NULL, this);
    m_ctrlTestSelection->Disconnect(wxEVT_COMMAND_LISTBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::ctrlTestCaseSelected), NULL, this);
    m_monitorViewSelector->Disconnect(wxEVT_COMMAND_CHOICE_SELECTED, wxCommandEventHandler(MainFrameBClass::monitorViewSelectorSelected), NULL, this);
    m_outboundNotebook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(MainFrameBClass::outboundBookChanged), NULL, this);
    m_outboundNotebook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, wxNotebookEventHandler(MainFrameBClass::outboundBookChanging), NULL, this);
    m_notebookConfig->Disconnect(wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, wxListbookEventHandler(MainFrameBClass::nootebookConfigChanged), NULL, this);
    m_btCancelRun->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::cancelRun), NULL, this);
    m_btConfirmRun->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::confirmRun), NULL, this);
    m_btClearSetterList->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearSetterList), NULL, this);
    m_btRequestCtlConfig->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerConfigFromButton), NULL, this);
    m_btRequestCtlPins->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerPinsFromButton), NULL, this);
    m_btClearMsgHistory->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearControllerMsgHistory), NULL, this);
    m_btRequestCtlErrorInfo->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::requestControllerErrorInfoFromButton), NULL, this);
    m_switchMonitoing->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::switchMonitoring), NULL, this);
    m_motionMonitorOptionDlg->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::openMotionMonitorOptionDlg), NULL, this);
    m_3D_Refreh->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::refreshMotionMonitor), NULL, this);
    m_3D_Clear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearMotionMonitor), NULL, this);
    m_cbCurveLibResolution->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::updateCurveLibResolution), NULL, this);
    m_displayInterval->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(MainFrameBClass::displayIntervalThumbtrack), NULL, this);
    m_displayInterval->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(MainFrameBClass::displayIntervalChanged), NULL, this);
    m_displayInterval->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(MainFrameBClass::displayIntervalKeyDown), NULL, this);
    m_btShowHideStatistics->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleMonitorStatistics), NULL, this);
    m_btProbeMode->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clickProbeMode), NULL, this);
    m_3D_Trace3->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearMotionMonitorVecties), NULL, this);
    m_3D_Trace4->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyMotionMonitorVecties), NULL, this);
    m_3D_Trace->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::traceMotionMonitorVecties), NULL, this);
    m_3D_Top->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromTop3D), NULL, this);
    m_3D_Bottom->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromBottom3D), NULL, this);
    m_3D_Front->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromFront3D), NULL, this);
    m_3D_Rear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRear3D), NULL, this);
    m_3D_Left->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromLeft3D), NULL, this);
    m_3D_Right->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::showFromRight3D), NULL, this);
    m_3D_Perspective1->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective2->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective3->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_3D_Perspective4->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::show3D), NULL, this);
    m_svgEmuOpenFileAsSource->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuOpenFileAsSource), NULL, this);
    m_svgEmuOpenFileAsSvg->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuOpenFileAsSvg), NULL, this);
    m_svgEmuReload->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuReload), NULL, this);
    m_svgEmuClear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuClear), NULL, this);
    m_svgEmuToggleOrigPath->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuToogleOriginalPath), NULL, this);
    m_svgEmuZoomHome->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomHome), NULL, this);
    m_svgEmuZoomMinus->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomMinus), NULL, this);
    m_svgEmuZoomPlus->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::svgEmuZoomPlus), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_svgEmuToggleWordWrap->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::toggleEmuWordWrapMode), NULL, this);
    m_stcEmuSource->Disconnect(wxEVT_RIGHT_DOWN, wxMouseEventHandler(MainFrameBClass::emuContentRightDown), NULL, this);
    m_stcEmuSource->Disconnect(wxEVT_STC_MARGINCLICK, wxStyledTextEventHandler(MainFrameBClass::marginClickEmuSource), NULL, this);
    m_stcEmuSource->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::emuContentDClick), NULL, this);
    m_lruList->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(MainFrameBClass::lruListItemSelected), NULL, this);
    m_lruList->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(MainFrameBClass::lruListItemActivated), NULL, this);
    m_lruList->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(MainFrameBClass::lruListItemLeave), NULL, this);
    m_clearLogger->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearLogger), NULL, this);
    m_copyLogger->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyLogger), NULL, this);
    m_logger->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::UpdateLogger), NULL, this);
    m_tmpTraceInfo->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::traceTextUpdated), NULL, this);
    m_cmdDuration->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::dclickDurationCount), NULL, this);
    m_unit->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUnit), NULL, this);
    m_xMinLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_xMaxLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMinLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_yMaxLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMinLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_zMaxLimit->Disconnect(wxEVT_LEFT_DCLICK, wxMouseEventHandler(MainFrameBClass::requestCurrentLimitStateIcon), NULL, this);
    m_cbUCUnitFrom->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUCUnitFrom), NULL, this);
    m_cbUCUnitTo->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectUCUnitTo), NULL, this);
    m_cbUCValueFrom->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(MainFrameBClass::selectUCChangeFrom), NULL, this);
    m_btUCClose->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::closeUnitCalculator), NULL, this);
    m_enableSerialSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::enableSerialSpy), NULL, this);
    m_MarkSerialSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::markSerialSpy), NULL, this);
    m_clearSerialSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearSerialSpy), NULL, this);
    m_cbSerialSpyMode->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectSerialSpyMode), NULL, this);
    m_btTogglePosSpy->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::togglePositionSpy), NULL, this);
    m_btCopyPosSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::copyPositionSpy), NULL, this);
    m_btSearchPosSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::searchPosSpy), NULL, this);
    m_btClearPositionSpy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::clearPositionSpy), NULL, this);
    m_cbContentPosSpy->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(MainFrameBClass::selectPositionSpyContent), NULL, this);
    m_speedPanel->Disconnect(wxEVT_PAINT, wxPaintEventHandler(MainFrameBClass::onPaintSpeedPanel), NULL, this);
    m_bmpButton47181->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypFirstId), NULL, this);
    m_bmpButton4718->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypLastId), NULL, this);
    m_bmpButton47182->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypPrevId), NULL, this);
    m_bmpButton47183->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBClass::goPosSypNextId), NULL, this);
    this->Disconnect(m_miNewTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::newTemplate), NULL, this);
    this->Disconnect(m_miOpenTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openTemplate), NULL, this);
    this->Disconnect(m_miReloadTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::reloadTemplate), NULL, this);
    this->Disconnect(m_miSaveTemplate->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplate), NULL, this);
    this->Disconnect(m_miSaveTemplateAs->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveTemplateAs), NULL, this);
    this->Disconnect(m_miSaveEmuOutput->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::saveEmuOutput), NULL, this);
    this->Disconnect(m_miExit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnExit), NULL, this);
    this->Disconnect(m_miToolbar->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewToolbar), NULL, this);
    this->Disconnect(m_miViewStatusbar->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewStatusbar), NULL, this);
    this->Disconnect(m_miViewTemplateManager->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewTemplateManager), NULL, this);
    this->Disconnect(m_miViewMainView->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMainView), NULL, this);
    this->Disconnect(m_miViewMonitor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewMonitor), NULL, this);
    this->Disconnect(m_miViewZAxis->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewZAxis), NULL, this);
    this->Disconnect(m_miViewPosMonitor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewPosistionMonitor), NULL, this);
    this->Disconnect(m_miViewDebugger->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewDebugger), NULL, this);
    this->Disconnect(m_miViewSpy->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewSpy), NULL, this);
    this->Disconnect(m_miViewLogger->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewLogger), NULL, this);
    this->Disconnect(m_miViewSpeed->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewSpeed), NULL, this);
    this->Disconnect(m_miViewUnitCalculator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewUnitCalculator), NULL, this);
    this->Disconnect(m_miViewAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::viewAllAuiPanes), NULL, this);
    this->Disconnect(m_miHideAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::hideAllAuiPanes), NULL, this);
    this->Disconnect(m_miPerspectiveRun->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspectiveRun), NULL, this);
    this->Disconnect(m_miPerspectiveDebug->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspectiveDebug), NULL, this);
    this->Disconnect(m_miPerspectiveSource->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loadPerspectiveSource), NULL, this);
    this->Disconnect(m_menuSavePerspectiveRun->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspectiveRun), NULL, this);
    this->Disconnect(m_menuSavePerspectiveDebug->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspectiveDebug), NULL, this);
    this->Disconnect(m_menuSavePerspectiveSource->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::savePerspectiveSource), NULL, this);
    this->Disconnect(m_menuItemUpdCoors->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineUpdateCoordinates), NULL, this);
    this->Disconnect(m_menuItemUpdDraw->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineOnlineDrawing), NULL, this);
    this->Disconnect(m_menuItemAllowEvents->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineAllowEvents), NULL, this);
    this->Disconnect(m_menuItemDisplayUserAgent->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::displayUserAgent), NULL, this);
    this->Disconnect(m_menuItemToolControls->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::updateToolControls), NULL, this);
    this->Disconnect(m_menuItemDebugSerial->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineDebugSerial), NULL, this);
    this->Disconnect(m_menuItemMinMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineMinMonitoring), NULL, this);
    this->Disconnect(m_menuItemNormalMonitoring->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::defineNormalMonitoring), NULL, this);
    this->Disconnect(m_miRqtVersion->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestVersion), NULL, this);
    this->Disconnect(m_miRqtConfig->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestConfig), NULL, this);
    this->Disconnect(m_miRqtPins->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestPins), NULL, this);
    this->Disconnect(m_menuErrorCount->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestErrorCount), NULL, this);
    this->Disconnect(m_miRqtErrorInfo->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestErrorInfo), NULL, this);
    this->Disconnect(m_menuItemInfoMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestInfoMessage), NULL, this);
    this->Disconnect(m_menuItemWarningMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestWarningMessage), NULL, this);
    this->Disconnect(m_menuItemErrorMessage->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestErrorMessage), NULL, this);
    this->Disconnect(m_miMotorEnableState->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestEnableStepperMotors), NULL, this);
    this->Disconnect(m_miRqtCurPos->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentPos), NULL, this);
    this->Disconnect(m_miRqtLimit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestCurrentLimitState), NULL, this);
    this->Disconnect(m_miReset->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::requestReset), NULL, this);
    this->Disconnect(m_miPathGenerator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openSVGPathGenerator), NULL, this);
    this->Disconnect(m_miIniFile->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openConfigurationFile), NULL, this);
    this->Disconnect(m_miExternalEditor->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openExternalEditor), NULL, this);
    this->Disconnect(m_miCalculator->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openCalculator), NULL, this);
    this->Disconnect(m_miPyCam->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::openPyCam), NULL, this);
    this->Disconnect(m_miUnitTestFramework->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::unitTestFramework), NULL, this);
    this->Disconnect(m_miLoopRepeatTest->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::loopRepeatTest), NULL, this);
    this->Disconnect(m_miTest1->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction1), NULL, this);
    this->Disconnect(m_miTest2->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction2), NULL, this);
    this->Disconnect(m_miTest3->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction3), NULL, this);
    this->Disconnect(m_miTest4->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::testFunction4), NULL, this);
    this->Disconnect(m_menuItem309->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBClass::OnAbout), NULL, this);
    m_startupTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::startupTimer), NULL, this);
    m_serialTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::serialTimer), NULL, this);
    m_traceTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(MainFrameBClass::traceTimer), NULL, this);
    
    m_auimgrMain->UnInit();
    delete m_auimgrMain;

    std::map<int, wxMenu*>::iterator menuIter = m_dropdownMenus.begin();
    for( ; menuIter != m_dropdownMenus.end(); ++menuIter ) {
        wxDELETE( menuIter->second );
    }
    m_dropdownMenus.clear();

    m_startupTimer->Stop();
    wxDELETE( m_startupTimer );

    m_serialTimer->Stop();
    wxDELETE( m_serialTimer );

    m_traceTimer->Stop();
    wxDELETE( m_traceTimer );

    this->Disconnect(wxID_ANY, wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, wxAuiToolBarEventHandler(MainFrameBClass::ShowAuiToolMenu), NULL, this);
}


void MainFrameBClass::ShowAuiToolMenu(wxAuiToolBarEvent& event)
{
    event.Skip();
    if (event.IsDropDownClicked()) {
        wxAuiToolBar* toolbar = wxDynamicCast(event.GetEventObject(), wxAuiToolBar);
        if (toolbar) {
            wxAuiToolBarItem* item = toolbar->FindTool(event.GetId());
            if (item) {
                std::map<int, wxMenu*>::iterator iter = m_dropdownMenus.find(item->GetId());
                if (iter != m_dropdownMenus.end()) {
                    event.Skip(false);
                    wxPoint pt = event.GetItemRect().GetBottomLeft();
                    pt.y++;
                    toolbar->PopupMenu(iter->second, pt);
                }
            }
        }
    }
}
PathGeneratorFrameBase::PathGeneratorFrameBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("16-archive"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer980 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer980->SetFlexibleDirection( wxBOTH );
    flexGridSizer980->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer980->AddGrowableCol(0);
    flexGridSizer980->AddGrowableRow(0);
    this->SetSizer(flexGridSizer980);
    
    m_mainSplitter = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_3D);
    m_mainSplitter->SetSashGravity(0.2);
    m_mainSplitter->SetMinimumPaneSize(24);
    
    flexGridSizer980->Add(m_mainSplitter, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_leftMainSplitterPage = new wxPanel(m_mainSplitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainSplitter, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer3302 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3302->SetFlexibleDirection( wxBOTH );
    flexGridSizer3302->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3302->AddGrowableCol(0);
    flexGridSizer3302->AddGrowableRow(2);
    m_leftMainSplitterPage->SetSizer(flexGridSizer3302);
    
    wxFlexGridSizer* flexGridSizer3315 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer3315->SetFlexibleDirection( wxBOTH );
    flexGridSizer3315->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3315->AddGrowableCol(1);
    
    flexGridSizer3302->Add(flexGridSizer3315, 1, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    m_btPGMinimizeTree = new wxButton(m_leftMainSplitterPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_leftMainSplitterPage, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGMinimizeTree->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-minus")), wxLEFT);
    m_btPGMinimizeTree->SetBitmapMargins(2,2);
    #endif
    m_btPGMinimizeTree->SetToolTip(_("Minimize Tree"));
    
    flexGridSizer3315->Add(m_btPGMinimizeTree, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGMinimizeTree->SetMinSize(wxSize(24,24));
    
    m_treeSearchText = new wxTextCtrl(m_leftMainSplitterPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_leftMainSplitterPage, wxSize(-1,22)), wxTE_MULTILINE);
    m_treeSearchText->SetToolTip(_("Search First in Tree"));
    
    flexGridSizer3315->Add(m_treeSearchText, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    m_treeSearchText->SetMinSize(wxSize(-1,22));
    
    m_btSearchTree = new wxButton(m_leftMainSplitterPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_leftMainSplitterPage, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btSearchTree->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-cscope")), wxLEFT);
    m_btSearchTree->SetBitmapMargins(2,2);
    #endif
    m_btSearchTree->SetToolTip(_("Search Next in Tree"));
    
    flexGridSizer3315->Add(m_btSearchTree, 0, wxALL, WXC_FROM_DIP(1));
    m_btSearchTree->SetMinSize(wxSize(24,24));
    
    flexGridSizer3302->Add(0, 3, 1, wxALL, WXC_FROM_DIP(0));
    
    m_templateTree = new wxTreeCtrl(m_leftMainSplitterPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_leftMainSplitterPage, wxSize(-1,-1)), wxTR_DEFAULT_STYLE);
    m_templateTree->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    
    flexGridSizer3302->Add(m_templateTree, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_rightMainSplitterPage = new wxPanel(m_mainSplitter, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_mainSplitter, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_mainSplitter->SplitVertically(m_leftMainSplitterPage, m_rightMainSplitterPage, 0);
    
    wxFlexGridSizer* flexGridSizer3296 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3296->SetFlexibleDirection( wxBOTH );
    flexGridSizer3296->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3296->AddGrowableCol(0);
    flexGridSizer3296->AddGrowableRow(0);
    m_rightMainSplitterPage->SetSizer(flexGridSizer3296);
    
    m_splitter3185 = new wxSplitterWindow(m_rightMainSplitterPage, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_rightMainSplitterPage, wxSize(-1,-1)), wxSP_3D);
    m_splitter3185->SetSashGravity(0.65);
    m_splitter3185->SetMinimumPaneSize(6);
    
    flexGridSizer3296->Add(m_splitter3185, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitterPage3189 = new wxPanel(m_splitter3185, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter3185, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer973 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer973->SetFlexibleDirection( wxBOTH );
    flexGridSizer973->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer973->AddGrowableCol(0);
    flexGridSizer973->AddGrowableRow(1);
    m_splitterPage3189->SetSizer(flexGridSizer973);
    
    wxFlexGridSizer* flexGridSizer3093 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3093->SetFlexibleDirection( wxBOTH );
    flexGridSizer3093->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3093->AddGrowableCol(0);
    flexGridSizer3093->AddGrowableRow(0);
    
    flexGridSizer973->Add(flexGridSizer3093, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxArrayString m_pgPathSelectorArr;
    m_pgPathSelector = new wxComboBox(m_splitterPage3189, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3189, wxSize(-1,-1)), m_pgPathSelectorArr, wxCB_SORT|wxCB_READONLY);
    m_pgPathSelector->SetToolTip(_("Path Selector"));
    m_pgPathSelector->Hide();
    m_pgPathSelector->Enable(false);
    
    flexGridSizer3093->Add(m_pgPathSelector, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer2825 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2825->SetFlexibleDirection( wxBOTH );
    flexGridSizer2825->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2825->AddGrowableCol(0);
    flexGridSizer2825->AddGrowableRow(0);
    
    flexGridSizer973->Add(flexGridSizer2825, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_splitter2932 = new wxSplitterWindow(m_splitterPage3189, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage3189, wxSize(-1,-1)), wxSP_3D);
    m_splitter2932->SetSashGravity(0.7);
    m_splitter2932->SetMinimumPaneSize(10);
    
    flexGridSizer2825->Add(m_splitter2932, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitterPage2936 = new wxPanel(m_splitter2932, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter2932, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    wxFlexGridSizer* flexGridSizer2942 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer2942->SetFlexibleDirection( wxBOTH );
    flexGridSizer2942->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2942->AddGrowableCol(0);
    flexGridSizer2942->AddGrowableRow(0);
    m_splitterPage2936->SetSizer(flexGridSizer2942);
    
    m_pgMainBook = new wxNotebook(m_splitterPage2936, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage2936, wxSize(-1,-1)), wxBK_DEFAULT);
    m_pgMainBook->SetName(wxT("m_pgMainBook"));
    wxImageList* m_pgMainBook_il = new wxImageList(16, 16);
    m_pgMainBook->AssignImageList(m_pgMainBook_il);
    
    flexGridSizer2942->Add(m_pgMainBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_pgPreviewPage = new wxPanel(m_pgMainBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgMainBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_pgPreviewPageImgIndex;
    m_pgPreviewPageImgIndex = m_pgMainBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-gtk")));
    m_pgMainBook->AddPage(m_pgPreviewPage, _("Preview"), false, m_pgPreviewPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer3332 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3332->SetFlexibleDirection( wxBOTH );
    flexGridSizer3332->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3332->AddGrowableCol(0);
    flexGridSizer3332->AddGrowableRow(0);
    m_pgPreviewPage->SetSizer(flexGridSizer3332);
    
    #if wxUSE_WEBVIEW
    m_pgPreview = wxWebView::New(m_pgPreviewPage, wxID_ANY, _("about:blank"), wxDefaultPosition, wxDLG_UNIT(m_pgPreviewPage, wxSize(-1,-1)), wxWebViewBackendDefault, 0);
    
    flexGridSizer3332->Add(m_pgPreview, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    #endif // wxUSE_WEBVIEW
    
    m_pgAdditionalCodePage = new wxPanel(m_pgMainBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgMainBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_pgAdditionalCodePageImgIndex;
    m_pgAdditionalCodePageImgIndex = m_pgMainBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-archive")));
    m_pgMainBook->AddPage(m_pgAdditionalCodePage, _("Additional Code"), false, m_pgAdditionalCodePageImgIndex);
    
    wxFlexGridSizer* flexGridSizer3414 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3414->SetFlexibleDirection( wxBOTH );
    flexGridSizer3414->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3414->AddGrowableCol(0);
    flexGridSizer3414->AddGrowableRow(0);
    m_pgAdditionalCodePage->SetSizer(flexGridSizer3414);
    
    m_aditionalCode = new wxTextCtrl(m_pgAdditionalCodePage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_pgAdditionalCodePage, wxSize(-1,-1)), wxTE_RICH|wxTE_MULTILINE|wxTE_DONTWRAP);
    m_aditionalCode->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_aditionalCode->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK));
    wxFont m_aditionalCodeFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_aditionalCode->SetFont(m_aditionalCodeFont);
    
    flexGridSizer3414->Add(m_aditionalCode, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_pgAdditionalInfoPage = new wxPanel(m_pgMainBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_pgMainBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    int m_pgAdditionalInfoPageImgIndex;
    m_pgAdditionalInfoPageImgIndex = m_pgMainBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-info")));
    m_pgMainBook->AddPage(m_pgAdditionalInfoPage, _("Build Info"), false, m_pgAdditionalInfoPageImgIndex);
    
    wxFlexGridSizer* flexGridSizer3336 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3336->SetFlexibleDirection( wxBOTH );
    flexGridSizer3336->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3336->AddGrowableCol(0);
    flexGridSizer3336->AddGrowableRow(0);
    m_pgAdditionalInfoPage->SetSizer(flexGridSizer3336);
    
    m_additionalInfo = new wxTextCtrl(m_pgAdditionalInfoPage, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_pgAdditionalInfoPage, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxHSCROLL|wxVSCROLL);
    m_additionalInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_additionalInfo->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_additionalInfoFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_additionalInfo->SetFont(m_additionalInfoFont);
    
    flexGridSizer3336->Add(m_additionalInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_splitterPage2940 = new wxPanel(m_splitter2932, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter2932, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitterPage2940->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_splitter2932->SplitHorizontally(m_splitterPage2936, m_splitterPage2940, 0);
    
    wxFlexGridSizer* flexGridSizer2944 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2944->SetFlexibleDirection( wxBOTH );
    flexGridSizer2944->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2944->AddGrowableCol(0);
    flexGridSizer2944->AddGrowableRow(1);
    m_splitterPage2940->SetSizer(flexGridSizer2944);
    
    wxFlexGridSizer* flexGridSizer3395 = new wxFlexGridSizer(0, 5, 0, 0);
    flexGridSizer3395->SetFlexibleDirection( wxBOTH );
    flexGridSizer3395->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3395->AddGrowableCol(2);
    
    flexGridSizer2944->Add(flexGridSizer3395, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText3401 = new wxStaticText(m_splitterPage2940, wxID_ANY, _("Template:"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), 0);
    m_staticText3401->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText3401Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText3401->SetFont(m_staticText3401Font);
    
    flexGridSizer3395->Add(m_staticText3401, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer3395->Add(2, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer3406 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3406->SetFlexibleDirection( wxBOTH );
    flexGridSizer3406->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3406->AddGrowableCol(0);
    flexGridSizer3406->AddGrowableRow(1);
    
    flexGridSizer3395->Add(flexGridSizer3406, 0, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    flexGridSizer3406->Add(0, 5, 1, wxALL, WXC_FROM_DIP(0));
    
    m_currentTemplate = new wxTextCtrl(m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), wxTE_READONLY|wxBORDER_NONE);
    m_currentTemplate->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_currentTemplate->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    wxFont m_currentTemplateFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_currentTemplate->SetFont(m_currentTemplateFont);
    m_currentTemplate->SetToolTip(_("Current Template"));
    #if wxVERSION_NUMBER >= 3000
    m_currentTemplate->SetHint(wxT(""));
    #endif
    
    flexGridSizer3406->Add(m_currentTemplate, 0, wxALL|wxEXPAND|wxALIGN_LEFT, WXC_FROM_DIP(0));
    
    flexGridSizer3406->Add(0, 2, 1, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer33851 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer33851->SetFlexibleDirection( wxBOTH );
    flexGridSizer33851->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3395->Add(flexGridSizer33851, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_staticText33892 = new wxStaticText(m_splitterPage2940, wxID_ANY, _("Edit mode:"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), 0);
    m_staticText33892->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText33892Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText33892->SetFont(m_staticText33892Font);
    
    flexGridSizer33851->Add(m_staticText33892, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbEditModeArr;
    m_cbEditModeArr.Add(wxT("Readonly"));
    m_cbEditModeArr.Add(wxT("Writable"));
    m_cbEditMode = new wxComboBox(m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), m_cbEditModeArr, wxCB_READONLY);
    wxFont m_cbEditModeFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_cbEditMode->SetFont(m_cbEditModeFont);
    m_cbEditMode->SetSelection(0);
    
    flexGridSizer33851->Add(m_cbEditMode, 0, wxALL, WXC_FROM_DIP(1));
    
    m_updatePreview = new wxButton(m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(22,22)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_updatePreview->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-show_current_line")), wxLEFT);
    m_updatePreview->SetBitmapMargins(2,2);
    #endif
    m_updatePreview->SetToolTip(_("Update Preview without Generate"));
    
    flexGridSizer33851->Add(m_updatePreview, 0, wxALL, WXC_FROM_DIP(0));
    m_updatePreview->SetMinSize(wxSize(22,22));
    
    wxFlexGridSizer* flexGridSizer3385 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer3385->SetFlexibleDirection( wxBOTH );
    flexGridSizer3385->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3395->Add(flexGridSizer3385, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_staticText3389 = new wxStaticText(m_splitterPage2940, wxID_ANY, _("Display mode:"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), 0);
    m_staticText3389->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText3389Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText3389->SetFont(m_staticText3389Font);
    
    flexGridSizer3385->Add(m_staticText3389, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_cbDisplayModeArr;
    m_cbDisplayModeArr.Add(wxT("Preview"));
    m_cbDisplayModeArr.Add(wxT("Result"));
    m_cbDisplayMode = new wxComboBox(m_splitterPage2940, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), m_cbDisplayModeArr, wxCB_READONLY);
    wxFont m_cbDisplayModeFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_cbDisplayMode->SetFont(m_cbDisplayModeFont);
    m_cbDisplayMode->SetSelection(0);
    
    flexGridSizer3385->Add(m_cbDisplayMode, 0, wxALL, WXC_FROM_DIP(1));
    
    m_tbOutput = new wxToolbook(m_splitterPage2940, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage2940, wxSize(-1,-1)), wxTBK_BUTTONBAR|wxBK_LEFT);
    m_tbOutput->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_tbOutput->SetName(wxT("m_tbOutput"));
    wxImageList* m_tbOutput_il = new wxImageList(16, 16);
    m_tbOutput->AssignImageList(m_tbOutput_il);
    
    flexGridSizer2944->Add(m_tbOutput, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelPreview = new wxPanel(m_tbOutput, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_tbOutput, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelPreview->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    int m_panelPreviewImgIndex;
    m_panelPreviewImgIndex = m_tbOutput_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-fold")));
    m_tbOutput->AddPage(m_panelPreview, _("Preview"), true, m_panelPreviewImgIndex);
    
    wxFlexGridSizer* flexGridSizer3233 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3233->SetFlexibleDirection( wxBOTH );
    flexGridSizer3233->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3233->AddGrowableCol(0);
    flexGridSizer3233->AddGrowableRow(0);
    m_panelPreview->SetSizer(flexGridSizer3233);
    
    m_generatedPreview = new wxTextCtrl(m_panelPreview, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelPreview, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxBORDER_NONE|wxALWAYS_SHOW_SB|wxHSCROLL|wxVSCROLL);
    m_generatedPreview->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_generatedPreview->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK));
    wxFont m_generatedPreviewFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_generatedPreview->SetFont(m_generatedPreviewFont);
    
    flexGridSizer3233->Add(m_generatedPreview, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelResult = new wxPanel(m_tbOutput, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_tbOutput, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelResult->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    int m_panelResultImgIndex;
    m_panelResultImgIndex = m_tbOutput_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-globals")));
    m_tbOutput->AddPage(m_panelResult, _("Result"), false, m_panelResultImgIndex);
    
    wxFlexGridSizer* flexGridSizer3235 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3235->SetFlexibleDirection( wxBOTH );
    flexGridSizer3235->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3235->AddGrowableCol(0);
    flexGridSizer3235->AddGrowableRow(0);
    m_panelResult->SetSizer(flexGridSizer3235);
    
    m_generatedResult = new wxTextCtrl(m_panelResult, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelResult, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxBORDER_NONE|wxALWAYS_SHOW_SB|wxHSCROLL|wxVSCROLL);
    m_generatedResult->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_generatedResult->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFont m_generatedResultFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_generatedResult->SetFont(m_generatedResultFont);
    
    flexGridSizer3235->Add(m_generatedResult, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelInfo = new wxPanel(m_tbOutput, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_tbOutput, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    int m_panelInfoImgIndex;
    m_panelInfoImgIndex = m_tbOutput_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("16-info")));
    m_tbOutput->AddPage(m_panelInfo, _("Info"), false, m_panelInfoImgIndex);
    
    wxFlexGridSizer* flexGridSizer3286 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3286->SetFlexibleDirection( wxBOTH );
    flexGridSizer3286->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3286->AddGrowableCol(0);
    flexGridSizer3286->AddGrowableRow(0);
    m_panelInfo->SetSizer(flexGridSizer3286);
    
    m_processInfo = new wxTextCtrl(m_panelInfo, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelInfo, wxSize(-1,-1)), wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxBORDER_NONE);
    m_processInfo->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_processInfoFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_processInfo->SetFont(m_processInfoFont);
    
    flexGridSizer3286->Add(m_processInfo, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_splitterPage3193 = new wxPanel(m_splitter3185, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitter3185, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitter3185->SplitVertically(m_splitterPage3189, m_splitterPage3193, 0);
    
    wxFlexGridSizer* flexGridSizer986 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer986->SetFlexibleDirection( wxBOTH );
    flexGridSizer986->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer986->AddGrowableCol(0);
    flexGridSizer986->AddGrowableRow(1);
    m_splitterPage3193->SetSizer(flexGridSizer986);
    
    wxFlexGridSizer* flexGridSizer2874 = new wxFlexGridSizer(1, 6, 0, 0);
    flexGridSizer2874->SetFlexibleDirection( wxBOTH );
    flexGridSizer2874->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2874->AddGrowableCol(4);
    flexGridSizer2874->AddGrowableRow(0);
    
    flexGridSizer986->Add(flexGridSizer2874, 0, wxALL|wxEXPAND|wxALIGN_BOTTOM, WXC_FROM_DIP(1));
    
    m_btPGGenerate = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGGenerate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-cog")), wxLEFT);
    m_btPGGenerate->SetBitmapMargins(2,2);
    #endif
    m_btPGGenerate->SetToolTip(_("Generate"));
    
    flexGridSizer2874->Add(m_btPGGenerate, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGGenerate->SetMinSize(wxSize(24,24));
    
    m_btPGClear = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGClear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btPGClear->SetBitmapMargins(2,2);
    #endif
    m_btPGClear->SetToolTip(_("Clear"));
    
    flexGridSizer2874->Add(m_btPGClear, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGClear->SetMinSize(wxSize(24,24));
    
    m_btPGReplaceEdit = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGReplaceEdit->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-marker")), wxLEFT);
    m_btPGReplaceEdit->SetBitmapMargins(2,2);
    #endif
    m_btPGReplaceEdit->SetToolTip(_("Replace at Edit Control"));
    
    flexGridSizer2874->Add(m_btPGReplaceEdit, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGReplaceEdit->SetMinSize(wxSize(24,24));
    
    m_btPGCopy = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGCopy->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-copy")), wxLEFT);
    m_btPGCopy->SetBitmapMargins(2,2);
    #endif
    m_btPGCopy->SetToolTip(_("Copy"));
    
    flexGridSizer2874->Add(m_btPGCopy, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGCopy->SetMinSize(wxSize(24,24));
    
    m_btPGSave = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGSave->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxLEFT);
    m_btPGSave->SetBitmapMargins(2,2);
    #endif
    m_btPGSave->SetToolTip(_("Save Template"));
    
    flexGridSizer2874->Add(m_btPGSave, 0, wxALL, WXC_FROM_DIP(1));
    m_btPGSave->SetMinSize(wxSize(24,24));
    
    wxFlexGridSizer* flexGridSizer3225 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer3225->SetFlexibleDirection( wxBOTH );
    flexGridSizer3225->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer2874->Add(flexGridSizer3225, 0, wxALL|wxALIGN_RIGHT|wxALIGN_BOTTOM, WXC_FROM_DIP(0));
    
    m_btPGMinimize = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGMinimize->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-minus")), wxLEFT);
    m_btPGMinimize->SetBitmapMargins(2,2);
    #endif
    m_btPGMinimize->SetToolTip(_("Toggle Size"));
    
    flexGridSizer3225->Add(m_btPGMinimize, 0, wxALL|wxALIGN_BOTTOM, WXC_FROM_DIP(1));
    m_btPGMinimize->SetMinSize(wxSize(24,24));
    
    m_btPGClose = new wxButton(m_splitterPage3193, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(24,24)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPGClose->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-file_close")), wxLEFT);
    m_btPGClose->SetBitmapMargins(2,2);
    #endif
    m_btPGClose->SetToolTip(_("Close"));
    
    flexGridSizer3225->Add(m_btPGClose, 0, wxALL|wxALIGN_BOTTOM, WXC_FROM_DIP(1));
    m_btPGClose->SetMinSize(wxSize(24,24));
    
    wxFlexGridSizer* flexGridSizer2972 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2972->SetFlexibleDirection( wxBOTH );
    flexGridSizer2972->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2972->AddGrowableCol(0);
    flexGridSizer2972->AddGrowableRow(0);
    
    flexGridSizer986->Add(flexGridSizer2972, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxArrayString m_pgParameterMgrArr;
    wxUnusedVar(m_pgParameterMgrArr);
    wxArrayInt m_pgParameterMgrIntArr;
    wxUnusedVar(m_pgParameterMgrIntArr);
    m_pgParameterMgr = new wxPropertyGridManager(m_splitterPage3193, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(-1,-1)), wxPG_DESCRIPTION|wxPG_LIMITED_EDITING|wxPG_TOOLTIPS|wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    wxFont m_pgParameterMgrFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_pgParameterMgr->SetFont(m_pgParameterMgrFont);
    
    flexGridSizer2972->Add(m_pgParameterMgr, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_pgCatCommon = m_pgParameterMgr->Append(  new wxPropertyCategory( _("Common Path Parameters:") ) );
    m_pgCatCommon->SetHelpString(wxT(""));
    
    m_pgPropToolDiameter = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxStringProperty( _("Tool Diameter [mm]"), wxPG_LABEL, _("3.125")) );
    m_pgPropToolDiameter->SetHelpString(wxT(""));
    
    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("none"));
    m_pgParameterMgrArr.Add(_("inner"));
    m_pgParameterMgrArr.Add(_("outer"));
    m_pgPropCorrectionMode = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxEnumProperty( _("Tool Correction"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0) );
    m_pgPropCorrectionMode->SetHelpString(wxT(""));
    
    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("Round"));
    m_pgParameterMgrArr.Add(_("Square"));
    m_pgParameterMgrArr.Add(_("Miter"));
    m_pgPropCorrectionJointType = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxEnumProperty( _("Tool Correction Joint Type"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0) );
    m_pgPropCorrectionJointType->SetHelpString(wxT(""));
    
    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("0.001"));
    m_pgParameterMgrArr.Add(_("0.002"));
    m_pgParameterMgrArr.Add(_("0.003"));
    m_pgParameterMgrArr.Add(_("0.004"));
    m_pgParameterMgrArr.Add(_("0.005"));
    m_pgParameterMgrArr.Add(_("0.006"));
    m_pgParameterMgrArr.Add(_("0.007"));
    m_pgParameterMgrArr.Add(_("0.008"));
    m_pgParameterMgrArr.Add(_("0.009"));
    m_pgParameterMgrArr.Add(_("0.010"));
    m_pgParameterMgrArr.Add(_("0.020"));
    m_pgParameterMgrArr.Add(_("0.030"));
    m_pgParameterMgrArr.Add(_("0.050"));
    m_pgParameterMgrArr.Add(_("0.060"));
    m_pgParameterMgrArr.Add(_("0.070"));
    m_pgParameterMgrArr.Add(_("0.080"));
    m_pgParameterMgrArr.Add(_("0.090"));
    m_pgParameterMgrArr.Add(_("0.100"));
    m_pgPropCLResolution = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxEnumProperty( _("Curve Lib Resolution"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0) );
    m_pgPropCLResolution->SetHelpString(wxT(""));
    
    m_pgPropPathColour = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxSystemColourProperty( _("Colour"), wxPG_LABEL, wxColour(wxT("rgb(0,0,0)"))) );
    m_pgPropPathColour->SetHelpString(wxT(""));
    m_pgPropPathColour->SetEditor( wxT("ChoiceAndButton") );
    
    m_pgPropConfigBlock = m_pgParameterMgr->AppendIn( m_pgCatCommon,  new wxBoolProperty( _("Config Block"), wxPG_LABEL, 1) );
    m_pgPropConfigBlock->SetHelpString(wxT(""));
    
    m_pgCatPath = m_pgParameterMgr->Append(  new wxPropertyCategory( _("Path Template Parameters") ) );
    m_pgCatPath->SetHelpString(wxT(""));
    
    m_pgProp01 = m_pgParameterMgr->AppendIn( m_pgCatPath,  new wxStringProperty( _("Dummy Para"), wxPG_LABEL, _("0")) );
    m_pgProp01->SetHelpString(wxT(""));
    
    m_pgCatGrid = m_pgParameterMgr->Append(  new wxPropertyCategory( _("Grid") ) );
    m_pgCatGrid->SetHelpString(wxT(""));
    
    m_pgPropRefCross = m_pgParameterMgr->AppendIn( m_pgCatGrid,  new wxBoolProperty( _("Reference Cross"), wxPG_LABEL, 1) );
    m_pgPropRefCross->SetHelpString(wxT(""));
    
    m_pgPropGridHelpConstructs = m_pgParameterMgr->AppendIn( m_pgCatGrid,  new wxBoolProperty( _("Help Constructs"), wxPG_LABEL, 1) );
    m_pgPropGridHelpConstructs->SetHelpString(wxT(""));
    
    m_pgPropGridDisplay = m_pgParameterMgr->AppendIn( m_pgCatGrid,  new wxBoolProperty( _("Display Grid"), wxPG_LABEL, 1) );
    m_pgPropGridDisplay->SetHelpString(wxT(""));
    
    m_pgPropGridSize = m_pgParameterMgr->AppendIn( m_pgCatGrid,  new wxStringProperty( _("Size [mm]"), wxPG_LABEL, wxT("")) );
    m_pgPropGridSize->SetHelpString(wxT(""));
    
    m_pgCatCncBlock = m_pgParameterMgr->Append(  new wxPropertyCategory( _("Cnc Block") ) );
    m_pgCatCncBlock->SetHelpString(wxT(""));
    
    m_pgPropCncInclude = m_pgParameterMgr->AppendIn( m_pgCatCncBlock,  new wxBoolProperty( _("Include"), wxPG_LABEL, 1) );
    m_pgPropCncInclude->SetHelpString(wxT(""));
    
    m_pgCatCncParameter = m_pgParameterMgr->AppendIn( m_pgCatCncBlock,  new wxPropertyCategory( _("Parameter") ) );
    m_pgCatCncParameter->SetHelpString(wxT(""));
    
    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("z - relative"));
    m_pgParameterMgrArr.Add(_("Z - absolute"));
    m_pgPropCncZDepthMode = m_pgParameterMgr->AppendIn( m_pgCatCncParameter,  new wxEnumProperty( _("Z Depth Mode"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0) );
    m_pgPropCncZDepthMode->SetHelpString(wxT(""));
    
    m_pgPropCncZDepth = m_pgParameterMgr->AppendIn( m_pgCatCncParameter,  new wxStringProperty( _("Z Depth"), wxPG_LABEL, _("0")) );
    m_pgPropCncZDepth->SetHelpString(wxT(""));
    
    m_pgParameterMgrArr.Clear();
    m_pgParameterMgrIntArr.Clear();
    m_pgParameterMgrArr.Add(_("none"));
    m_pgParameterMgrArr.Add(_("inner"));
    m_pgParameterMgrArr.Add(_("outer"));
    m_pgPropCncToolCorrection = m_pgParameterMgr->AppendIn( m_pgCatCncParameter,  new wxEnumProperty( _("Tool Correction"), wxPG_LABEL, m_pgParameterMgrArr, m_pgParameterMgrIntArr, 0) );
    m_pgPropCncToolCorrection->SetHelpString(wxT(""));
    
    m_pgPropCncReversePath = m_pgParameterMgr->AppendIn( m_pgCatCncParameter,  new wxBoolProperty( _("Reverse Path"), wxPG_LABEL, 0) );
    m_pgPropCncReversePath->SetHelpString(wxT(""));
    
    m_pgCatSvg = m_pgParameterMgr->Append(  new wxPropertyCategory( _("<SVG/>") ) );
    m_pgCatSvg->SetHelpString(wxT(""));
    
    m_pgPropSvgWidth = m_pgParameterMgr->AppendIn( m_pgCatSvg,  new wxStringProperty( _("Width [mm]"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgWidth->SetHelpString(wxT(""));
    m_pgPropSvgWidth->SetEditor( wxT("TextCtrl") );
    
    m_pgPropSvgHeight = m_pgParameterMgr->AppendIn( m_pgCatSvg,  new wxStringProperty( _("Height [mm]"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgHeight->SetHelpString(wxT(""));
    m_pgPropSvgHeight->SetEditor( wxT("TextCtrl") );
    
    m_pgCatViewBox = m_pgParameterMgr->AppendIn( m_pgCatSvg,  new wxPropertyCategory( _("ViewBox") ) );
    m_pgCatViewBox->SetHelpString(wxT(""));
    
    m_pgPropSvgVbX = m_pgParameterMgr->AppendIn( m_pgCatViewBox,  new wxStringProperty( _("X"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgVbX->SetHelpString(wxT(""));
    
    m_pgPropSvgVbY = m_pgParameterMgr->AppendIn( m_pgCatViewBox,  new wxStringProperty( _("Y"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgVbY->SetHelpString(wxT(""));
    
    m_pgPropSvgVbW = m_pgParameterMgr->AppendIn( m_pgCatViewBox,  new wxStringProperty( _("W"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgVbW->SetHelpString(wxT(""));
    
    m_pgPropSvgVbH = m_pgParameterMgr->AppendIn( m_pgCatViewBox,  new wxStringProperty( _("H"), wxPG_LABEL, wxT("")) );
    m_pgPropSvgVbH->SetHelpString(wxT(""));
    
    m_pgCatTransform = m_pgParameterMgr->AppendIn( m_pgCatSvg,  new wxPropertyCategory( _("Transform") ) );
    m_pgCatTransform->SetHelpString(wxT(""));
    
    m_pgPropTransformMode = m_pgParameterMgr->AppendIn( m_pgCatTransform,  new wxBoolProperty( _("Auto Mode"), wxPG_LABEL, 1) );
    m_pgPropTransformMode->SetHelpString(wxT(""));
    
    m_pgCatTranslate = m_pgParameterMgr->AppendIn( m_pgCatTransform,  new wxPropertyCategory( _("Translate") ) );
    m_pgCatTranslate->SetHelpString(wxT(""));
    
    m_pgPropTranslateX = m_pgParameterMgr->AppendIn( m_pgCatTranslate,  new wxStringProperty( _("X [mm]"), wxPG_LABEL, _("0")) );
    m_pgPropTranslateX->SetHelpString(wxT(""));
    m_pgPropTranslateX->SetEditor( wxT("TextCtrl") );
    
    m_pgPropTranslateY = m_pgParameterMgr->AppendIn( m_pgCatTranslate,  new wxStringProperty( _("Y [mm]"), wxPG_LABEL, _("0")) );
    m_pgPropTranslateY->SetHelpString(wxT(""));
    m_pgPropTranslateY->SetEditor( wxT("TextCtrl") );
    
    m_pgCatScale = m_pgParameterMgr->AppendIn( m_pgCatTransform,  new wxPropertyCategory( _("Scale") ) );
    m_pgCatScale->SetHelpString(wxT(""));
    
    m_pgPropScaleX = m_pgParameterMgr->AppendIn( m_pgCatScale,  new wxStringProperty( _("X [factor]"), wxPG_LABEL, _("1")) );
    m_pgPropScaleX->SetHelpString(wxT(""));
    m_pgPropScaleX->SetEditor( wxT("TextCtrl") );
    
    m_pgPropScaleY = m_pgParameterMgr->AppendIn( m_pgCatScale,  new wxStringProperty( _("Y [factor]"), wxPG_LABEL, _("1")) );
    m_pgPropScaleY->SetHelpString(wxT(""));
    m_pgPropScaleY->SetEditor( wxT("TextCtrl") );
    
    m_pgCatRotate = m_pgParameterMgr->AppendIn( m_pgCatTransform,  new wxPropertyCategory( _("Rotate") ) );
    m_pgCatRotate->SetHelpString(wxT(""));
    
    m_pgPropRotateA = m_pgParameterMgr->AppendIn( m_pgCatRotate,  new wxStringProperty( _("Angle [degree]"), wxPG_LABEL, _("0")) );
    m_pgPropRotateA->SetHelpString(wxT(""));
    m_pgPropRotateA->SetEditor( wxT("TextCtrl") );
    
    m_pgPropRotateX = m_pgParameterMgr->AppendIn( m_pgCatRotate,  new wxStringProperty( _("Translate X [mm]"), wxPG_LABEL, _("0")) );
    m_pgPropRotateX->SetHelpString(wxT(""));
    m_pgPropRotateX->SetEditor( wxT("TextCtrl") );
    
    m_pgPropRotateY = m_pgParameterMgr->AppendIn( m_pgCatRotate,  new wxStringProperty( _("Translate Y [mm]"), wxPG_LABEL, _("0")) );
    m_pgPropRotateY->SetHelpString(wxT(""));
    m_pgPropRotateY->SetEditor( wxT("TextCtrl") );
    
    m_pgCatSkrew = m_pgParameterMgr->AppendIn( m_pgCatTransform,  new wxPropertyCategory( _("Skrew") ) );
    m_pgCatSkrew->SetHelpString(wxT(""));
    
    m_pgPropSkewX = m_pgParameterMgr->AppendIn( m_pgCatSkrew,  new wxStringProperty( _("X [degree]"), wxPG_LABEL, _("0")) );
    m_pgPropSkewX->SetHelpString(wxT(""));
    m_pgPropSkewX->SetEditor( wxT("TextCtrl") );
    
    m_pgPropSkewY = m_pgParameterMgr->AppendIn( m_pgCatSkrew,  new wxStringProperty( _("Y [degree]"), wxPG_LABEL, _("0")) );
    m_pgPropSkewY->SetHelpString(wxT(""));
    m_pgPropSkewY->SetEditor( wxT("TextCtrl") );
    
    m_autoGenerate = new wxCheckBox(m_splitterPage3193, wxID_ANY, _("Auto Generate"), wxDefaultPosition, wxDLG_UNIT(m_splitterPage3193, wxSize(-1,-1)), 0);
    m_autoGenerate->SetValue(true);
    m_autoGenerate->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_autoGenerateFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_autoGenerate->SetFont(m_autoGenerateFont);
    m_autoGenerate->SetToolTip(_("Regenerate the template automatically if a any parameter was changed"));
    
    flexGridSizer2972->Add(m_autoGenerate, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_pgMainBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_pgMainBook);
    } else {
        wxPersistenceManager::Get().Restore(m_pgMainBook);
    }
    #endif
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_tbOutput)){
        wxPersistenceManager::Get().RegisterAndRestore(m_tbOutput);
    } else {
        wxPersistenceManager::Get().Restore(m_tbOutput);
    }
    #endif
    
    SetName(wxT("PathGeneratorFrameBase"));
    SetSize(600,750);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(PathGeneratorFrameBase::onCloseWindow), NULL, this);
    this->Connect(wxEVT_SIZE, wxSizeEventHandler(PathGeneratorFrameBase::onSize), NULL, this);
    this->Connect(wxEVT_ACTIVATE, wxActivateEventHandler(PathGeneratorFrameBase::onActivate), NULL, this);
    this->Connect(wxEVT_MAXIMIZE, wxMaximizeEventHandler(PathGeneratorFrameBase::onMaximize), NULL, this);
    this->Connect(wxEVT_SHOW, wxShowEventHandler(PathGeneratorFrameBase::onShow), NULL, this);
    m_mainSplitter->Connect(wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED,  wxSplitterEventHandler(PathGeneratorFrameBase::mainShashPositionChanged), NULL, this);
    m_mainSplitter->Connect(wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING,  wxSplitterEventHandler(PathGeneratorFrameBase::mainShashPositionChanging), NULL, this);
    m_btPGMinimizeTree->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::toogleTreeSize), NULL, this);
    m_treeSearchText->Connect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PathGeneratorFrameBase::updateTreeSearch), NULL, this);
    m_treeSearchText->Connect(wxEVT_KEY_DOWN, wxKeyEventHandler(PathGeneratorFrameBase::keyDownTreeSearch), NULL, this);
    m_btSearchTree->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::treeSearch), NULL, this);
    m_templateTree->Connect(wxEVT_COMMAND_TREE_SEL_CHANGED, wxTreeEventHandler(PathGeneratorFrameBase::selectTemplateTree), NULL, this);
    m_pgPathSelector->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectPathSelector), NULL, this);
    m_pgMainBook->Connect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(PathGeneratorFrameBase::pgMainBookChanged), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_cbEditMode->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectEditMode), NULL, this);
    m_updatePreview->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::updatePreview), NULL, this);
    m_cbDisplayMode->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectDisplayMode), NULL, this);
    m_btPGGenerate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::generatePath), NULL, this);
    m_btPGClear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::clearView), NULL, this);
    m_btPGReplaceEdit->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::relaceEditControlSelection), NULL, this);
    m_btPGCopy->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::copyPath), NULL, this);
    m_btPGSave->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::saveTemplate), NULL, this);
    m_btPGMinimize->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::toogleSize), NULL, this);
    m_btPGClose->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::onCloseWindowFromButton), NULL, this);
    m_pgParameterMgr->Connect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(PathGeneratorFrameBase::propertyChanged), NULL, this);
    m_pgParameterMgr->Connect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(PathGeneratorFrameBase::propertyChanging), NULL, this);
    m_autoGenerate->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::checkAutoGenerate), NULL, this);
    
}

PathGeneratorFrameBase::~PathGeneratorFrameBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(PathGeneratorFrameBase::onCloseWindow), NULL, this);
    this->Disconnect(wxEVT_SIZE, wxSizeEventHandler(PathGeneratorFrameBase::onSize), NULL, this);
    this->Disconnect(wxEVT_ACTIVATE, wxActivateEventHandler(PathGeneratorFrameBase::onActivate), NULL, this);
    this->Disconnect(wxEVT_MAXIMIZE, wxMaximizeEventHandler(PathGeneratorFrameBase::onMaximize), NULL, this);
    this->Disconnect(wxEVT_SHOW, wxShowEventHandler(PathGeneratorFrameBase::onShow), NULL, this);
    m_mainSplitter->Disconnect(wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED,  wxSplitterEventHandler(PathGeneratorFrameBase::mainShashPositionChanged), NULL, this);
    m_mainSplitter->Disconnect(wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING,  wxSplitterEventHandler(PathGeneratorFrameBase::mainShashPositionChanging), NULL, this);
    m_btPGMinimizeTree->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::toogleTreeSize), NULL, this);
    m_treeSearchText->Disconnect(wxEVT_COMMAND_TEXT_UPDATED, wxCommandEventHandler(PathGeneratorFrameBase::updateTreeSearch), NULL, this);
    m_treeSearchText->Disconnect(wxEVT_KEY_DOWN, wxKeyEventHandler(PathGeneratorFrameBase::keyDownTreeSearch), NULL, this);
    m_btSearchTree->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::treeSearch), NULL, this);
    m_templateTree->Disconnect(wxEVT_COMMAND_TREE_SEL_CHANGED, wxTreeEventHandler(PathGeneratorFrameBase::selectTemplateTree), NULL, this);
    m_pgPathSelector->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectPathSelector), NULL, this);
    m_pgMainBook->Disconnect(wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, wxNotebookEventHandler(PathGeneratorFrameBase::pgMainBookChanged), NULL, this);
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    m_cbEditMode->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectEditMode), NULL, this);
    m_updatePreview->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::updatePreview), NULL, this);
    m_cbDisplayMode->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(PathGeneratorFrameBase::selectDisplayMode), NULL, this);
    m_btPGGenerate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::generatePath), NULL, this);
    m_btPGClear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::clearView), NULL, this);
    m_btPGReplaceEdit->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::relaceEditControlSelection), NULL, this);
    m_btPGCopy->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::copyPath), NULL, this);
    m_btPGSave->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::saveTemplate), NULL, this);
    m_btPGMinimize->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::toogleSize), NULL, this);
    m_btPGClose->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::onCloseWindowFromButton), NULL, this);
    m_pgParameterMgr->Disconnect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(PathGeneratorFrameBase::propertyChanged), NULL, this);
    m_pgParameterMgr->Disconnect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(PathGeneratorFrameBase::propertyChanging), NULL, this);
    m_autoGenerate->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(PathGeneratorFrameBase::checkAutoGenerate), NULL, this);
    
}

CncFilePreviewBase::CncFilePreviewBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer3760 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3760->SetFlexibleDirection( wxBOTH );
    flexGridSizer3760->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3760->AddGrowableCol(0);
    flexGridSizer3760->AddGrowableRow(0);
    this->SetSizer(flexGridSizer3760);
    
    m_previewBook = new wxSimplebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_previewBook->SetName(wxT("m_previewBook"));
    m_previewBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer3760->Add(m_previewBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panel3764 = new wxPanel(m_previewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_previewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_previewBook->AddPage(m_panel3764, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer3768 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3768->SetFlexibleDirection( wxBOTH );
    flexGridSizer3768->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3768->AddGrowableCol(0);
    flexGridSizer3768->AddGrowableRow(0);
    m_panel3764->SetSizer(flexGridSizer3768);
    
    #if wxUSE_WEBVIEW
    m_svgPreview = wxWebView::New(m_panel3764, wxID_ANY, _("about:blank"), wxDefaultPosition, wxDLG_UNIT(m_panel3764, wxSize(-1,-1)), wxWebViewBackendDefault, 0);
    m_svgPreview->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    flexGridSizer3768->Add(m_svgPreview, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    #endif // wxUSE_WEBVIEW
    
    m_panel3766 = new wxPanel(m_previewBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_previewBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_previewBook->AddPage(m_panel3766, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer3772 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3772->SetFlexibleDirection( wxBOTH );
    flexGridSizer3772->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3772->AddGrowableCol(0);
    flexGridSizer3772->AddGrowableRow(0);
    m_panel3766->SetSizer(flexGridSizer3772);
    
    m_gcodePreviewPlaceholder = new wxPanel(m_panel3766, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel3766, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_gcodePreviewPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    m_gcodePreviewPlaceholder->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer3772->Add(m_gcodePreviewPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    SetName(wxT("CncFilePreviewBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    
}

CncFilePreviewBase::~CncFilePreviewBase()
{
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    
}

CncToolMagazineBase::CncToolMagazineBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer4592 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer4592->SetFlexibleDirection( wxBOTH );
    flexGridSizer4592->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4592->AddGrowableCol(0);
    flexGridSizer4592->AddGrowableRow(0);
    this->SetSizer(flexGridSizer4592);
    
    wxFlexGridSizer* flexGridSizer4595 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer4595->SetFlexibleDirection( wxBOTH );
    flexGridSizer4595->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4595->AddGrowableCol(0);
    flexGridSizer4595->AddGrowableRow(0);
    
    flexGridSizer4592->Add(flexGridSizer4595, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer4620 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer4620->SetFlexibleDirection( wxBOTH );
    flexGridSizer4620->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4620->AddGrowableCol(0);
    flexGridSizer4620->AddGrowableRow(0);
    
    flexGridSizer4595->Add(flexGridSizer4620, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_toolMagazine = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLC_SINGLE_SEL|wxLC_REPORT);
    
    flexGridSizer4620->Add(m_toolMagazine, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticLine4628 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer4620->Add(m_staticLine4628, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer4607 = new wxFlexGridSizer(1, 7, 0, 0);
    flexGridSizer4607->SetFlexibleDirection( wxBOTH );
    flexGridSizer4607->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4607->AddGrowableCol(5);
    flexGridSizer4607->AddGrowableRow(0);
    
    flexGridSizer4620->Add(flexGridSizer4607, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText4609 = new wxStaticText(this, wxID_ANY, _("ID:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer4607->Add(m_staticText4609, 0, wxALL, WXC_FROM_DIP(5));
    
    m_toolMagazineId = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(30,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_toolMagazineId->SetHint(wxT(""));
    #endif
    
    flexGridSizer4607->Add(m_toolMagazineId, 0, wxALL, WXC_FROM_DIP(1));
    m_toolMagazineId->SetMinSize(wxSize(30,-1));
    
    m_staticText4613 = new wxStaticText(this, wxID_ANY, _("Type:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer4607->Add(m_staticText4613, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_toolMagazineTypeArr;
    m_toolMagazineTypeArr.Add(wxT("PEN"));
    m_toolMagazineTypeArr.Add(wxT("BIT"));
    m_toolMagazineType = new wxComboBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_toolMagazineTypeArr, wxCB_READONLY);
    m_toolMagazineType->SetSelection(0);
    
    flexGridSizer4607->Add(m_toolMagazineType, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticText4617 = new wxStaticText(this, wxID_ANY, _("Diameter:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer4607->Add(m_staticText4617, 0, wxALL, WXC_FROM_DIP(5));
    
    m_toolMagazineDiameter = new wxTextCtrl(this, wxID_ANY, wxT("0.000"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_toolMagazineDiameter->SetHint(wxT(""));
    #endif
    
    flexGridSizer4607->Add(m_toolMagazineDiameter, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText4626 = new wxStaticText(this, wxID_ANY, _("[mm]"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer4607->Add(m_staticText4626, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer4636 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer4636->SetFlexibleDirection( wxBOTH );
    flexGridSizer4636->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer4636->AddGrowableCol(2);
    flexGridSizer4636->AddGrowableRow(0);
    
    flexGridSizer4620->Add(flexGridSizer4636, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText4638 = new wxStaticText(this, wxID_ANY, _("Comment:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer4636->Add(m_staticText4638, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizer4636->Add(27, 0, 1, wxALL, WXC_FROM_DIP(0));
    
    m_toolMagazineComment = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_toolMagazineComment->SetHint(wxT(""));
    #endif
    
    flexGridSizer4636->Add(m_toolMagazineComment, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer4597 = new wxFlexGridSizer(0, 1, 0, 0);
    flexGridSizer4597->SetFlexibleDirection( wxBOTH );
    flexGridSizer4597->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer4595->Add(flexGridSizer4597, 1, wxALL|wxEXPAND|wxALIGN_BOTTOM, WXC_FROM_DIP(0));
    
    m_btToolMagazineRemove = new wxButton(this, wxID_ANY, _("Remove"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,28)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btToolMagazineRemove->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("plugin-delete")), wxLEFT);
    m_btToolMagazineRemove->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4597->Add(m_btToolMagazineRemove, 0, wxALL, WXC_FROM_DIP(1));
    m_btToolMagazineRemove->SetMinSize(wxSize(90,28));
    
    m_btToolMagazineAdd = new wxButton(this, wxID_ANY, _("New"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,28)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btToolMagazineAdd->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("plugin-add")), wxLEFT);
    m_btToolMagazineAdd->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4597->Add(m_btToolMagazineAdd, 0, wxALL, WXC_FROM_DIP(1));
    m_btToolMagazineAdd->SetMinSize(wxSize(90,28));
    
    flexGridSizer4597->Add(0, 4, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticLine4624 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer4597->Add(m_staticLine4624, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_btToolMagazineEdit = new wxButton(this, wxID_ANY, _("Update"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,28)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btToolMagazineEdit->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("plugin-edit")), wxLEFT);
    m_btToolMagazineEdit->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4597->Add(m_btToolMagazineEdit, 0, wxALL, WXC_FROM_DIP(1));
    m_btToolMagazineEdit->SetMinSize(wxSize(90,28));
    
    m_btToolMagazineCancle = new wxButton(this, wxID_ANY, _("Cancle"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,28)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btToolMagazineCancle->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("dialog-cancel-3")), wxLEFT);
    m_btToolMagazineCancle->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer4597->Add(m_btToolMagazineCancle, 0, wxALL, WXC_FROM_DIP(1));
    m_btToolMagazineCancle->SetMinSize(wxSize(90,28));
    
    SetName(wxT("CncToolMagazineBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_toolMagazine->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CncToolMagazineBase::selectedTool), NULL, this);
    m_btToolMagazineRemove->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::removeTool), NULL, this);
    m_btToolMagazineAdd->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::addTool), NULL, this);
    m_btToolMagazineEdit->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::editTool), NULL, this);
    m_btToolMagazineCancle->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::cancel), NULL, this);
    
}

CncToolMagazineBase::~CncToolMagazineBase()
{
    m_toolMagazine->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CncToolMagazineBase::selectedTool), NULL, this);
    m_btToolMagazineRemove->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::removeTool), NULL, this);
    m_btToolMagazineAdd->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::addTool), NULL, this);
    m_btToolMagazineEdit->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::editTool), NULL, this);
    m_btToolMagazineCancle->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncToolMagazineBase::cancel), NULL, this);
    
}

CncFilePreviewWndBase::CncFilePreviewWndBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("chart-line-edit"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer3782 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3782->SetFlexibleDirection( wxBOTH );
    flexGridSizer3782->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3782->AddGrowableCol(0);
    flexGridSizer3782->AddGrowableRow(1);
    this->SetSizer(flexGridSizer3782);
    
    wxFlexGridSizer* flexGridSizer3786 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3786->SetFlexibleDirection( wxBOTH );
    flexGridSizer3786->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3786->AddGrowableCol(0);
    
    flexGridSizer3782->Add(flexGridSizer3786, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_previewFileName = new wxTextCtrl(this, wxID_ANY, wxT("File name"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,20)), wxTE_READONLY);
    m_previewFileName->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    m_previewFileName->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_previewFileNameFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_previewFileName->SetFont(m_previewFileNameFont);
    #if wxVERSION_NUMBER >= 3000
    m_previewFileName->SetHint(wxT(""));
    #endif
    
    flexGridSizer3786->Add(m_previewFileName, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_previewFileName->SetMinSize(wxSize(-1,20));
    
    m_previewFileType = new wxTextCtrl(this, wxID_ANY, wxT("Type"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,20)), wxTE_READONLY|wxTE_CENTRE);
    m_previewFileType->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    m_previewFileType->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    wxFont m_previewFileTypeFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_previewFileType->SetFont(m_previewFileTypeFont);
    #if wxVERSION_NUMBER >= 3000
    m_previewFileType->SetHint(wxT(""));
    #endif
    
    flexGridSizer3786->Add(m_previewFileType, 0, wxALL, WXC_FROM_DIP(0));
    m_previewFileType->SetMinSize(wxSize(-1,20));
    
    m_previewPlaceHolder = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_previewPlaceHolder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    m_previewPlaceHolder->SetToolTip(_("Only a placeholder"));
    
    flexGridSizer3782->Add(m_previewPlaceHolder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    SetName(wxT("CncFilePreviewWndBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(CncFilePreviewWndBase::onClose), NULL, this);
    
}

CncFilePreviewWndBase::~CncFilePreviewWndBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(CncFilePreviewWndBase::onClose), NULL, this);
    
}

CncFileViewBase::CncFileViewBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer3841 = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer3841->SetFlexibleDirection( wxBOTH );
    flexGridSizer3841->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3841->AddGrowableCol(0);
    flexGridSizer3841->AddGrowableRow(1);
    this->SetSizer(flexGridSizer3841);
    
    wxFlexGridSizer* flexGridSizer3847 = new wxFlexGridSizer(0, 8, 0, 0);
    flexGridSizer3847->SetFlexibleDirection( wxBOTH );
    flexGridSizer3847->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3841->Add(flexGridSizer3847, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_bmpButton3851 = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("go-up-search")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), wxBU_AUTODRAW);
    m_bmpButton3851->SetToolTip(_(".."));
    
    flexGridSizer3847->Add(m_bmpButton3851, 0, wxALL, WXC_FROM_DIP(0));
    m_bmpButton3851->SetMinSize(wxSize(24,24));
    
    m_bmpButton38751 = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("view-refresh-3")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), wxBU_AUTODRAW);
    m_bmpButton38751->SetToolTip(_("Refresh"));
    
    flexGridSizer3847->Add(m_bmpButton38751, 0, wxALL, WXC_FROM_DIP(0));
    m_bmpButton38751->SetMinSize(wxSize(24,24));
    
    m_bmpButton38754 = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("workspace")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(24,24)), wxBU_AUTODRAW);
    m_bmpButton38754->SetToolTip(_("Select Default Path"));
    
    flexGridSizer3847->Add(m_bmpButton38754, 0, wxALL, WXC_FROM_DIP(0));
    m_bmpButton38754->SetMinSize(wxSize(24,24));
    
    m_fileList = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLC_VRULES|wxLC_HRULES|wxLC_SINGLE_SEL|wxLC_REPORT);
    
    flexGridSizer3841->Add(m_fileList, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxArrayString m_filterExtentionArr;
    m_filterExtention = new wxComboBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_filterExtentionArr, wxCB_READONLY|wxBORDER_NONE);
    m_filterExtention->SetBackgroundColour(wxColour(wxT("rgb(192,192,192)")));
    wxFont m_filterExtentionFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_filterExtention->SetFont(m_filterExtentionFont);
    
    flexGridSizer3841->Add(m_filterExtention, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer3852 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer3852->SetFlexibleDirection( wxBOTH );
    flexGridSizer3852->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3852->AddGrowableCol(0);
    flexGridSizer3852->AddGrowableRow(0);
    
    flexGridSizer3841->Add(flexGridSizer3852, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_currentDirectory = new wxTextCtrl(this, wxID_ANY, wxT("c:\\xxx"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,19)), wxTE_RIGHT|wxTE_READONLY|wxBORDER_NONE);
    m_currentDirectory->SetBackgroundColour(wxColour(wxT("rgb(224,224,224)")));
    #if wxVERSION_NUMBER >= 3000
    m_currentDirectory->SetHint(wxT(""));
    #endif
    
    flexGridSizer3852->Add(m_currentDirectory, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_currentDirectory->SetMinSize(wxSize(-1,19));
    
    SetName(wxT("CncFileViewBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_bmpButton3851->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::aFolderUp), NULL, this);
    m_bmpButton38751->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::refresh), NULL, this);
    m_bmpButton38754->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::selectDefault), NULL, this);
    m_fileList->Connect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CncFileViewBase::fileListActivated), NULL, this);
    m_fileList->Connect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CncFileViewBase::fileListSelected), NULL, this);
    m_fileList->Connect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncFileViewBase::fileListLeave), NULL, this);
    m_filterExtention->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(CncFileViewBase::selectFilter), NULL, this);
    
}

CncFileViewBase::~CncFileViewBase()
{
    m_bmpButton3851->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::aFolderUp), NULL, this);
    m_bmpButton38751->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::refresh), NULL, this);
    m_bmpButton38754->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncFileViewBase::selectDefault), NULL, this);
    m_fileList->Disconnect(wxEVT_COMMAND_LIST_ITEM_ACTIVATED, wxListEventHandler(CncFileViewBase::fileListActivated), NULL, this);
    m_fileList->Disconnect(wxEVT_COMMAND_LIST_ITEM_SELECTED, wxListEventHandler(CncFileViewBase::fileListSelected), NULL, this);
    m_fileList->Disconnect(wxEVT_LEAVE_WINDOW, wxMouseEventHandler(CncFileViewBase::fileListLeave), NULL, this);
    m_filterExtention->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(CncFileViewBase::selectFilter), NULL, this);
    
}

GL3DOptionsBase::GL3DOptionsBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("anonymous_simple_weather_symbols_5"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer3541 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3541->SetFlexibleDirection( wxBOTH );
    flexGridSizer3541->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3541->AddGrowableCol(0);
    flexGridSizer3541->AddGrowableRow(0);
    flexGridSizer3541->AddGrowableRow(1);
    flexGridSizer3541->AddGrowableRow(2);
    this->SetSizer(flexGridSizer3541);
    
    m_collPaneOptions = new wxCollapsiblePane(this, wxID_ANY, _("Options"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxCP_DEFAULT_STYLE);
    
    flexGridSizer3541->Add(m_collPaneOptions, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3649 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3649->SetFlexibleDirection( wxBOTH );
    flexGridSizer3649->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3649->AddGrowableCol(0);
    flexGridSizer3649->AddGrowableRow(0);
    m_collPaneOptions->GetPane()->SetSizer(flexGridSizer3649);
    
    wxArrayString m_pgMgr3543Arr;
    wxUnusedVar(m_pgMgr3543Arr);
    wxArrayInt m_pgMgr3543IntArr;
    wxUnusedVar(m_pgMgr3543IntArr);
    m_pgMgr3543 = new wxPropertyGridManager(m_collPaneOptions->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPaneOptions->GetPane(), wxSize(-1,-1)), wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    
    flexGridSizer3649->Add(m_pgMgr3543, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_pgCatDisplayOptions = m_pgMgr3543->Append(  new wxPropertyCategory( _("Display Options") ) );
    m_pgCatDisplayOptions->SetHelpString(wxT(""));
    
    m_pgMgr3543Arr.Clear();
    m_pgMgr3543IntArr.Clear();
    m_pgMgr3543Arr.Add(_("Points"));
    m_pgMgr3543Arr.Add(_("Lines"));
    m_pgMgr3543Arr.Add(_("LineStrips"));
    m_pgPropDrawType = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxEnumProperty( _("Draw Type"), wxPG_LABEL, m_pgMgr3543Arr, m_pgMgr3543IntArr, 1) );
    m_pgPropDrawType->SetHelpString(wxT(""));
    m_pgPropDrawType->SetEditor( wxT("Choice") );
    
    m_pgPropAutoScaling = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxBoolProperty( _("Auto Scaling"), wxPG_LABEL, 1) );
    m_pgPropAutoScaling->SetHelpString(wxT(""));
    m_pgPropAutoScaling->SetEditor( wxT("CheckBox") );
    
    m_pgPropDrawFlyPath = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxBoolProperty( _("Draw Fly Path"), wxPG_LABEL, 1) );
    m_pgPropDrawFlyPath->SetHelpString(wxT(""));
    m_pgPropDrawFlyPath->SetEditor( wxT("CheckBox") );
    
    m_pgPropPositionMarker = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxBoolProperty( _("Draw Position Marker"), wxPG_LABEL, 1) );
    m_pgPropPositionMarker->SetHelpString(wxT(""));
    m_pgPropPositionMarker->SetEditor( wxT("CheckBox") );
    
    m_pgPropWorkColour = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxSystemColourProperty( _("Work Colour")) );
    m_pgPropWorkColour->SetValueToUnspecified();
    m_pgPropWorkColour->SetHelpString(wxT(""));
    m_pgPropWorkColour->SetEditor( wxT("TextCtrlAndButton") );
    
    m_pgPropFlyColour = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxSystemColourProperty( _("Fly Colour")) );
    m_pgPropFlyColour->SetValueToUnspecified();
    m_pgPropFlyColour->SetHelpString(wxT(""));
    m_pgPropFlyColour->SetEditor( wxT("TextCtrlAndButton") );
    
    m_pgPropZoom = m_pgMgr3543->AppendIn( m_pgCatDisplayOptions,  new wxFloatProperty( _("Zoom"), wxPG_LABEL, 2.0) );
    m_pgPropZoom->SetHelpString(wxT(""));
    m_pgPropZoom->SetEditor( wxT("SpinCtrl") );
    
    m_pgCatBoundBox = m_pgMgr3543->Append(  new wxPropertyCategory( _("Bound Box") ) );
    m_pgCatBoundBox->SetHelpString(wxT(""));
    
    m_pgPropDrawBoundBox = m_pgMgr3543->AppendIn( m_pgCatBoundBox,  new wxBoolProperty( _("Draw Bound Box"), wxPG_LABEL, 1) );
    m_pgPropDrawBoundBox->SetHelpString(wxT(""));
    m_pgPropDrawBoundBox->SetEditor( wxT("CheckBox") );
    
    m_pgPropBoundBoxColour = m_pgMgr3543->AppendIn( m_pgCatBoundBox,  new wxSystemColourProperty( _("Colour")) );
    m_pgPropBoundBoxColour->SetValueToUnspecified();
    m_pgPropBoundBoxColour->SetHelpString(wxT(""));
    m_pgPropBoundBoxColour->SetEditor( wxT("TextCtrlAndButton") );
    
    m_pgCatRenderOptions = m_pgMgr3543->Append(  new wxPropertyCategory( _("Render Options") ) );
    m_pgCatRenderOptions->SetHelpString(wxT(""));
    
    m_pgPropSmoothing = m_pgMgr3543->AppendIn( m_pgCatRenderOptions,  new wxBoolProperty( _("Smoothing"), wxPG_LABEL, 1) );
    m_pgPropSmoothing->SetHelpString(wxT(""));
    m_pgPropSmoothing->SetEditor( wxT("CheckBox") );
    m_pgPropSmoothing->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    wxFlexGridSizer* flexGridSizer3653 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3653->SetFlexibleDirection( wxBOTH );
    flexGridSizer3653->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3649->Add(flexGridSizer3653, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(4));
    
    m_cbAutoUpdate = new wxCheckBox(m_collPaneOptions->GetPane(), wxID_ANY, _(" Auto Update"), wxDefaultPosition, wxDLG_UNIT(m_collPaneOptions->GetPane(), wxSize(-1,-1)), 0);
    m_cbAutoUpdate->SetValue(true);
    wxFont m_cbAutoUpdateFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_cbAutoUpdate->SetFont(m_cbAutoUpdateFont);
    m_cbAutoUpdate->Enable(false);
    
    flexGridSizer3653->Add(m_cbAutoUpdate, 0, wxALL, WXC_FROM_DIP(0));
    
    m_collPaneCameraRotation = new wxCollapsiblePane(this, wxID_ANY, _("XY Pane Rotation (Z Top)"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxCP_DEFAULT_STYLE|wxFULL_REPAINT_ON_RESIZE);
    
    flexGridSizer3541->Add(m_collPaneCameraRotation, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3570 = new wxFlexGridSizer(1, 6, 0, 0);
    flexGridSizer3570->SetFlexibleDirection( wxBOTH );
    flexGridSizer3570->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3570->AddGrowableCol(0);
    flexGridSizer3570->AddGrowableRow(0);
    m_collPaneCameraRotation->GetPane()->SetSizer(flexGridSizer3570);
    
    m_sliderCameraRotation = new wxSlider(m_collPaneCameraRotation->GetPane(), wxID_ANY, 0, -360, 360, wxDefaultPosition, wxDLG_UNIT(m_collPaneCameraRotation->GetPane(), wxSize(-1,-1)), wxSL_LABELS|wxSL_HORIZONTAL);
    wxFont m_sliderCameraRotationFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_sliderCameraRotation->SetFont(m_sliderCameraRotationFont);
    
    flexGridSizer3570->Add(m_sliderCameraRotation, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer3678 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3678->SetFlexibleDirection( wxBOTH );
    flexGridSizer3678->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3570->Add(flexGridSizer3678, 0, wxALL, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3679 = new wxFlexGridSizer(0, 3, 0, 0);
    flexGridSizer3679->SetFlexibleDirection( wxBOTH );
    flexGridSizer3679->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3678->Add(flexGridSizer3679, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btResetCameraPos = new wxBitmapButton(m_collPaneCameraRotation->GetPane(), wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("tools-equalizer-blue")), wxDefaultPosition, wxDLG_UNIT(m_collPaneCameraRotation->GetPane(), wxSize(-1,-1)), wxBU_AUTODRAW);
    m_btResetCameraPos->SetToolTip(_("Reset"));
    
    flexGridSizer3679->Add(m_btResetCameraPos, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btCameraRotionClockwise = new wxBitmapToggleButton(m_collPaneCameraRotation->GetPane(), wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("arrow-rotate-clockwise")), wxDefaultPosition, wxDLG_UNIT(m_collPaneCameraRotation->GetPane(), wxSize(24,24)), 0);
    m_btCameraRotionClockwise->SetToolTip(_("Auto Rotate Clockwise"));
    m_btCameraRotionClockwise->SetValue(false);
    
    flexGridSizer3679->Add(m_btCameraRotionClockwise, 0, wxALL, WXC_FROM_DIP(1));
    m_btCameraRotionClockwise->SetMinSize(wxSize(24,24));
    
    m_btCameraRotionAnticlockwise = new wxBitmapToggleButton(m_collPaneCameraRotation->GetPane(), wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("arrow-rotate-anticlockwise")), wxDefaultPosition, wxDLG_UNIT(m_collPaneCameraRotation->GetPane(), wxSize(24,24)), 0);
    m_btCameraRotionAnticlockwise->SetToolTip(_("Auto Rotate Counterclockwise"));
    m_btCameraRotionAnticlockwise->SetValue(false);
    
    flexGridSizer3679->Add(m_btCameraRotionAnticlockwise, 0, wxALL, WXC_FROM_DIP(1));
    m_btCameraRotionAnticlockwise->SetMinSize(wxSize(24,24));
    
    wxFlexGridSizer* flexGridSizer3682 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer3682->SetFlexibleDirection( wxBOTH );
    flexGridSizer3682->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer3678->Add(flexGridSizer3682, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText3684 = new wxStaticText(m_collPaneCameraRotation->GetPane(), wxID_ANY, _("Speed"), wxDefaultPosition, wxDLG_UNIT(m_collPaneCameraRotation->GetPane(), wxSize(-1,-1)), 0);
    wxFont m_staticText3684Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText3684->SetFont(m_staticText3684Font);
    
    flexGridSizer3682->Add(m_staticText3684, 0, wxALL, WXC_FROM_DIP(1));
    
    m_sliderCameraRotationSpeed = new wxSlider(m_collPaneCameraRotation->GetPane(), wxID_ANY, 10, 50, 500, wxDefaultPosition, wxDLG_UNIT(m_collPaneCameraRotation->GetPane(), wxSize(46,-1)), wxSL_INVERSE|wxSL_HORIZONTAL);
    
    flexGridSizer3682->Add(m_sliderCameraRotationSpeed, 0, wxALL, WXC_FROM_DIP(0));
    m_sliderCameraRotationSpeed->SetMinSize(wxSize(46,-1));
    
    flexGridSizer3570->Add(3, 0, 1, wxALL, WXC_FROM_DIP(1));
    m_collPaneCameraRotation->SetMinSize(wxSize(300,-1));
    
    m_collPaneModelRotation = new wxCollapsiblePane(this, wxID_ANY, _("Model Rotation:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxCP_DEFAULT_STYLE);
    
    flexGridSizer3541->Add(m_collPaneModelRotation, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3580 = new wxFlexGridSizer(1, 8, 0, 0);
    flexGridSizer3580->SetFlexibleDirection( wxBOTH );
    flexGridSizer3580->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_collPaneModelRotation->GetPane()->SetSizer(flexGridSizer3580);
    
    wxFlexGridSizer* flexGridSizer36288 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer36288->SetFlexibleDirection( wxBOTH );
    flexGridSizer36288->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer36288->AddGrowableCol(0);
    flexGridSizer36288->AddGrowableRow(0);
    
    flexGridSizer3580->Add(flexGridSizer36288, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_sliderModelRotationX = new wxSlider(m_collPaneModelRotation->GetPane(), wxID_ANY, 0, -360, 360, wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(-1,-1)), wxSL_LABELS|wxSL_VERTICAL);
    wxFont m_sliderModelRotationXFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_sliderModelRotationX->SetFont(m_sliderModelRotationXFont);
    
    flexGridSizer36288->Add(m_sliderModelRotationX, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btModelRotationResetX = new wxButton(m_collPaneModelRotation->GetPane(), wxID_ANY, _("X"), wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(50,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btModelRotationResetX->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("tools-equalizer-blue")), wxLEFT);
    m_btModelRotationResetX->SetBitmapMargins(2,2);
    #endif
    m_btModelRotationResetX->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_btModelRotationResetXFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btModelRotationResetX->SetFont(m_btModelRotationResetXFont);
    
    flexGridSizer36288->Add(m_btModelRotationResetX, 0, wxALL, WXC_FROM_DIP(5));
    m_btModelRotationResetX->SetMinSize(wxSize(50,-1));
    
    m_staticLine364118 = new wxStaticLine(m_collPaneModelRotation->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3580->Add(m_staticLine364118, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer36281114 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer36281114->SetFlexibleDirection( wxBOTH );
    flexGridSizer36281114->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer36281114->AddGrowableCol(0);
    flexGridSizer36281114->AddGrowableRow(0);
    
    flexGridSizer3580->Add(flexGridSizer36281114, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_sliderModelRotationY = new wxSlider(m_collPaneModelRotation->GetPane(), wxID_ANY, 0, -360, 360, wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(-1,-1)), wxSL_LABELS|wxSL_VERTICAL);
    wxFont m_sliderModelRotationYFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_sliderModelRotationY->SetFont(m_sliderModelRotationYFont);
    
    flexGridSizer36281114->Add(m_sliderModelRotationY, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btModelRotationResetY = new wxButton(m_collPaneModelRotation->GetPane(), wxID_ANY, _("Y"), wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(50,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btModelRotationResetY->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("tools-equalizer-blue")), wxLEFT);
    m_btModelRotationResetY->SetBitmapMargins(2,2);
    #endif
    m_btModelRotationResetY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_btModelRotationResetYFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btModelRotationResetY->SetFont(m_btModelRotationResetYFont);
    m_btModelRotationResetY->SetToolTip(_("Reset"));
    
    flexGridSizer36281114->Add(m_btModelRotationResetY, 0, wxALL, WXC_FROM_DIP(5));
    m_btModelRotationResetY->SetMinSize(wxSize(50,-1));
    
    m_staticLine3641 = new wxStaticLine(m_collPaneModelRotation->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3580->Add(m_staticLine3641, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer362811 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer362811->SetFlexibleDirection( wxBOTH );
    flexGridSizer362811->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer362811->AddGrowableCol(0);
    flexGridSizer362811->AddGrowableRow(0);
    
    flexGridSizer3580->Add(flexGridSizer362811, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_sliderModelRotationZ = new wxSlider(m_collPaneModelRotation->GetPane(), wxID_ANY, 0, -360, 360, wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(-1,-1)), wxSL_LABELS|wxSL_VERTICAL);
    wxFont m_sliderModelRotationZFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_sliderModelRotationZ->SetFont(m_sliderModelRotationZFont);
    
    flexGridSizer362811->Add(m_sliderModelRotationZ, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btModelRotationResetZ = new wxButton(m_collPaneModelRotation->GetPane(), wxID_ANY, _("Z"), wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(50,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btModelRotationResetZ->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("tools-equalizer-blue")), wxLEFT);
    m_btModelRotationResetZ->SetBitmapMargins(2,2);
    #endif
    m_btModelRotationResetZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_btModelRotationResetZFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btModelRotationResetZ->SetFont(m_btModelRotationResetZFont);
    m_btModelRotationResetZ->SetToolTip(_("Reset"));
    
    flexGridSizer362811->Add(m_btModelRotationResetZ, 0, wxALL, WXC_FROM_DIP(5));
    m_btModelRotationResetZ->SetMinSize(wxSize(50,-1));
    
    m_staticLine36411719 = new wxStaticLine(m_collPaneModelRotation->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3580->Add(m_staticLine36411719, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer3628 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer3628->SetFlexibleDirection( wxBOTH );
    flexGridSizer3628->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3628->AddGrowableCol(0);
    flexGridSizer3628->AddGrowableRow(0);
    
    flexGridSizer3580->Add(flexGridSizer3628, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_sliderModelRotationXYZ = new wxSlider(m_collPaneModelRotation->GetPane(), wxID_ANY, 0, -360, 360, wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(-1,-1)), wxSL_LABELS|wxSL_VERTICAL);
    wxFont m_sliderModelRotationXYZFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_sliderModelRotationXYZ->SetFont(m_sliderModelRotationXYZFont);
    
    flexGridSizer3628->Add(m_sliderModelRotationXYZ, 0, wxALL, WXC_FROM_DIP(1));
    
    m_btModelRotationResetXYZ = new wxButton(m_collPaneModelRotation->GetPane(), wxID_ANY, _("XYZ"), wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(50,-1)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btModelRotationResetXYZ->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("tools-equalizer-blue")), wxLEFT);
    m_btModelRotationResetXYZ->SetBitmapMargins(2,2);
    #endif
    m_btModelRotationResetXYZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_btModelRotationResetXYZFont(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_btModelRotationResetXYZ->SetFont(m_btModelRotationResetXYZFont);
    m_btModelRotationResetXYZ->SetToolTip(_("Reset"));
    
    flexGridSizer3628->Add(m_btModelRotationResetXYZ, 0, wxALL, WXC_FROM_DIP(5));
    m_btModelRotationResetXYZ->SetMinSize(wxSize(50,-1));
    
    m_staticLine364117 = new wxStaticLine(m_collPaneModelRotation->GetPane(), wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_collPaneModelRotation->GetPane(), wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer3580->Add(m_staticLine364117, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    m_collPaneModelRotation->SetMinSize(wxSize(300,-1));
    
    m_timer4476 = new wxTimer;
    m_timer4476->Start(500, false);
    
    SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DLIGHT));
    SetName(wxT("GL3DOptionsBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(GL3DOptionsBase::onCloseWindow), NULL, this);
    this->Connect(wxEVT_SHOW, wxShowEventHandler(GL3DOptionsBase::onShowWindow), NULL, this);
    this->Connect(wxEVT_ACTIVATE, wxActivateEventHandler(GL3DOptionsBase::onActivate), NULL, this);
    m_pgMgr3543->Connect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(GL3DOptionsBase::propertyChanged), NULL, this);
    m_pgMgr3543->Connect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(GL3DOptionsBase::propertyChanging), NULL, this);
    m_sliderCameraRotation->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::cameraRotationChanged), NULL, this);
    m_sliderCameraRotation->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::cameraRotationChanged), NULL, this);
    m_btResetCameraPos->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::resetCameraPostion), NULL, this);
    m_btCameraRotionClockwise->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::autoCameraRotationClockwise), NULL, this);
    m_btCameraRotionAnticlockwise->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::autoCameraRotationAnticlockwise), NULL, this);
    m_sliderCameraRotationSpeed->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::cameraRotationSpeedChanged), NULL, this);
    m_sliderCameraRotationSpeed->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::cameraRotationSpeedChanged), NULL, this);
    m_sliderModelRotationX->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::modelRotationXChanged), NULL, this);
    m_sliderModelRotationX->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::modelRotationXChanged), NULL, this);
    m_btModelRotationResetX->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::resetModelRotationX), NULL, this);
    m_sliderModelRotationY->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::modelRotationYChanged), NULL, this);
    m_sliderModelRotationY->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::modelRotationYChanged), NULL, this);
    m_btModelRotationResetY->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::resetModelRotationY), NULL, this);
    m_sliderModelRotationZ->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::modelRotationZChanged), NULL, this);
    m_sliderModelRotationZ->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::modelRotationZChanged), NULL, this);
    m_btModelRotationResetZ->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::resetModelRotationZ), NULL, this);
    m_sliderModelRotationXYZ->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::modelRotationXYZChanged), NULL, this);
    m_sliderModelRotationXYZ->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::modelRotationXYZChanged), NULL, this);
    m_btModelRotationResetXYZ->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::resetModelRotationXYZ), NULL, this);
    m_timer4476->Connect(wxEVT_TIMER, wxTimerEventHandler(GL3DOptionsBase::onUpdateTimer), NULL, this);
    
}

GL3DOptionsBase::~GL3DOptionsBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(GL3DOptionsBase::onCloseWindow), NULL, this);
    this->Disconnect(wxEVT_SHOW, wxShowEventHandler(GL3DOptionsBase::onShowWindow), NULL, this);
    this->Disconnect(wxEVT_ACTIVATE, wxActivateEventHandler(GL3DOptionsBase::onActivate), NULL, this);
    m_pgMgr3543->Disconnect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(GL3DOptionsBase::propertyChanged), NULL, this);
    m_pgMgr3543->Disconnect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(GL3DOptionsBase::propertyChanging), NULL, this);
    m_sliderCameraRotation->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::cameraRotationChanged), NULL, this);
    m_sliderCameraRotation->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::cameraRotationChanged), NULL, this);
    m_btResetCameraPos->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::resetCameraPostion), NULL, this);
    m_btCameraRotionClockwise->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::autoCameraRotationClockwise), NULL, this);
    m_btCameraRotionAnticlockwise->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::autoCameraRotationAnticlockwise), NULL, this);
    m_sliderCameraRotationSpeed->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::cameraRotationSpeedChanged), NULL, this);
    m_sliderCameraRotationSpeed->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::cameraRotationSpeedChanged), NULL, this);
    m_sliderModelRotationX->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::modelRotationXChanged), NULL, this);
    m_sliderModelRotationX->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::modelRotationXChanged), NULL, this);
    m_btModelRotationResetX->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::resetModelRotationX), NULL, this);
    m_sliderModelRotationY->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::modelRotationYChanged), NULL, this);
    m_sliderModelRotationY->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::modelRotationYChanged), NULL, this);
    m_btModelRotationResetY->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::resetModelRotationY), NULL, this);
    m_sliderModelRotationZ->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::modelRotationZChanged), NULL, this);
    m_sliderModelRotationZ->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::modelRotationZChanged), NULL, this);
    m_btModelRotationResetZ->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::resetModelRotationZ), NULL, this);
    m_sliderModelRotationXYZ->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(GL3DOptionsBase::modelRotationXYZChanged), NULL, this);
    m_sliderModelRotationXYZ->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(GL3DOptionsBase::modelRotationXYZChanged), NULL, this);
    m_btModelRotationResetXYZ->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(GL3DOptionsBase::resetModelRotationXYZ), NULL, this);
    m_timer4476->Disconnect(wxEVT_TIMER, wxTimerEventHandler(GL3DOptionsBase::onUpdateTimer), NULL, this);
    
    m_timer4476->Stop();
    wxDELETE( m_timer4476 );

}

UnitTestsBase::UnitTestsBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer3344 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3344->SetFlexibleDirection( wxBOTH );
    flexGridSizer3344->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3344->AddGrowableCol(0);
    flexGridSizer3344->AddGrowableRow(1);
    this->SetSizer(flexGridSizer3344);
    
    wxFlexGridSizer* flexGridSizer3355 = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizer3355->SetFlexibleDirection( wxBOTH );
    flexGridSizer3355->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3355->AddGrowableCol(1);
    flexGridSizer3355->AddGrowableRow(0);
    
    flexGridSizer3344->Add(flexGridSizer3355, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText3357 = new wxStaticText(this, wxID_ANY, _("Tests:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText3357Font = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_staticText3357Font.SetWeight(wxFONTWEIGHT_BOLD);
    m_staticText3357->SetFont(m_staticText3357Font);
    
    flexGridSizer3355->Add(m_staticText3357, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_unitTestSelectorArr;
    m_unitTestSelector = new wxComboBox(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), m_unitTestSelectorArr, wxCB_READONLY);
    
    flexGridSizer3355->Add(m_unitTestSelector, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_btUnitTestClear = new wxButton(this, wxID_ANY, _("Clear"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,28)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btUnitTestClear->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btUnitTestClear->SetBitmapMargins(2,2);
    #endif
    
    flexGridSizer3355->Add(m_btUnitTestClear, 0, wxALL, WXC_FROM_DIP(0));
    m_btUnitTestClear->SetMinSize(wxSize(-1,28));
    
    m_btUnitTestRun = new wxButton(this, wxID_ANY, _("Run . . ."), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,28)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btUnitTestRun->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-dll")), wxLEFT);
    m_btUnitTestRun->SetBitmapMargins(2,2);
    #endif
    m_btUnitTestRun->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_btUnitTestRunFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_btUnitTestRunFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_btUnitTestRun->SetFont(m_btUnitTestRunFont);
    
    flexGridSizer3355->Add(m_btUnitTestRun, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    m_btUnitTestRun->SetMinSize(wxSize(-1,28));
    
    m_testResultStream = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_RICH2|wxTE_READONLY|wxTE_MULTILINE|wxALWAYS_SHOW_SB|wxHSCROLL|wxVSCROLL);
    m_testResultStream->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_testResultStream->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_testResultStreamFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_testResultStream->SetFont(m_testResultStreamFont);
    
    flexGridSizer3344->Add(m_testResultStream, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer3370 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer3370->SetFlexibleDirection( wxBOTH );
    flexGridSizer3370->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3370->AddGrowableCol(0);
    flexGridSizer3370->AddGrowableRow(0);
    
    flexGridSizer3344->Add(flexGridSizer3370, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_unitTestStatus = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,20)), 0);
    wxFont m_unitTestStatusFont(10, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_unitTestStatus->SetFont(m_unitTestStatusFont);
    
    flexGridSizer3370->Add(m_unitTestStatus, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    m_unitTestStatus->SetMinSize(wxSize(-1,20));
    
    m_unitTestFreezeOutput = new wxCheckBox(this, wxID_ANY, _("Freeze"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_unitTestFreezeOutput->SetValue(false);
    m_unitTestFreezeOutput->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_unitTestFreezeOutputFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_unitTestFreezeOutputFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_unitTestFreezeOutput->SetFont(m_unitTestFreezeOutputFont);
    m_unitTestFreezeOutput->SetToolTip(_("Freeze output while running"));
    
    flexGridSizer3370->Add(m_unitTestFreezeOutput, 0, wxALL, WXC_FROM_DIP(5));
    
    m_unitTestAutoRun = new wxCheckBox(this, wxID_ANY, _("Auto Run"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_unitTestAutoRun->SetValue(true);
    m_unitTestAutoRun->SetForegroundColour(wxColour(wxT("rgb(0,64,128)")));
    wxFont m_unitTestAutoRunFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
    m_unitTestAutoRunFont.SetWeight(wxFONTWEIGHT_BOLD);
    m_unitTestAutoRun->SetFont(m_unitTestAutoRunFont);
    m_unitTestAutoRun->SetToolTip(_("Run directly on select a test"));
    
    flexGridSizer3370->Add(m_unitTestAutoRun, 0, wxALL, WXC_FROM_DIP(5));
    
    m_unitTestStartupTimer = new wxTimer;
    m_unitTestStartupTimer->Start(300, true);
    
    SetName(wxT("UnitTestsBase"));
    SetMinClientSize(wxSize(300,300));
    SetSize(800,600);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_SHOW, wxShowEventHandler(UnitTestsBase::onShow), NULL, this);
    m_unitTestSelector->Connect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(UnitTestsBase::selectTest), NULL, this);
    m_btUnitTestClear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UnitTestsBase::clearView), NULL, this);
    m_unitTestStartupTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(UnitTestsBase::onStartupTimer), NULL, this);
    
}

UnitTestsBase::~UnitTestsBase()
{
    this->Disconnect(wxEVT_SHOW, wxShowEventHandler(UnitTestsBase::onShow), NULL, this);
    m_unitTestSelector->Disconnect(wxEVT_COMMAND_COMBOBOX_SELECTED, wxCommandEventHandler(UnitTestsBase::selectTest), NULL, this);
    m_btUnitTestClear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(UnitTestsBase::clearView), NULL, this);
    m_unitTestStartupTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(UnitTestsBase::onStartupTimer), NULL, this);
    
    m_unitTestStartupTimer->Stop();
    wxDELETE( m_unitTestStartupTimer );

}

ImageLib16::ImageLib16()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FINGER16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FINGER16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FINGER16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FINGER16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_WARNING16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_WARNING16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_WARNING16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_WARNING16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_OK16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_OK16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_OK16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_OK16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("ANIMATION_SPRITE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("ANIMATION_SPRITE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_CONNECTED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_CONNECTED"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_CONNECTED@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_CONNECTED@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DISCONNECTED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DISCONNECTED"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DISCONNECTED@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DISCONNECTED@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COORD_BOTTOM_TOP"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COORD_BOTTOM_TOP"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_COORD_TOP_BOTTOM"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_COORD_TOP_BOTTOM"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MONITORING_MINIMAL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MONITORING_MINIMAL"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MONITORING_NORMAL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MONITORING_NORMAL"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PLAY_3D"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PLAY_3D"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PLAY_3D@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PLAY_3D@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STOP_3D"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STOP_3D"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_STOP_3D@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_STOP_3D@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SERIAL_SYP_ON"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SERIAL_SYP_ON"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SERIAL_SYP_ON@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SERIAL_SYP_ON@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SERIAL_SPY_OFF"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SERIAL_SPY_OFF"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SERIAL_SPY_OFF@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SERIAL_SPY_OFF@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PLUS"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PLUS"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PLUS@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PLUS@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MINUS"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MINUS"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MINUS@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MINUS@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_ROOT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_ROOT"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_ROOT@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_ROOT@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_FOLDER_CLOSE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_FOLDER_CLOSE"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_FOLDER_CLOSE@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_FOLDER_CLOSE@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_FOLDER_OPEN"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_FOLDER_OPEN"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TEMPLATE_FOLDER_OPEN@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TEMPLATE_FOLDER_OPEN@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PRE_DEF_PARA_SET"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PRE_DEF_PARA_SET"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PRE_DEF_PARA_SET@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PRE_DEF_PARA_SET@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_WPT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_WPT"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_NO_WPT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_NO_WPT"), bmp));
        }
    }
    
}

ImageLib16::~ImageLib16()
{
}

ImageLib24::ImageLib24()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_GREEN"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_GREEN"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_RED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_RED"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_YELLOW"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_YELLOW"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TRAFFIC_LIGHT_DEFAULT"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TRAFFIC_LIGHT_DEFAULT"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_RUN_RELEASE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_RUN_RELEASE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_RUN_DEBUG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_RUN_DEBUG"), bmp));
        }
    }
    
}

ImageLib24::~ImageLib24()
{
}

ImageLibFile::ImageLibFile()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_LRU_FILE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_LRU_FILE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FILE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FILE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FOLDER"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FOLDER"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_FOLDER_UP"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_FOLDER_UP"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_ERROR"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_ERROR"), bmp));
        }
    }
    
}

ImageLibFile::~ImageLibFile()
{
}

ImageLibBig::ImageLibBig()
    : wxImageList(1024, 1024, true)
    , m_imagesWidth(1024)
    , m_imagesHeight(1024)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_CNC"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_CNC"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_MILL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_MILL"), bmp));
        }
    }
    
}

ImageLibBig::~ImageLibBig()
{
}

ImageLibPortSelector::ImageLibPortSelector()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PS_CONNECTED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PS_CONNECTED"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PS_ACCESS_DENIED"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PS_ACCESS_DENIED"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PS_UNKNOWN"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PS_UNKNOWN"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PS_UNKNOWN@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PS_UNKNOWN@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PS_AVAILABLE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PS_AVAILABLE"), bmp));
        }
    }
    
}

ImageLibPortSelector::~ImageLibPortSelector()
{
}

ImageLibAppIcons::ImageLibAppIcons()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D16"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D16"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D16@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D16@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R32"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R32"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R32@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R32@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D32"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D32"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D32@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D32@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R64"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R64"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R64@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R64@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D64"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D64"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D64@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D64@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R128"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R128"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R128@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R128@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D128"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D128"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D128@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D128@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R256"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R256"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_R256@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_R256@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D256"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D256"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_D256@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_D256@2x"), bmp));
        }
    }
    
}

ImageLibAppIcons::~ImageLibAppIcons()
{
}

ImageLibDebugger::ImageLibDebugger()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DB_PREPROCESSING"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DB_PREPROCESSING"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DB_SPOOLING"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DB_SPOOLING"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_DB_CONFIGURATION"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_DB_CONFIGURATION"), bmp));
        }
    }
    
}

ImageLibDebugger::~ImageLibDebugger()
{
}

ImageLibConfig::ImageLibConfig()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_CATEGORY"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_CATEGORY"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_BOOL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_BOOL"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_STRING"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_STRING"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_LONG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_LONG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_DOUBLE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_DOUBLE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_ENUM"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_ENUM"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_INACTIVE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_INACTIVE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_VALUE_UNKNOWN"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_VALUE_UNKNOWN"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_WORK_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_WORK_CFG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_GENERAL_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_GENERAL_CFG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_APP_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_APP_CFG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_ENV_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_ENV_CFG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SVG_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SVG_CFG"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SVG_CFG@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SVG_CFG@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_GCODE_CFG"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_GCODE_CFG"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TOOL_MAGAZINE_ENTRY"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TOOL_MAGAZINE_ENTRY"), bmp));
        }
    }
    
}

ImageLibConfig::~ImageLibConfig()
{
}

ImageLibPosSpy::ImageLibPosSpy()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PID_MAJOR"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PID_MAJOR"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PID_DETAIL"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PID_DETAIL"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TYPE_RAPID"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TYPE_RAPID"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_TYPE_WORK"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_TYPE_WORK"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_POS"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_POS"), bmp));
        }
    }
    
}

ImageLibPosSpy::~ImageLibPosSpy()
{
}

ImageLibSetterList::ImageLibSetterList()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SETTER"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SETTER"), bmp));
        }
    }
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SETTER@2x"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SETTER@2x"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SEPARATOR"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SEPARATOR"), bmp));
        }
    }
    
}

ImageLibSetterList::~ImageLibSetterList()
{
}

ImageLibProbe::ImageLibProbe()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_RELEASE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_RELEASE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_PROBE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_PROBE"), bmp));
        }
    }
    
}

ImageLibProbe::~ImageLibProbe()
{
}

ImageLibStatistics::ImageLibStatistics()
    : wxImageList(16, 16, true)
    , m_imagesWidth(16)
    , m_imagesHeight(16)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_HIDE"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_HIDE"), bmp));
        }
    }
    
    {
        wxBitmap bmp;
        wxIcon icn;
        bmp = wxXmlResource::Get()->LoadBitmap(wxT("BMP_SHOW"));
        if(bmp.IsOk()) {
            if((m_imagesWidth == bmp.GetWidth()) && (m_imagesHeight == bmp.GetHeight())){
                icn.CopyFromBitmap(bmp);
                this->Add(icn);
            }
            m_bitmaps.insert(std::make_pair(wxT("BMP_SHOW"), bmp));
        }
    }
    
}

ImageLibStatistics::~ImageLibStatistics()
{
}
