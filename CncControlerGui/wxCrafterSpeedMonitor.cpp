//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterSpeedMonitor.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterSpeedMonitor.h"


// Declare the bitmap loading function
extern void wxC1664InitBitmapResources();

static bool bBitmapLoaded = false;


CncSpeedMonitorBase::CncSpeedMonitorBase(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC1664InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxFlexGridSizer* flexGridSizer7514 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer7514->SetFlexibleDirection( wxBOTH );
    flexGridSizer7514->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7514->AddGrowableCol(0);
    flexGridSizer7514->AddGrowableRow(1);
    this->SetSizer(flexGridSizer7514);
    
    wxFlexGridSizer* flexGridSizer7523 = new wxFlexGridSizer(1, 11, 0, 0);
    flexGridSizer7523->SetFlexibleDirection( wxBOTH );
    flexGridSizer7523->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7523->AddGrowableCol(8);
    flexGridSizer7523->AddGrowableRow(0);
    
    flexGridSizer7514->Add(flexGridSizer7523, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_btToggleConnection = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-connected")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btToggleConnection->SetValue(true);
    
    flexGridSizer7523->Add(m_btToggleConnection, 0, wxALL, WXC_FROM_DIP(1));
    m_btToggleConnection->SetMinSize(wxSize(26,26));
    
    m_staticLine75573 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer7523->Add(m_staticLine75573, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btToggleMeasurePointsAxis = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("appointment-new")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btToggleMeasurePointsAxis->SetToolTip(_("Show Measure Points"));
    m_btToggleMeasurePointsAxis->SetValue(true);
    
    flexGridSizer7523->Add(m_btToggleMeasurePointsAxis, 0, wxALL, WXC_FROM_DIP(1));
    m_btToggleMeasurePointsAxis->SetMinSize(wxSize(26,26));
    
    m_btToggleConfiguredAxis = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("system-settings")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btToggleConfiguredAxis->SetToolTip(_("Show Configured Speed"));
    m_btToggleConfiguredAxis->SetValue(true);
    
    flexGridSizer7523->Add(m_btToggleConfiguredAxis, 0, wxALL, WXC_FROM_DIP(1));
    m_btToggleConfiguredAxis->SetMinSize(wxSize(26,26));
    
    m_btToggleMeasuredSpeedAxis = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("appointment-new-5")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btToggleMeasuredSpeedAxis->SetToolTip(_("Show Measured Speed"));
    m_btToggleMeasuredSpeedAxis->SetValue(true);
    
    flexGridSizer7523->Add(m_btToggleMeasuredSpeedAxis, 0, wxALL, WXC_FROM_DIP(1));
    m_btToggleMeasuredSpeedAxis->SetMinSize(wxSize(26,26));
    
    m_btToggleReceivedSpeedAxis = new wxBitmapToggleButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("appointment-soon")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), 0);
    m_btToggleReceivedSpeedAxis->SetToolTip(_("Show Received Speed"));
    m_btToggleReceivedSpeedAxis->SetValue(true);
    
    flexGridSizer7523->Add(m_btToggleReceivedSpeedAxis, 0, wxALL, WXC_FROM_DIP(1));
    m_btToggleReceivedSpeedAxis->SetMinSize(wxSize(26,26));
    
    m_staticText7610 = new wxStaticText(this, wxID_ANY, _("[mm/min]"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText7610Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText7610->SetFont(m_staticText7610Font);
    
    flexGridSizer7523->Add(m_staticText7610, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine7557 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer7523->Add(m_staticLine7557, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btClear = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), wxBU_AUTODRAW);
    m_btClear->SetToolTip(_("Clear Speed Monitor"));
    
    flexGridSizer7523->Add(m_btClear, 0, wxALL, WXC_FROM_DIP(1));
    m_btClear->SetMinSize(wxSize(26,26));
    
    m_btSave = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("16-file_save")), wxDefaultPosition, wxDLG_UNIT(this, wxSize(26,26)), wxBU_AUTODRAW);
    m_btSave->SetToolTip(_("Save Speed Monitor"));
    
    flexGridSizer7523->Add(m_btSave, 0, wxALL, WXC_FROM_DIP(1));
    m_btSave->SetMinSize(wxSize(26,26));
    
    wxFlexGridSizer* flexGridSizer7532 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer7532->SetFlexibleDirection( wxBOTH );
    flexGridSizer7532->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7532->AddGrowableCol(0);
    flexGridSizer7532->AddGrowableRow(0);
    
    flexGridSizer7523->Add(flexGridSizer7532, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_staticText7534 = new wxStaticText(this, wxID_ANY, _("Display\nInterval:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText7534Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText7534->SetFont(m_staticText7534Font);
    
    flexGridSizer7532->Add(m_staticText7534, 0, wxALL, WXC_FROM_DIP(0));
    
    m_intervalSlider = new wxSlider(this, wxID_ANY, 50, 5, 250, wxDefaultPosition, wxDLG_UNIT(this, wxSize(90,-1)), wxSL_SELRANGE|wxSL_HORIZONTAL);
    
    flexGridSizer7532->Add(m_intervalSlider, 0, wxALL, WXC_FROM_DIP(1));
    m_intervalSlider->SetMinSize(wxSize(90,-1));
    
    m_staticText7614 = new wxStaticText(this, wxID_ANY, _("[ms]"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    wxFont m_staticText7614Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText7614->SetFont(m_staticText7614Font);
    
    flexGridSizer7532->Add(m_staticText7614, 0, wxALL, WXC_FROM_DIP(3));
    
    wxFlexGridSizer* flexGridSizer7547 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer7547->SetFlexibleDirection( wxBOTH );
    flexGridSizer7547->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7547->AddGrowableCol(1);
    flexGridSizer7547->AddGrowableRow(0);
    
    flexGridSizer7514->Add(flexGridSizer7547, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer7548 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer7548->SetFlexibleDirection( wxBOTH );
    flexGridSizer7548->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7548->AddGrowableCol(0);
    flexGridSizer7548->AddGrowableRow(0);
    
    flexGridSizer7547->Add(flexGridSizer7548, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_leftAxis = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(28,-1)), wxTAB_TRAVERSAL);
    m_leftAxis->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer7548->Add(m_leftAxis, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_leftAxis->SetMinSize(wxSize(28,-1));
    
    flexGridSizer7548->Add(0, 17, 1, wxALL, WXC_FROM_DIP(0));
    
    m_scrollWindow = new wxScrolledWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxHSCROLL);
    m_scrollWindow->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_scrollWindow->SetScrollRate(5, 5);
    
    flexGridSizer7547->Add(m_scrollWindow, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer7540 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer7540->SetFlexibleDirection( wxBOTH );
    flexGridSizer7540->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_scrollWindow->SetSizer(flexGridSizer7540);
    
    m_darwingArea = new wxPanel(m_scrollWindow, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_scrollWindow, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_darwingArea->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    flexGridSizer7540->Add(m_darwingArea, 0, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer7551 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer7551->SetFlexibleDirection( wxBOTH );
    flexGridSizer7551->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer7551->AddGrowableCol(0);
    flexGridSizer7551->AddGrowableRow(0);
    
    flexGridSizer7547->Add(flexGridSizer7551, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_rightAxis = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(28,-1)), wxTAB_TRAVERSAL);
    m_rightAxis->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    
    flexGridSizer7551->Add(m_rightAxis, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_rightAxis->SetMinSize(wxSize(28,-1));
    
    flexGridSizer7551->Add(0, 17, 1, wxALL, WXC_FROM_DIP(0));
    
    m_refreshTimer = new wxTimer;
    
    SetName(wxT("CncSpeedMonitorBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    // Connect events
    m_btToggleConnection->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::toggleConnection), NULL, this);
    m_btToggleMeasurePointsAxis->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::toggleMeasurePointsAxis), NULL, this);
    m_btToggleConfiguredAxis->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::toggleConfiguredAxis), NULL, this);
    m_btToggleMeasuredSpeedAxis->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::toggleMeasuredSpeedAxis), NULL, this);
    m_btToggleReceivedSpeedAxis->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::toggleReceivedSpeedAxis), NULL, this);
    m_btClear->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::onClear), NULL, this);
    m_btSave->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::onSave), NULL, this);
    m_intervalSlider->Connect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(CncSpeedMonitorBase::changeIntervalSlider), NULL, this);
    m_intervalSlider->Connect(wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler(CncSpeedMonitorBase::changeIntervalSlider), NULL, this);
    m_intervalSlider->Connect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(CncSpeedMonitorBase::changeIntervalSlider), NULL, this);
    m_leftAxis->Connect(wxEVT_PAINT, wxPaintEventHandler(CncSpeedMonitorBase::onPaintLeftAxis), NULL, this);
    m_scrollWindow->Connect(wxEVT_SIZE, wxSizeEventHandler(CncSpeedMonitorBase::onScrolledSize), NULL, this);
    m_darwingArea->Connect(wxEVT_SIZE, wxSizeEventHandler(CncSpeedMonitorBase::onSize), NULL, this);
    m_darwingArea->Connect(wxEVT_PAINT, wxPaintEventHandler(CncSpeedMonitorBase::onPaint), NULL, this);
    m_darwingArea->Connect(wxEVT_MOTION, wxMouseEventHandler(CncSpeedMonitorBase::onMouseMotion), NULL, this);
    m_darwingArea->Connect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncSpeedMonitorBase::onLeftDown), NULL, this);
    m_darwingArea->Connect(wxEVT_LEFT_UP, wxMouseEventHandler(CncSpeedMonitorBase::onLeftUp), NULL, this);
    m_rightAxis->Connect(wxEVT_PAINT, wxPaintEventHandler(CncSpeedMonitorBase::onPaintRightAxis), NULL, this);
    m_refreshTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncSpeedMonitorBase::onRefreshTimer), NULL, this);
    
}

CncSpeedMonitorBase::~CncSpeedMonitorBase()
{
    m_btToggleConnection->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::toggleConnection), NULL, this);
    m_btToggleMeasurePointsAxis->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::toggleMeasurePointsAxis), NULL, this);
    m_btToggleConfiguredAxis->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::toggleConfiguredAxis), NULL, this);
    m_btToggleMeasuredSpeedAxis->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::toggleMeasuredSpeedAxis), NULL, this);
    m_btToggleReceivedSpeedAxis->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::toggleReceivedSpeedAxis), NULL, this);
    m_btClear->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::onClear), NULL, this);
    m_btSave->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncSpeedMonitorBase::onSave), NULL, this);
    m_intervalSlider->Disconnect(wxEVT_SCROLL_THUMBTRACK, wxScrollEventHandler(CncSpeedMonitorBase::changeIntervalSlider), NULL, this);
    m_intervalSlider->Disconnect(wxEVT_SCROLL_THUMBRELEASE, wxScrollEventHandler(CncSpeedMonitorBase::changeIntervalSlider), NULL, this);
    m_intervalSlider->Disconnect(wxEVT_SCROLL_CHANGED, wxScrollEventHandler(CncSpeedMonitorBase::changeIntervalSlider), NULL, this);
    m_leftAxis->Disconnect(wxEVT_PAINT, wxPaintEventHandler(CncSpeedMonitorBase::onPaintLeftAxis), NULL, this);
    m_scrollWindow->Disconnect(wxEVT_SIZE, wxSizeEventHandler(CncSpeedMonitorBase::onScrolledSize), NULL, this);
    m_darwingArea->Disconnect(wxEVT_SIZE, wxSizeEventHandler(CncSpeedMonitorBase::onSize), NULL, this);
    m_darwingArea->Disconnect(wxEVT_PAINT, wxPaintEventHandler(CncSpeedMonitorBase::onPaint), NULL, this);
    m_darwingArea->Disconnect(wxEVT_MOTION, wxMouseEventHandler(CncSpeedMonitorBase::onMouseMotion), NULL, this);
    m_darwingArea->Disconnect(wxEVT_LEFT_DOWN, wxMouseEventHandler(CncSpeedMonitorBase::onLeftDown), NULL, this);
    m_darwingArea->Disconnect(wxEVT_LEFT_UP, wxMouseEventHandler(CncSpeedMonitorBase::onLeftUp), NULL, this);
    m_rightAxis->Disconnect(wxEVT_PAINT, wxPaintEventHandler(CncSpeedMonitorBase::onPaintRightAxis), NULL, this);
    m_refreshTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncSpeedMonitorBase::onRefreshTimer), NULL, this);
    
    m_refreshTimer->Stop();
    wxDELETE( m_refreshTimer );

}
