#include <chrono>
#include "SerialCircularBuffer.h"

///////////////////////////////////////////////////////////////////
SerialCircularBuffer::SerialCircularBuffer()
: msReadTimeout(2000)
, condition()
, monitor()
, circularBuffer()
///////////////////////////////////////////////////////////////////
{
	circularBuffer.set_capacity(10 * 1024);
}
///////////////////////////////////////////////////////////////////
SerialCircularBuffer::~SerialCircularBuffer() {
///////////////////////////////////////////////////////////////////
	circularBuffer.clear();
}
///////////////////////////////////////////////////////////////////
void SerialCircularBuffer::clear() {
///////////////////////////////////////////////////////////////////
	Lock lk(monitor);
	circularBuffer.clear();
}
///////////////////////////////////////////////////////////////////
int SerialCircularBuffer::capacity() {
///////////////////////////////////////////////////////////////////
	Lock lk(monitor);
	return circularBuffer.capacity();
}
///////////////////////////////////////////////////////////////////
int SerialCircularBuffer::size() {
///////////////////////////////////////////////////////////////////
	Lock lk(monitor);
	return circularBuffer.size();
}
///////////////////////////////////////////////////////////////////
bool SerialCircularBuffer::write(unsigned char* buffer, int wbSize) {
///////////////////////////////////////////////////////////////////
	if ( buffer == NULL )
		return false;
		
	if ( wbSize <= 0 )
		return false;
		
	Lock lk(monitor);
	for ( int i = 0; i < wbSize; i++ )
		circularBuffer.push_back(buffer[i]);
	
	condition.notify_one();
	return true;
}
///////////////////////////////////////////////////////////////////
int SerialCircularBuffer::read(unsigned char* buffer, int rbSize) {
///////////////////////////////////////////////////////////////////
	if ( buffer == NULL )
		return 0;
		
	if ( rbSize <= 0 )
		return 0;

	Lock lk(monitor);
	
	if ( size() < rbSize ) 
		condition.wait_for(lk, std::chrono::milliseconds(msReadTimeout) );

	const int ret = std::min(size(), rbSize);
	for ( int i = 0; i < ret; i++ ) {
		buffer[i] = circularBuffer[0];
		circularBuffer.pop_front();
	}
	
	return ret;
}




