#include "GCodePathHandlerGL.h"

//////////////////////////////////////////////////////////////////
GCodePathHandlerGL::GCodePathHandlerGL(CncGCodePreview* gl) 
: GCodePathHandlerBase()
, glControl(gl)
, currentSpeed(CncSpeed::CncSpeedRapid)
{
//////////////////////////////////////////////////////////////////
	wxASSERT(glControl);
}
//////////////////////////////////////////////////////////////////
GCodePathHandlerGL::~GCodePathHandlerGL() {
//////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////
void GCodePathHandlerGL::prepareWorkImpl() {
//////////////////////////////////////////////////////////////////
	wxASSERT(glControl);
	glControl->pushProcessMode();
}
//////////////////////////////////////////////////////////////////
void GCodePathHandlerGL::finishWorkImpl() {
//////////////////////////////////////////////////////////////////
	wxASSERT(glControl);
	glControl->popProcessMode();
	
	/*
	 * todo
	currentPos.setXYZ(0.0, 0.0, 0.0);
	
	cncControl->moveXYZToZeroPos();
	cncControl->switchToolOff();
	 * */
}
//////////////////////////////////////////////////////////////////
bool GCodePathHandlerGL::processLinearMove(bool alreadyRendered) {
//////////////////////////////////////////////////////////////////
	wxASSERT(glControl);
	
	static CncGCodePreview::VerticeData vd;
	vd.setVertice(currentSpeed, currentPos);
	glControl->appendVertice(vd);

	#warning - consider unit!
	return true; 
}
//////////////////////////////////////////////////////////////////
bool GCodePathHandlerGL::changeWorkSpeedXY(CncSpeed s) {
//////////////////////////////////////////////////////////////////
	currentSpeed = s;
	return true;
}

