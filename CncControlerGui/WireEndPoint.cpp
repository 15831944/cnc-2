#include <iostream>
#include <cmath>
#include <ctgmath>
#include <wx/debug.h>
#include <wx/string.h>
#include "CncCommon.h"
#include "CncArduino.h"
#include "SerialThread.h"
#include "WireCircularBuffer.h"
#include "WireEndPoint.h"

/////////////////////////////////////////////////////////////////////
WireEndPoint::WireEndPoint(WireCircularBuffer* rb, WireCircularBuffer* wb)
: BaseEndPoint()
, rdBuffer(rb)
, wtBuffer(wb)
/////////////////////////////////////////////////////////////////////
{
}
/////////////////////////////////////////////////////////////////////
WireEndPoint::~WireEndPoint() {
/////////////////////////////////////////////////////////////////////
	purge();
}
/////////////////////////////////////////////////////////////////////
void WireEndPoint::begin() {
/////////////////////////////////////////////////////////////////////
	purge();
}
/////////////////////////////////////////////////////////////////////
void WireEndPoint::end() {
/////////////////////////////////////////////////////////////////////
	purge();
}
/////////////////////////////////////////////////////////////////////
void WireEndPoint::purge() {
/////////////////////////////////////////////////////////////////////
	wxASSERT ( rdBuffer != NULL );
	rdBuffer->clear();

	wxASSERT ( wtBuffer != NULL );
	wtBuffer->clear();
}
/////////////////////////////////////////////////////////////////////
void WireEndPoint::flush() {
/////////////////////////////////////////////////////////////////////
	// ????
}
/////////////////////////////////////////////////////////////////////
int WireEndPoint::available(void) {
/////////////////////////////////////////////////////////////////////
	wxASSERT ( rdBuffer != NULL );
	return rdBuffer->size();
}
/////////////////////////////////////////////////////////////////////
int WireEndPoint::peek(void) {
/////////////////////////////////////////////////////////////////////
	wxASSERT ( rdBuffer != NULL );
	return rdBuffer->peak();
}
/////////////////////////////////////////////////////////////////////
int WireEndPoint::read(void) {
/////////////////////////////////////////////////////////////////////
	wxASSERT ( rdBuffer != NULL );
	return rdBuffer->read();
}
/////////////////////////////////////////////////////////////////////
int WireEndPoint::readBytes(byte* b, int size) {
/////////////////////////////////////////////////////////////////////
	wxASSERT ( rdBuffer != NULL );
	return rdBuffer->read(b, size);
}
/////////////////////////////////////////////////////////////////////
int WireEndPoint::write(byte b) {
/////////////////////////////////////////////////////////////////////
	wxASSERT ( wtBuffer != NULL );
	return wtBuffer->write(b);
}
/////////////////////////////////////////////////////////////////////
int WireEndPoint::write(const byte* b, int size) {
/////////////////////////////////////////////////////////////////////
	wxASSERT ( wtBuffer != NULL );
	return wtBuffer->write((byte*)b, size);
}
/////////////////////////////////////////////////////////////////////
int WireEndPoint::write(const char* str) {
/////////////////////////////////////////////////////////////////////
	wxASSERT ( wtBuffer != NULL );

	if ( str == NULL )
		return 0;

	wxString s(str);
	for ( unsigned int i = 0; i< s.length(); i++ ) {
		wtBuffer->write(str[i]);
	}

	return s.length();
}
/////////////////////////////////////////////////////////////////////
int WireEndPoint::requestFrom(const int id, const unsigned int bCount) {
/////////////////////////////////////////////////////////////////////
	if ( SerialThread::theSerialThread() == NULL )
		return 0;

	unsigned char ls = '\0';
	unsigned char ss = '\0';

	if ( SerialThread::getI2CStateValue(id, bCount, ls, ss) == false )
		return 0;
		
	// hack: direct loop back
	rdBuffer->clear();
	rdBuffer->write(ls);
	rdBuffer->write(ss);
	
	return bCount;
}
/////////////////////////////////////////////////////////////////////
void WireEndPoint::beginTransmission(int deviceID) {
/////////////////////////////////////////////////////////////////////
	SerialThread::publishMessage('W', wxString::Format("%s is currently not implemented", CNC_LOG_FUNCT), CNC_LOG_FUNCT);
}
/////////////////////////////////////////////////////////////////////
byte WireEndPoint::endTransmission(bool stop) {
/////////////////////////////////////////////////////////////////////
	// possible return values
	// 0:success
	// 1:data too long to fit in transmit buffer
	// 2:received NACK on transmit of address
	// 3:received NACK on transmit of data
	// 4:other error
	SerialThread::publishMessage('W', wxString::Format("%s is currently not implemented", CNC_LOG_FUNCT), CNC_LOG_FUNCT);
	return 0;
}
