#ifndef SVG_PATH_GROUP_H
#define SVG_PATH_GROUP_H

#include <wx/xml/xml.h>
#include "SvgPathString.h"

////////////////////////////////////////////////////////////////////////////////////
class SvgPathGroup : public SvgGeneratorBase {
	
	protected:
		SVGUnit inputUnit;
		wxXmlDocument xmlDoc;
		wxString pathGroup;
		wxString transform;
		wxString cncParmeterBlock;
		SvgPathString generator;
		bool includeRefCross;
		
		////////////////////////////////////////////////////////////////////////////
		void initGroup();
		
		////////////////////////////////////////////////////////////////////////////
		void finishGroup();
		
		////////////////////////////////////////////////////////////////////////////
		void addReferenceCross(wxString& ps);
		
	public:
		////////////////////////////////////////////////////////////////////////////
		SvgPathGroup(SVGUnit i = mm) 
		: SvgGeneratorBase()
		, inputUnit(i)
		, xmlDoc()
		, pathGroup()
		, transform()
		, cncParmeterBlock()
		, generator(i)
		, includeRefCross(true)
		{
		}
		////////////////////////////////////////////////////////////////////////////
		virtual ~SvgPathGroup() {
		}
		
		////////////////////////////////////////////////////////////////////////////
		void setIncludeReferenceCross(bool state) {
			includeRefCross = state;
		}
		
		////////////////////////////////////////////////////////////////////////////
		virtual void setColour(const wxColour& c) {
			SvgGeneratorBase::setColour(c);
			pGen().setColour(c);
			fGen().setColour(c);
		}
		
		////////////////////////////////////////////////////////////////////////////
		virtual void setReferencePoint(const wxRealPoint& p) {
			SvgGeneratorBase::setReferencePoint(p);
			pGen().setReferencePoint(p);
			fGen().setReferencePoint(p);
		}
		
		////////////////////////////////////////////////////////////////////////////
		virtual void setXmlPattern(const wxString& pattern) {
			SvgGeneratorBase::setXmlPattern(pattern);
			pGen().setXmlPattern(pattern);
			fGen().setXmlPattern(pattern);
		}
		
		////////////////////////////////////////////////////////////////////////////
		SvgPathString& pGen()   { return generator; }
		SvgPathFragment& fGen() { return generator.fGen(); }
		
		////////////////////////////////////////////////////////////////////////////
		void addCncParameterBlock(wxString& cpb) {
			cncParmeterBlock.assign(cpb);
			add(cncParmeterBlock);
		}
		
		////////////////////////////////////////////////////////////////////////////
		const wxString& getCncParameterBlock() const {
			return cncParmeterBlock;
		}
		
		////////////////////////////////////////////////////////////////////////////
		void add(const wxString& ps);
		
		////////////////////////////////////////////////////////////////////////////
		const wxString& get();
		
		////////////////////////////////////////////////////////////////////////////
		wxXmlNode* getXmlRoot();
		
		////////////////////////////////////////////////////////////////////////////
		void translate(double xy);
		void translate(double x, double y);
		
		////////////////////////////////////////////////////////////////////////////
		void scale(double xy);
		void scale(double x, double y);
		
		////////////////////////////////////////////////////////////////////////////
		void rotate(double a, double x, double y);
		
		////////////////////////////////////////////////////////////////////////////
		void skewX(double x);
		void skewY(double y);
		
		////////////////////////////////////////////////////////////////////////////
		const wxString& getTransform() const {
			return transform;
		}
		
		////////////////////////////////////////////////////////////////////////////
		virtual bool hasError() { return (SvgGeneratorBase::hasError() || fGen().hasError() || pGen().hasError()); }
		virtual bool isOK() { return !hasError(); }
		
		////////////////////////////////////////////////////////////////////////////
		virtual const wxString& getErrorInfo() {
			static wxString s;
			
			s = "";
			s << fGen().getErrorInfo();
			s << pGen().getErrorInfo();
			s << SvgGeneratorBase::getErrorInfo();
			
			return s;
		}
};

#endif