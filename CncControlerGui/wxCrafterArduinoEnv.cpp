//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxCrafterArduinoEnv.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxCrafterArduinoEnv.h"


// Declare the bitmap loading function
extern void wxCBC33InitBitmapResources();

static bool bBitmapLoaded = false;


CncArduinoEnvironmentBase::CncArduinoEnvironmentBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCBC33InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("bug (2)"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    wxFlexGridSizer* flexGridSizer3 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer3->SetFlexibleDirection( wxBOTH );
    flexGridSizer3->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer3->AddGrowableCol(0);
    flexGridSizer3->AddGrowableRow(1);
    this->SetSizer(flexGridSizer3);
    
    m_panelToolbar = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,34)), wxTAB_TRAVERSAL);
    m_panelToolbar->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_SCROLLBAR));
    
    flexGridSizer3->Add(m_panelToolbar, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer100 = new wxFlexGridSizer(0, 10, 0, 0);
    flexGridSizer100->SetFlexibleDirection( wxBOTH );
    flexGridSizer100->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_panelToolbar->SetSizer(flexGridSizer100);
    
    m_btForceUpdate = new wxButton(m_panelToolbar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelToolbar, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btForceUpdate->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("database_refresh")), wxLEFT);
    m_btForceUpdate->SetBitmapMargins(2,2);
    #endif
    m_btForceUpdate->SetToolTip(_("Force Update"));
    
    flexGridSizer100->Add(m_btForceUpdate, 0, wxALL, WXC_FROM_DIP(3));
    m_btForceUpdate->SetMinSize(wxSize(26,26));
    
    m_btClearTrace = new wxButton(m_panelToolbar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelToolbar, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btClearTrace->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-clean")), wxLEFT);
    m_btClearTrace->SetBitmapMargins(2,2);
    #endif
    m_btClearTrace->SetToolTip(_("Clear Trace"));
    
    flexGridSizer100->Add(m_btClearTrace, 0, wxALL, WXC_FROM_DIP(3));
    m_btClearTrace->SetMinSize(wxSize(26,26));
    
    m_staticLine247 = new wxStaticLine(m_panelToolbar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelToolbar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer100->Add(m_staticLine247, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_btPeriphery = new wxButton(m_panelToolbar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelToolbar, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btPeriphery->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-pull")), wxLEFT);
    m_btPeriphery->SetBitmapMargins(2,2);
    #endif
    m_btPeriphery->SetToolTip(_("Show Arduinos\nPeriphery"));
    
    flexGridSizer100->Add(m_btPeriphery, 0, wxALL, WXC_FROM_DIP(3));
    m_btPeriphery->SetMinSize(wxSize(26,26));
    
    m_btConfiguration = new wxButton(m_panelToolbar, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelToolbar, wxSize(26,26)), 0);
    #if wxVERSION_NUMBER >= 2904
    m_btConfiguration->SetBitmap(wxXmlResource::Get()->LoadBitmap(wxT("16-cog")), wxLEFT);
    m_btConfiguration->SetBitmapMargins(2,2);
    #endif
    m_btConfiguration->SetToolTip(_("Show Configuration"));
    
    flexGridSizer100->Add(m_btConfiguration, 0, wxALL, WXC_FROM_DIP(3));
    m_btConfiguration->SetMinSize(wxSize(26,26));
    m_panelToolbar->SetMinSize(wxSize(-1,34));
    
    wxFlexGridSizer* flexGridSizer35 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer35->SetFlexibleDirection( wxBOTH );
    flexGridSizer35->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer35->AddGrowableCol(0);
    flexGridSizer35->AddGrowableRow(0);
    
    flexGridSizer3->Add(flexGridSizer35, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitterMainH = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_3D);
    m_splitterMainH->SetSashGravity(0.5);
    m_splitterMainH->SetMinimumPaneSize(10);
    
    flexGridSizer35->Add(m_splitterMainH, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_splitterPageTop = new wxPanel(m_splitterMainH, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterMainH, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitterPageTop->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    wxFlexGridSizer* flexGridSizer24 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer24->SetFlexibleDirection( wxBOTH );
    flexGridSizer24->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer24->AddGrowableCol(1);
    flexGridSizer24->AddGrowableRow(0);
    m_splitterPageTop->SetSizer(flexGridSizer24);
    
    wxFlexGridSizer* flexGridSizer40 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer40->SetFlexibleDirection( wxBOTH );
    flexGridSizer40->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer40->AddGrowableCol(0);
    flexGridSizer40->AddGrowableRow(1);
    
    flexGridSizer24->Add(flexGridSizer40, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText91 = new wxStaticText(m_splitterPageTop, wxID_ANY, _("Pin Overview:"), wxDefaultPosition, wxDLG_UNIT(m_splitterPageTop, wxSize(-1,-1)), 0);
    m_staticText91->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_staticText91->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText91Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText91->SetFont(m_staticText91Font);
    
    flexGridSizer40->Add(m_staticText91, 0, wxALL, WXC_FROM_DIP(5));
    
    m_pinListPlaceholder = new wxPanel(m_splitterPageTop, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPageTop, wxSize(300,-1)), wxTAB_TRAVERSAL);
    m_pinListPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INFOBK));
    
    flexGridSizer40->Add(m_pinListPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    m_pinListPlaceholder->SetMinSize(wxSize(300,-1));
    
    wxFlexGridSizer* flexGridSizer92 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer92->SetFlexibleDirection( wxBOTH );
    flexGridSizer92->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer92->AddGrowableCol(0);
    flexGridSizer92->AddGrowableRow(0);
    
    flexGridSizer24->Add(flexGridSizer92, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_contextBook = new wxSimplebook(m_splitterPageTop, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPageTop, wxSize(-1,-1)), wxBK_DEFAULT);
    m_contextBook->SetName(wxT("m_contextBook"));
    wxImageList* m_contextBook_il = new wxImageList(16, 16);
    m_contextBook->AssignImageList(m_contextBook_il);
    m_contextBook->SetEffect(wxSHOW_EFFECT_NONE);
    
    flexGridSizer92->Add(m_contextBook, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelArduinosPeriphery = new wxPanel(m_contextBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_contextBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelArduinosPeriphery->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_contextBook->AddPage(m_panelArduinosPeriphery, _("Arduino\nPeriphery"), false);
    
    wxFlexGridSizer* flexGridSizer122 = new wxFlexGridSizer(5, 1, 0, 0);
    flexGridSizer122->SetFlexibleDirection( wxBOTH );
    flexGridSizer122->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer122->AddGrowableCol(0);
    flexGridSizer122->AddGrowableRow(4);
    m_panelArduinosPeriphery->SetSizer(flexGridSizer122);
    
    wxFlexGridSizer* flexGridSizer67 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer67->SetFlexibleDirection( wxBOTH );
    flexGridSizer67->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer67->AddGrowableCol(0);
    flexGridSizer67->AddGrowableRow(0);
    
    flexGridSizer122->Add(flexGridSizer67, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer79 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer79->SetFlexibleDirection( wxBOTH );
    flexGridSizer79->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer79->AddGrowableCol(0);
    flexGridSizer79->AddGrowableRow(0);
    
    flexGridSizer67->Add(flexGridSizer79, 1, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizerLimitLabels = new wxFlexGridSizer(5, 1, 0, 0);
    flexGridSizerLimitLabels->SetFlexibleDirection( wxBOTH );
    flexGridSizerLimitLabels->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer79->Add(flexGridSizerLimitLabels, 1, wxALL, WXC_FROM_DIP(5));
    
    m_staticText83 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Limit Switches:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText83->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText83Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText83->SetFont(m_staticText83Font);
    
    flexGridSizerLimitLabels->Add(m_staticText83, 0, wxALL, WXC_FROM_DIP(5));
    
    flexGridSizerLimitLabels->Add(0, 24, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText85 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Min:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(84,-1)), wxALIGN_RIGHT);
    m_staticText85->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizerLimitLabels->Add(m_staticText85, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText85->SetMinSize(wxSize(84,-1));
    
    flexGridSizerLimitLabels->Add(0, 12, 1, wxALL, WXC_FROM_DIP(0));
    
    m_staticText87 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Max:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(84,-1)), wxALIGN_RIGHT);
    m_staticText87->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizerLimitLabels->Add(m_staticText87, 0, wxALL, WXC_FROM_DIP(5));
    m_staticText87->SetMinSize(wxSize(84,-1));
    
    wxFlexGridSizer* flexGridSizerLimitSwitches = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizerLimitSwitches->SetFlexibleDirection( wxBOTH );
    flexGridSizerLimitSwitches->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer79->Add(flexGridSizerLimitSwitches, 1, wxALL, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer60X = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer60X->SetFlexibleDirection( wxBOTH );
    flexGridSizer60X->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerLimitSwitches->Add(flexGridSizer60X, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_limitSwicthLabelX = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("X"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,-1)), wxALIGN_CENTRE);
    m_limitSwicthLabelX->SetForegroundColour(wxColour(wxT("rgb(255,108,108)")));
    wxFont m_limitSwicthLabelXFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_limitSwicthLabelX->SetFont(m_limitSwicthLabelXFont);
    
    flexGridSizer60X->Add(m_limitSwicthLabelX, 0, wxALL, WXC_FROM_DIP(5));
    m_limitSwicthLabelX->SetMinSize(wxSize(42,-1));
    
    m_staticText172 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("On       Off"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText172->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText172Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText172->SetFont(m_staticText172Font);
    
    flexGridSizer60X->Add(m_staticText172, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btMinX = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer60X->Add(m_btMinX, 0, wxALL, WXC_FROM_DIP(5));
    m_btMinX->SetMinSize(wxSize(42,24));
    
    m_btMaxX = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer60X->Add(m_btMaxX, 0, wxALL, WXC_FROM_DIP(5));
    m_btMaxX->SetMinSize(wxSize(42,24));
    
    wxFlexGridSizer* flexGridSizer60Y = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer60Y->SetFlexibleDirection( wxBOTH );
    flexGridSizer60Y->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerLimitSwitches->Add(flexGridSizer60Y, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_limitSwicthLabelY = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Y"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,-1)), wxALIGN_CENTRE);
    m_limitSwicthLabelY->SetForegroundColour(wxColour(wxT("rgb(0,145,215)")));
    wxFont m_limitSwicthLabelYFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_limitSwicthLabelY->SetFont(m_limitSwicthLabelYFont);
    
    flexGridSizer60Y->Add(m_limitSwicthLabelY, 0, wxALL, WXC_FROM_DIP(5));
    m_limitSwicthLabelY->SetMinSize(wxSize(42,-1));
    
    m_staticText17218 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("On       Off"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText17218->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText17218Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText17218->SetFont(m_staticText17218Font);
    
    flexGridSizer60Y->Add(m_staticText17218, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btMinY = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer60Y->Add(m_btMinY, 0, wxALL, WXC_FROM_DIP(5));
    m_btMinY->SetMinSize(wxSize(42,24));
    
    m_btMaxY = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer60Y->Add(m_btMaxY, 0, wxALL, WXC_FROM_DIP(5));
    m_btMaxY->SetMinSize(wxSize(42,24));
    
    wxFlexGridSizer* flexGridSizer60Z = new wxFlexGridSizer(4, 1, 0, 0);
    flexGridSizer60Z->SetFlexibleDirection( wxBOTH );
    flexGridSizer60Z->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerLimitSwitches->Add(flexGridSizer60Z, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_limitSwicthLabelZ = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Z"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,-1)), wxALIGN_CENTRE);
    m_limitSwicthLabelZ->SetForegroundColour(wxColour(wxT("rgb(0,157,0)")));
    wxFont m_limitSwicthLabelZFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_limitSwicthLabelZ->SetFont(m_limitSwicthLabelZFont);
    
    flexGridSizer60Z->Add(m_limitSwicthLabelZ, 0, wxALL, WXC_FROM_DIP(5));
    m_limitSwicthLabelZ->SetMinSize(wxSize(42,-1));
    
    m_staticText17219 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("On       Off"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText17219->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText17219Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText17219->SetFont(m_staticText17219Font);
    
    flexGridSizer60Z->Add(m_staticText17219, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btMinZ = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer60Z->Add(m_btMinZ, 0, wxALL, WXC_FROM_DIP(5));
    m_btMinZ->SetMinSize(wxSize(42,24));
    
    m_btMaxZ = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer60Z->Add(m_btMaxZ, 0, wxALL, WXC_FROM_DIP(5));
    m_btMaxZ->SetMinSize(wxSize(42,24));
    
    m_staticLine1213 = new wxStaticLine(m_panelArduinosPeriphery, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer122->Add(m_staticLine1213, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer168 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer168->SetFlexibleDirection( wxBOTH );
    flexGridSizer168->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer122->Add(flexGridSizer168, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText170 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Support Switches:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText170->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText170Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText170->SetFont(m_staticText170Font);
    
    flexGridSizer168->Add(m_staticText170, 0, wxALL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer134 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer134->SetFlexibleDirection( wxBOTH );
    flexGridSizer134->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer168->Add(flexGridSizer134, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer1449 = new wxFlexGridSizer(5, 2, 0, 0);
    flexGridSizer1449->SetFlexibleDirection( wxBOTH );
    flexGridSizer1449->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer134->Add(flexGridSizer1449, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText181 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Static Text Label"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    
    flexGridSizer1449->Add(m_staticText181, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText17222 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("On       Off"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText17222->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText17222Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText17222->SetFont(m_staticText17222Font);
    
    flexGridSizer1449->Add(m_staticText17222, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText14610 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Support Button 1:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText14610->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer1449->Add(m_staticText14610, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btSSBit8 = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer1449->Add(m_btSSBit8, 0, wxALL, WXC_FROM_DIP(5));
    m_btSSBit8->SetMinSize(wxSize(42,24));
    
    m_staticText14812 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Support Button 2:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText14812->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer1449->Add(m_staticText14812, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btSSBit7 = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer1449->Add(m_btSSBit7, 0, wxALL, WXC_FROM_DIP(5));
    m_btSSBit7->SetMinSize(wxSize(42,24));
    
    m_staticText15014 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Support Button 3:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText15014->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer1449->Add(m_staticText15014, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btSSBit6 = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer1449->Add(m_btSSBit6, 0, wxALL, WXC_FROM_DIP(5));
    m_btSSBit6->SetMinSize(wxSize(42,24));
    
    m_staticText15216 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("<FREE>:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText15216->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    
    flexGridSizer1449->Add(m_staticText15216, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btSSBit5 = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer1449->Add(m_btSSBit5, 0, wxALL, WXC_FROM_DIP(5));
    m_btSSBit5->SetMinSize(wxSize(42,24));
    
    wxFlexGridSizer* flexGridSizer144 = new wxFlexGridSizer(5, 2, 0, 0);
    flexGridSizer144->SetFlexibleDirection( wxBOTH );
    flexGridSizer144->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer134->Add(flexGridSizer144, 1, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticText183 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Static Text Label"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    
    flexGridSizer144->Add(m_staticText183, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText17221 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("On       Off"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText17221->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText17221Font(7, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText17221->SetFont(m_staticText17221Font);
    
    flexGridSizer144->Add(m_staticText17221, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText146 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Support switch 1:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText146->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer144->Add(m_staticText146, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btSSBit4 = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer144->Add(m_btSSBit4, 0, wxALL, WXC_FROM_DIP(5));
    m_btSSBit4->SetMinSize(wxSize(42,24));
    
    m_staticText148 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Support switch 2:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText148->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer144->Add(m_staticText148, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btSSBit3 = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer144->Add(m_btSSBit3, 0, wxALL, WXC_FROM_DIP(5));
    m_btSSBit3->SetMinSize(wxSize(42,24));
    
    m_staticText150 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Tool powered:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText150->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    
    flexGridSizer144->Add(m_staticText150, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btSSBit2 = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer144->Add(m_btSSBit2, 0, wxALL, WXC_FROM_DIP(5));
    m_btSSBit2->SetMinSize(wxSize(42,24));
    
    m_staticText152 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Cable connected:"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0);
    m_staticText152->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    
    flexGridSizer144->Add(m_staticText152, 0, wxALL, WXC_FROM_DIP(5));
    
    m_btSSBit1 = new wxBitmapButton(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("ToggelSwitch")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(42,24)), wxBU_AUTODRAW);
    
    flexGridSizer144->Add(m_btSSBit1, 0, wxALL, WXC_FROM_DIP(5));
    m_btSSBit1->SetMinSize(wxSize(42,24));
    
    m_staticLine121 = new wxStaticLine(m_panelArduinosPeriphery, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer122->Add(m_staticLine121, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer136 = new wxFlexGridSizer(1, 5, 0, 0);
    flexGridSizer136->SetFlexibleDirection( wxBOTH );
    flexGridSizer136->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer136->AddGrowableCol(0);
    flexGridSizer136->AddGrowableCol(2);
    flexGridSizer136->AddGrowableCol(4);
    flexGridSizer136->AddGrowableRow(0);
    
    flexGridSizer122->Add(flexGridSizer136, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizerStepperX = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizerStepperX->SetFlexibleDirection( wxBOTH );
    flexGridSizerStepperX->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer136->Add(flexGridSizerStepperX, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer210 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer210->SetFlexibleDirection( wxBOTH );
    flexGridSizer210->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerStepperX->Add(flexGridSizer210, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(0));
    
    m_bmpStepper = new wxStaticBitmap(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("steppermotor0")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0 );
    m_bmpStepper->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer210->Add(m_bmpStepper, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer213 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer213->SetFlexibleDirection( wxBOTH );
    flexGridSizer213->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer213->AddGrowableCol(0);
    flexGridSizer213->AddGrowableRow(1);
    
    flexGridSizer210->Add(flexGridSizer213, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText215 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("X"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), wxALIGN_CENTRE);
    m_staticText215->SetForegroundColour(wxColour(wxT("rgb(255,128,128)")));
    wxFont m_staticText215Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText215->SetFont(m_staticText215Font);
    
    flexGridSizer213->Add(m_staticText215, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_bmpDirectionX = new wxStaticBitmap(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("CounterClockwise")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0 );
    
    flexGridSizer213->Add(m_bmpDirectionX, 0, wxALL|wxEXPAND|wxALIGN_BOTTOM, WXC_FROM_DIP(5));
    
    m_posStepperX = new wxTextCtrl(m_panelArduinosPeriphery, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    m_posStepperX->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_posStepperXFont(9, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_posStepperX->SetFont(m_posStepperXFont);
    #if wxVERSION_NUMBER >= 3000
    m_posStepperX->SetHint(wxT(""));
    #endif
    
    flexGridSizerStepperX->Add(m_posStepperX, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticLine217 = new wxStaticLine(m_panelArduinosPeriphery, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer136->Add(m_staticLine217, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizerStepperY = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizerStepperY->SetFlexibleDirection( wxBOTH );
    flexGridSizerStepperY->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer136->Add(flexGridSizerStepperY, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer2109 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2109->SetFlexibleDirection( wxBOTH );
    flexGridSizer2109->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerStepperY->Add(flexGridSizer2109, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(0));
    
    m_bmpStepper10 = new wxStaticBitmap(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("steppermotor0")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0 );
    m_bmpStepper10->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer2109->Add(m_bmpStepper10, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer21311 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer21311->SetFlexibleDirection( wxBOTH );
    flexGridSizer21311->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer21311->AddGrowableCol(0);
    flexGridSizer21311->AddGrowableRow(1);
    
    flexGridSizer2109->Add(flexGridSizer21311, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText21512 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Y"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), wxALIGN_CENTRE);
    m_staticText21512->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_staticText21512Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText21512->SetFont(m_staticText21512Font);
    
    flexGridSizer21311->Add(m_staticText21512, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_bmpDirectionY = new wxStaticBitmap(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("Clockwise")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0 );
    
    flexGridSizer21311->Add(m_bmpDirectionY, 0, wxALL|wxEXPAND|wxALIGN_BOTTOM, WXC_FROM_DIP(5));
    
    m_posStepperY = new wxTextCtrl(m_panelArduinosPeriphery, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    m_posStepperY->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_posStepperYFont(9, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_posStepperY->SetFont(m_posStepperYFont);
    #if wxVERSION_NUMBER >= 3000
    m_posStepperY->SetHint(wxT(""));
    #endif
    
    flexGridSizerStepperY->Add(m_posStepperY, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_staticLine219 = new wxStaticLine(m_panelArduinosPeriphery, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer136->Add(m_staticLine219, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizerStepperZ = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizerStepperZ->SetFlexibleDirection( wxBOTH );
    flexGridSizerStepperZ->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer136->Add(flexGridSizerStepperZ, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer2102 = new wxFlexGridSizer(1, 2, 0, 0);
    flexGridSizer2102->SetFlexibleDirection( wxBOTH );
    flexGridSizer2102->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizerStepperZ->Add(flexGridSizer2102, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(0));
    
    m_bmpStepper3 = new wxStaticBitmap(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("steppermotor0")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0 );
    m_bmpStepper3->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    
    flexGridSizer2102->Add(m_bmpStepper3, 0, wxALL|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxFlexGridSizer* flexGridSizer2134 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer2134->SetFlexibleDirection( wxBOTH );
    flexGridSizer2134->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer2134->AddGrowableCol(0);
    flexGridSizer2134->AddGrowableRow(1);
    
    flexGridSizer2102->Add(flexGridSizer2134, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_staticText2155 = new wxStaticText(m_panelArduinosPeriphery, wxID_ANY, _("Z"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), wxALIGN_CENTRE);
    m_staticText2155->SetForegroundColour(wxColour(wxT("rgb(0,183,0)")));
    wxFont m_staticText2155Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText2155->SetFont(m_staticText2155Font);
    
    flexGridSizer2134->Add(m_staticText2155, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(1));
    
    m_bmpDirectionZ = new wxStaticBitmap(m_panelArduinosPeriphery, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("CounterClockwise")), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), 0 );
    
    flexGridSizer2134->Add(m_bmpDirectionZ, 0, wxALL|wxEXPAND|wxALIGN_BOTTOM, WXC_FROM_DIP(5));
    
    m_posStepperZ = new wxTextCtrl(m_panelArduinosPeriphery, wxID_ANY, wxT("0"), wxDefaultPosition, wxDLG_UNIT(m_panelArduinosPeriphery, wxSize(-1,-1)), wxTE_RIGHT|wxTE_READONLY);
    m_posStepperZ->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_posStepperZFont(9, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_posStepperZ->SetFont(m_posStepperZFont);
    #if wxVERSION_NUMBER >= 3000
    m_posStepperZ->SetHint(wxT(""));
    #endif
    
    flexGridSizerStepperZ->Add(m_posStepperZ, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    m_panelConfiguration = new wxPanel(m_contextBook, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_contextBook, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_panelConfiguration->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    int m_panelConfigurationImgIndex;
    m_panelConfigurationImgIndex = m_contextBook_il->Add(wxXmlResource::Get()->LoadBitmap(wxT("application-view-tile")));
    m_contextBook->AddPage(m_panelConfiguration, _("tbd"), false, m_panelConfigurationImgIndex);
    
    wxFlexGridSizer* flexGridSizer236 = new wxFlexGridSizer(2, 1, 0, 0);
    flexGridSizer236->SetFlexibleDirection( wxBOTH );
    flexGridSizer236->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer236->AddGrowableCol(0);
    flexGridSizer236->AddGrowableRow(1);
    m_panelConfiguration->SetSizer(flexGridSizer236);
    
    m_staticText9117 = new wxStaticText(m_panelConfiguration, wxID_ANY, _("Configuration:"), wxDefaultPosition, wxDLG_UNIT(m_panelConfiguration, wxSize(-1,-1)), 0);
    m_staticText9117->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_staticText9117->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_staticText9117Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_staticText9117->SetFont(m_staticText9117Font);
    
    flexGridSizer236->Add(m_staticText9117, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_pgMgrConfigArr;
    wxUnusedVar(m_pgMgrConfigArr);
    wxArrayInt m_pgMgrConfigIntArr;
    wxUnusedVar(m_pgMgrConfigIntArr);
    m_pgMgrConfig = new wxPropertyGridManager(m_panelConfiguration, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelConfiguration, wxSize(-1,-1)), wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    m_pgMgrConfig->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_pgMgrConfig->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNFACE));
    
    flexGridSizer236->Add(m_pgMgrConfig, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_pgCatTracing = m_pgMgrConfig->Append(  new wxPropertyCategory( _("Tracing") ) );
    m_pgCatTracing->SetHelpString(wxT(""));
    
    m_pgPropTraceGetters = m_pgMgrConfig->AppendIn( m_pgCatTracing,  new wxBoolProperty( _("Trace Getters"), wxPG_LABEL, 1) );
    m_pgPropTraceGetters->SetHelpString(wxT(""));
    
    m_pgPropTraceSetters = m_pgMgrConfig->AppendIn( m_pgCatTracing,  new wxBoolProperty( _("Trace Setters"), wxPG_LABEL, 1) );
    m_pgPropTraceSetters->SetHelpString(wxT(""));
    
    m_staticLine201 = new wxStaticLine(m_splitterPageTop, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPageTop, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer92->Add(m_staticLine201, 0, wxALL|wxEXPAND, WXC_FROM_DIP(1));
    
    wxFlexGridSizer* flexGridSizer193 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer193->SetFlexibleDirection( wxBOTH );
    flexGridSizer193->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer193->AddGrowableCol(0);
    flexGridSizer193->AddGrowableRow(0);
    
    flexGridSizer92->Add(flexGridSizer193, 1, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer1231 = new wxFlexGridSizer(3, 1, 0, 0);
    flexGridSizer1231->SetFlexibleDirection( wxBOTH );
    flexGridSizer1231->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer1231->AddGrowableCol(0);
    flexGridSizer1231->AddGrowableRow(2);
    
    flexGridSizer193->Add(flexGridSizer1231, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_emergencyLabel = new wxStaticText(m_splitterPageTop, wxID_ANY, _("Emergency"), wxDefaultPosition, wxDLG_UNIT(m_splitterPageTop, wxSize(-1,-1)), 0);
    m_emergencyLabel->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNHIGHLIGHT));
    wxFont m_emergencyLabelFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_BOLD, false, wxT("Segoe UI"));
    m_emergencyLabel->SetFont(m_emergencyLabelFont);
    
    flexGridSizer1231->Add(m_emergencyLabel, 0, wxALL|wxALIGN_CENTER, WXC_FROM_DIP(5));
    
    m_btEmergency = new wxBitmapToggleButton(m_splitterPageTop, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("emergency-button-klein")), wxDefaultPosition, wxDLG_UNIT(m_splitterPageTop, wxSize(-1,-1)), 0);
    m_btEmergency->SetValue(false);
    
    flexGridSizer1231->Add(m_btEmergency, 0, wxALL, WXC_FROM_DIP(1));
    
    m_staticBitmap203 = new wxStaticBitmap(m_splitterPageTop, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("Arduino_Logo1")), wxDefaultPosition, wxDLG_UNIT(m_splitterPageTop, wxSize(-1,-1)), 0 );
    
    flexGridSizer1231->Add(m_staticBitmap203, 0, wxALL|wxEXPAND|wxALIGN_BOTTOM, WXC_FROM_DIP(0));
    
    m_splitterPageBottom = new wxPanel(m_splitterMainH, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterMainH, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitterMainH->SplitHorizontally(m_splitterPageTop, m_splitterPageBottom, 0);
    
    wxFlexGridSizer* flexGridSizer19 = new wxFlexGridSizer(1, 1, 0, 0);
    flexGridSizer19->SetFlexibleDirection( wxBOTH );
    flexGridSizer19->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer19->AddGrowableCol(0);
    flexGridSizer19->AddGrowableRow(0);
    m_splitterPageBottom->SetSizer(flexGridSizer19);
    
    m_loggerPlaceholder = new wxPanel(m_splitterPageBottom, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPageBottom, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_loggerPlaceholder->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    flexGridSizer19->Add(m_loggerPlaceholder, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    m_panelStatusbar = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,24)), wxTAB_TRAVERSAL);
    m_panelStatusbar->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_SCROLLBAR));
    
    flexGridSizer3->Add(m_panelStatusbar, 0, wxALL|wxEXPAND, WXC_FROM_DIP(0));
    
    wxFlexGridSizer* flexGridSizer104 = new wxFlexGridSizer(1, 9, 0, 0);
    flexGridSizer104->SetFlexibleDirection( wxBOTH );
    flexGridSizer104->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer104->AddGrowableCol(6);
    flexGridSizer104->AddGrowableRow(0);
    m_panelStatusbar->SetSizer(flexGridSizer104);
    
    m_staticText127 = new wxStaticText(m_panelStatusbar, wxID_ANY, _("LimitStates:"), wxDefaultPosition, wxDLG_UNIT(m_panelStatusbar, wxSize(-1,-1)), 0);
    
    flexGridSizer104->Add(m_staticText127, 0, wxALL, WXC_FROM_DIP(5));
    
    m_curLimitStates = new wxTextCtrl(m_panelStatusbar, wxID_ANY, wxT("01010101"), wxDefaultPosition, wxDLG_UNIT(m_panelStatusbar, wxSize(60,-1)), wxTE_READONLY|wxTE_CENTRE|wxBORDER_NONE);
    m_curLimitStates->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_curLimitStatesFont(9, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_curLimitStates->SetFont(m_curLimitStatesFont);
    #if wxVERSION_NUMBER >= 3000
    m_curLimitStates->SetHint(wxT(""));
    #endif
    
    flexGridSizer104->Add(m_curLimitStates, 0, wxALL, WXC_FROM_DIP(5));
    m_curLimitStates->SetMinSize(wxSize(60,-1));
    
    m_staticLine186 = new wxStaticLine(m_panelStatusbar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelStatusbar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer104->Add(m_staticLine186, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_staticText129 = new wxStaticText(m_panelStatusbar, wxID_ANY, _("SupportStates:"), wxDefaultPosition, wxDLG_UNIT(m_panelStatusbar, wxSize(-1,-1)), 0);
    
    flexGridSizer104->Add(m_staticText129, 0, wxALL, WXC_FROM_DIP(5));
    
    m_curSupportStates = new wxTextCtrl(m_panelStatusbar, wxID_ANY, wxT("01010101"), wxDefaultPosition, wxDLG_UNIT(m_panelStatusbar, wxSize(60,-1)), wxTE_READONLY|wxTE_CENTRE|wxBORDER_NONE);
    m_curSupportStates->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_curSupportStatesFont(9, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_curSupportStates->SetFont(m_curSupportStatesFont);
    #if wxVERSION_NUMBER >= 3000
    m_curSupportStates->SetHint(wxT(""));
    #endif
    
    flexGridSizer104->Add(m_curSupportStates, 0, wxALL, WXC_FROM_DIP(5));
    m_curSupportStates->SetMinSize(wxSize(60,-1));
    
    m_staticLine188 = new wxStaticLine(m_panelStatusbar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelStatusbar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer104->Add(m_staticLine188, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    m_panel190 = new wxPanel(m_panelStatusbar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelStatusbar, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    flexGridSizer104->Add(m_panel190, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine1881 = new wxStaticLine(m_panelStatusbar, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelStatusbar, wxSize(-1,-1)), wxLI_VERTICAL);
    
    flexGridSizer104->Add(m_staticLine1881, 0, wxALL|wxEXPAND, WXC_FROM_DIP(2));
    
    wxFlexGridSizer* flexGridSizer184 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer184->SetFlexibleDirection( wxBOTH );
    flexGridSizer184->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    flexGridSizer104->Add(flexGridSizer184, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(0));
    
    m_staticText106 = new wxStaticText(m_panelStatusbar, wxID_ANY, _("Last Update:"), wxDefaultPosition, wxDLG_UNIT(m_panelStatusbar, wxSize(-1,-1)), 0);
    wxFont m_staticText106Font(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_staticText106->SetFont(m_staticText106Font);
    
    flexGridSizer184->Add(m_staticText106, 0, wxALL, WXC_FROM_DIP(5));
    
    m_lastUpdate = new wxTextCtrl(m_panelStatusbar, wxID_ANY, wxT("00:00:00"), wxDefaultPosition, wxDLG_UNIT(m_panelStatusbar, wxSize(62,-1)), wxTE_READONLY|wxTE_CENTRE|wxBORDER_NONE);
    m_lastUpdate->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_HIGHLIGHT));
    wxFont m_lastUpdateFont(9, wxFONTFAMILY_MODERN, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Consolas"));
    m_lastUpdate->SetFont(m_lastUpdateFont);
    #if wxVERSION_NUMBER >= 3000
    m_lastUpdate->SetHint(wxT(""));
    #endif
    
    flexGridSizer184->Add(m_lastUpdate, 0, wxALL, WXC_FROM_DIP(5));
    m_lastUpdate->SetMinSize(wxSize(62,-1));
    m_panelStatusbar->SetMinSize(wxSize(-1,24));
    
    m_startupTimer = new wxTimer;
    m_startupTimer->Start(500, true);
    
    m_continuousTimer = new wxTimer;
    m_continuousTimer->Start(1000, false);
    
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_contextBook)){
        wxPersistenceManager::Get().RegisterAndRestore(m_contextBook);
    } else {
        wxPersistenceManager::Get().Restore(m_contextBook);
    }
    #endif
    
    SetName(wxT("CncArduinoEnvironmentBase"));
    SetSize(800,1000);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(CncArduinoEnvironmentBase::onClose), NULL, this);
    this->Connect(wxEVT_SHOW, wxShowEventHandler(CncArduinoEnvironmentBase::onShow), NULL, this);
    m_btForceUpdate->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncArduinoEnvironmentBase::onForceUpdate), NULL, this);
    m_btClearTrace->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncArduinoEnvironmentBase::onClearTrace), NULL, this);
    m_btPeriphery->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncArduinoEnvironmentBase::onSelectArduinoPeriphery), NULL, this);
    m_btConfiguration->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncArduinoEnvironmentBase::onSelectConfiguration), NULL, this);
    m_pgMgrConfig->Connect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(CncArduinoEnvironmentBase::onConfigChanged), NULL, this);
    m_pgMgrConfig->Connect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(CncArduinoEnvironmentBase::onConfigChanging), NULL, this);
    m_btEmergency->Connect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncArduinoEnvironmentBase::onEmergencyButton), NULL, this);
    m_startupTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncArduinoEnvironmentBase::onStartupTimer), NULL, this);
    m_continuousTimer->Connect(wxEVT_TIMER, wxTimerEventHandler(CncArduinoEnvironmentBase::onContinuousTimer), NULL, this);
    
}

CncArduinoEnvironmentBase::~CncArduinoEnvironmentBase()
{
    this->Disconnect(wxEVT_CLOSE_WINDOW, wxCloseEventHandler(CncArduinoEnvironmentBase::onClose), NULL, this);
    this->Disconnect(wxEVT_SHOW, wxShowEventHandler(CncArduinoEnvironmentBase::onShow), NULL, this);
    m_btForceUpdate->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncArduinoEnvironmentBase::onForceUpdate), NULL, this);
    m_btClearTrace->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncArduinoEnvironmentBase::onClearTrace), NULL, this);
    m_btPeriphery->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncArduinoEnvironmentBase::onSelectArduinoPeriphery), NULL, this);
    m_btConfiguration->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(CncArduinoEnvironmentBase::onSelectConfiguration), NULL, this);
    m_pgMgrConfig->Disconnect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(CncArduinoEnvironmentBase::onConfigChanged), NULL, this);
    m_pgMgrConfig->Disconnect(wxEVT_PG_CHANGING, wxPropertyGridEventHandler(CncArduinoEnvironmentBase::onConfigChanging), NULL, this);
    m_btEmergency->Disconnect(wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, wxCommandEventHandler(CncArduinoEnvironmentBase::onEmergencyButton), NULL, this);
    m_startupTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncArduinoEnvironmentBase::onStartupTimer), NULL, this);
    m_continuousTimer->Disconnect(wxEVT_TIMER, wxTimerEventHandler(CncArduinoEnvironmentBase::onContinuousTimer), NULL, this);
    
    m_startupTimer->Stop();
    wxDELETE( m_startupTimer );

    m_continuousTimer->Stop();
    wxDELETE( m_continuousTimer );

}
