#include "GCodePathHandlerCnc.h"

//////////////////////////////////////////////////////////////////
GCodePathHandlerCnc::GCodePathHandlerCnc(CncControl* cnc) 
: GCodePathHandlerBase()
, cncControl(cnc)
, previousPos(0.0, 0.0, 0.0)
{
//////////////////////////////////////////////////////////////////
	wxASSERT(cncControl);
}
//////////////////////////////////////////////////////////////////
GCodePathHandlerCnc::~GCodePathHandlerCnc() {
//////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////
void GCodePathHandlerCnc::prepareWorkImpl() {
//////////////////////////////////////////////////////////////////
}
//////////////////////////////////////////////////////////////////
void GCodePathHandlerCnc::finishWorkImpl() {
//////////////////////////////////////////////////////////////////
	wxASSERT(cncControl);
	
	currentPos.setXYZ(0.0, 0.0, 0.0);
	
	cncControl->moveXYZToZeroPos();
	cncControl->switchToolOff();
}
//////////////////////////////////////////////////////////////////
bool GCodePathHandlerCnc::processLinearMove(bool alreadyRendered) {
//////////////////////////////////////////////////////////////////
	//std::clog << currentPos << std::endl;

	#warning - consider unit
	return cncControl->moveAbsLinearMetricXYZ(currentPos.getX(), currentPos.getY(), currentPos.getZ(), alreadyRendered);
}
//////////////////////////////////////////////////////////////////
bool GCodePathHandlerCnc::changeWorkSpeedXY(CncSpeed s) {
//////////////////////////////////////////////////////////////////
	cncControl->changeWorkSpeedXY(s);
	return true;
}
