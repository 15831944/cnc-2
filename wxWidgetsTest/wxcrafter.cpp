//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer1);
    
    m_notebook19 = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_notebook19->SetName(wxT("m_notebook19"));
    
    boxSizer1->Add(m_notebook19, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panel21 = new wxPanel(m_notebook19, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook19, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook19->AddPage(m_panel21, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer11 = new wxFlexGridSizer(1, 3, 0, 0);
    flexGridSizer11->SetFlexibleDirection( wxBOTH );
    flexGridSizer11->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer11->AddGrowableCol(0);
    flexGridSizer11->AddGrowableCol(1);
    flexGridSizer11->AddGrowableCol(2);
    flexGridSizer11->AddGrowableRow(0);
    m_panel21->SetSizer(flexGridSizer11);
    
    wxArrayString m_pgMgr13Arr;
    wxUnusedVar(m_pgMgr13Arr);
    wxArrayInt m_pgMgr13IntArr;
    wxUnusedVar(m_pgMgr13IntArr);
    m_pgMgr13 = new wxPropertyGridManager(m_panel21, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel21, wxSize(-1,-1)), wxPG_DESCRIPTION|wxPG_SPLITTER_AUTO_CENTER|wxPG_BOLD_MODIFIED);
    
    flexGridSizer11->Add(m_pgMgr13, 0, wxALL, WXC_FROM_DIP(5));
    
    #if wxUSE_WEBVIEW
    m_webView15 = wxWebView::New(m_panel21, wxID_ANY, _("about:blank"), wxDefaultPosition, wxDLG_UNIT(m_panel21, wxSize(-1,-1)), wxWebViewBackendDefault, 0);
    
    flexGridSizer11->Add(m_webView15, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    #endif // wxUSE_WEBVIEW
    
    m_stc17 = new wxStyledTextCtrl(m_panel21, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel21, wxSize(-1,-1)), 0);
    // Configure the fold margin
    m_stc17->SetMarginType     (4, wxSTC_MARGIN_SYMBOL);
    m_stc17->SetMarginMask     (4, wxSTC_MASK_FOLDERS);
    m_stc17->SetMarginSensitive(4, true);
    m_stc17->SetMarginWidth    (4, 16);
    
    m_stc17->SetProperty(wxT("fold"),wxT("1"));
    m_stc17->MarkerDefine(wxSTC_MARKNUM_FOLDEROPEN,    wxSTC_MARK_ARROWDOWN);
    m_stc17->MarkerDefine(wxSTC_MARKNUM_FOLDER,        wxSTC_MARK_ARROW);
    m_stc17->MarkerDefine(wxSTC_MARKNUM_FOLDERSUB,     wxSTC_MARK_BACKGROUND);
    m_stc17->MarkerDefine(wxSTC_MARKNUM_FOLDERTAIL,    wxSTC_MARK_BACKGROUND);
    m_stc17->MarkerDefine(wxSTC_MARKNUM_FOLDEREND,     wxSTC_MARK_ARROW);
    m_stc17->MarkerDefine(wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_ARROWDOWN);
    m_stc17->MarkerDefine(wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_BACKGROUND);
    // Configure the tracker margin
    m_stc17->SetMarginWidth(1, 0);
    
    // Configure the symbol margin
    m_stc17->SetMarginType (2, wxSTC_MARGIN_SYMBOL);
    m_stc17->SetMarginMask (2, ~(wxSTC_MASK_FOLDERS));
    m_stc17->SetMarginWidth(2, 0);
    m_stc17->SetMarginSensitive(2, true);
    
    // Configure the line numbers margin
    int m_stc17_PixelWidth = 4 + 5 *m_stc17->TextWidth(wxSTC_STYLE_LINENUMBER, wxT("9"));
    m_stc17->SetMarginType(0, wxSTC_MARGIN_NUMBER);
    m_stc17->SetMarginWidth(0,m_stc17_PixelWidth);
    
    // Configure the line symbol margin
    m_stc17->SetMarginType(3, wxSTC_MARGIN_FORE);
    m_stc17->SetMarginMask(3, 0);
    m_stc17->SetMarginWidth(3,0);
    // Select the lexer
    m_stc17->SetLexer(wxSTC_LEX_NULL);
    // Set default font / styles
    m_stc17->StyleClearAll();
    m_stc17->SetWrapMode(0);
    m_stc17->SetIndentationGuides(0);
    m_stc17->SetKeyWords(0, wxT(""));
    m_stc17->SetKeyWords(1, wxT(""));
    m_stc17->SetKeyWords(2, wxT(""));
    m_stc17->SetKeyWords(3, wxT(""));
    m_stc17->SetKeyWords(4, wxT(""));
    
    flexGridSizer11->Add(m_stc17, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panel23 = new wxPanel(m_notebook19, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook19, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook19->AddPage(m_panel23, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer25 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer25->SetFlexibleDirection( wxBOTH );
    flexGridSizer25->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_panel23->SetSizer(flexGridSizer25);
    
    m_staticText27 = new wxStaticText(m_panel23, wxID_ANY, _("Static Text Label"), wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), 0);
    
    flexGridSizer25->Add(m_staticText27, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticLine29 = new wxStaticLine(m_panel23, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    flexGridSizer25->Add(m_staticLine29, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrl31 = new wxTextCtrl(m_panel23, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl31->SetHint(wxT(""));
    #endif
    
    flexGridSizer25->Add(m_textCtrl31, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_choice33Arr;
    m_choice33 = new wxChoice(m_panel23, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), m_choice33Arr, 0);
    
    flexGridSizer25->Add(m_choice33, 0, wxALL, WXC_FROM_DIP(5));
    
    m_richTextCtrl35 = new wxRichTextCtrl(m_panel23, wxID_ANY, wxT("wxRichTextCtrl!"), wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), wxTE_MULTILINE|wxTE_PROCESS_TAB|wxTE_PROCESS_ENTER|wxWANTS_CHARS);
    
    flexGridSizer25->Add(m_richTextCtrl35, 0, wxALL, WXC_FROM_DIP(5));
    
    m_button37 = new wxButton(m_panel23, wxID_ANY, _("My Button"), wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), 0);
    
    flexGridSizer25->Add(m_button37, 0, wxALL, WXC_FROM_DIP(5));
    
    m_bmpButton39 = new wxBitmapButton(m_panel23, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("placeholder16")), wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), wxBU_AUTODRAW);
    
    flexGridSizer25->Add(m_bmpButton39, 0, wxALL, WXC_FROM_DIP(5));
    
    m_hyperLink41 = new wxHyperlinkCtrl(m_panel23, wxID_ANY, _("codelite IDE"), wxT("http://www.codelite.org"), wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), wxHL_DEFAULT_STYLE);
    m_hyperLink41->SetNormalColour(wxColour(wxT("#0000FF")));
    m_hyperLink41->SetHoverColour(wxColour(wxT("#0000FF")));
    m_hyperLink41->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    flexGridSizer25->Add(m_hyperLink41, 0, wxALL, WXC_FROM_DIP(5));
    
    m_checkBox43 = new wxCheckBox(m_panel23, wxID_ANY, _("My CheckBox"), wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), 0);
    m_checkBox43->SetValue(false);
    
    flexGridSizer25->Add(m_checkBox43, 0, wxALL, WXC_FROM_DIP(5));
    
    wxArrayString m_radioBox45Arr;
    m_radioBox45Arr.Add(_("An option"));
    m_radioBox45Arr.Add(_("Second Option"));
    m_radioBox45 = new wxRadioBox(m_panel23, wxID_ANY, _("My RadioBox"), wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), m_radioBox45Arr, 1, 0);
    m_radioBox45->SetSelection(0);
    
    flexGridSizer25->Add(m_radioBox45, 0, wxALL, WXC_FROM_DIP(5));
    
    m_bmpToggleBtn47 = new wxBitmapToggleButton(m_panel23, wxID_ANY, wxNullBitmap, wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), 0);
    m_bmpToggleBtn47->SetValue(true);
    
    flexGridSizer25->Add(m_bmpToggleBtn47, 0, wxALL, WXC_FROM_DIP(5));
    
    m_bmpComboBox49 = new wxBitmapComboBox(m_panel23, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDLG_UNIT(m_panel23, wxSize(-1,-1)), wxArrayString(), 0);
    
    flexGridSizer25->Add(m_bmpComboBox49, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panel51 = new wxPanel(m_notebook19, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook19, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook19->AddPage(m_panel51, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer53 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer53->SetFlexibleDirection( wxBOTH );
    flexGridSizer53->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_panel51->SetSizer(flexGridSizer53);
    
    m_panel55 = new wxPanel(m_panel51, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panel51, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    
    flexGridSizer53->Add(m_panel55, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panel57 = new wxPanel(m_notebook19, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebook19, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebook19->AddPage(m_panel57, _("Page"), false);
    
    wxFlexGridSizer* flexGridSizer59 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer59->SetFlexibleDirection( wxBOTH );
    flexGridSizer59->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    m_panel57->SetSizer(flexGridSizer59);
    
    int *m_glCanvas61Attr = NULL;
    m_glCanvas61 = new wxGLCanvas(m_panel57, wxID_ANY, m_glCanvas61Attr, wxDefaultPosition, wxDLG_UNIT(m_panel57, wxSize(-1,-1)), 0);
    wxDELETEA( m_glCanvas61Attr );
    
    flexGridSizer59->Add(m_glCanvas61, 0, wxALL, WXC_FROM_DIP(5));
    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_name6 = new wxMenu();
    m_menuBar->Append(m_name6, _("File"));
    
    m_menuItem7 = new wxMenuItem(m_name6, wxID_EXIT, _("Exit\tAlt-X"), _("Quit"), wxITEM_NORMAL);
    m_name6->Append(m_menuItem7);
    
    m_name8 = new wxMenu();
    m_menuBar->Append(m_name8, _("Help"));
    
    m_menuItem9 = new wxMenuItem(m_name8, wxID_ABOUT, _("About..."), wxT(""), wxITEM_NORMAL);
    m_name8->Append(m_menuItem9);
    
    m_mainToolbar = this->CreateToolBar(wxTB_FLAT, wxID_ANY);
    m_mainToolbar->SetToolBitmapSize(wxSize(16,16));
    
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebook19)){
        wxPersistenceManager::Get().RegisterAndRestore(m_notebook19);
    } else {
        wxPersistenceManager::Get().Restore(m_notebook19);
    }
    #endif
    
    SetName(wxT("MainFrameBaseClass"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    this->Connect(m_menuItem7->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_menuItem9->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    #if wxUSE_WEBVIEW
    
    #endif // wxUSE_WEBVIEW
    this->Disconnect(m_menuItem7->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_menuItem9->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
}
